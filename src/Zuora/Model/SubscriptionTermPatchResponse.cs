/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Term information of the subscription.
    /// </summary>
    [DataContract]
    public partial class SubscriptionTermPatchResponse :  IEquatable<SubscriptionTermPatchResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionTermPatchResponse" /> class.
        /// </summary>
        /// <param name="currentTerm">Current term information for the subscription..</param>
        /// <param name="renewalTerm">Renewal term information for the subscription..</param>
        /// <param name="autoRenew">If true, the subscription automatically renews at the end of the current term..</param>
        public SubscriptionTermPatchResponse(Term currentTerm = default(Term), Term renewalTerm = default(Term), bool autoRenew = default(bool))
        {
            this.current_term = currentTerm;
            this.renewal_term = renewalTerm;
            this.current_term = currentTerm;
            this.renewal_term = renewalTerm;
            this.auto_renew = autoRenew;
        }

        /// <summary>
        /// Current term information for the subscription.
        /// </summary>
        /// <value>Current term information for the subscription.</value>
        [DataMember(Name="current_term", EmitDefaultValue=true)]
        public Term current_term { get; set; }

        /// <summary>
        /// Renewal term information for the subscription.
        /// </summary>
        /// <value>Renewal term information for the subscription.</value>
        [DataMember(Name="renewal_term", EmitDefaultValue=true)]
        public Term renewal_term { get; set; }

        /// <summary>
        /// If true, the subscription automatically renews at the end of the current term.
        /// </summary>
        /// <value>If true, the subscription automatically renews at the end of the current term.</value>
        [DataMember(Name="auto_renew", EmitDefaultValue=false)]
        public bool auto_renew { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionTermPatchResponse {\n");
            sb.Append("  current_term: ").Append(current_term).Append("\n");
            sb.Append("  renewal_term: ").Append(renewal_term).Append("\n");
            sb.Append("  auto_renew: ").Append(auto_renew).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionTermPatchResponse);
        }

        /// <summary>
        /// Returns true if SubscriptionTermPatchResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionTermPatchResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionTermPatchResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.current_term == input.current_term ||
                    (this.current_term != null &&
                    this.current_term.Equals(input.current_term))
                ) && 
                (
                    this.renewal_term == input.renewal_term ||
                    (this.renewal_term != null &&
                    this.renewal_term.Equals(input.renewal_term))
                ) && 
                (
                    this.auto_renew == input.auto_renew ||
                    (this.auto_renew != null &&
                    this.auto_renew.Equals(input.auto_renew))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.current_term != null)
                    hashCode = hashCode * 59 + this.current_term.GetHashCode();
                if (this.renewal_term != null)
                    hashCode = hashCode * 59 + this.renewal_term.GetHashCode();
                if (this.auto_renew != null)
                    hashCode = hashCode * 59 + this.auto_renew.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
