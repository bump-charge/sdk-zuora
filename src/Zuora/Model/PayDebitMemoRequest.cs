/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// PayDebitMemoRequest
    /// </summary>
    [DataContract]
    public partial class PayDebitMemoRequest :  IEquatable<PayDebitMemoRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayDebitMemoRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayDebitMemoRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayDebitMemoRequest" /> class.
        /// </summary>
        /// <param name="amount">The amount of the payment..</param>
        /// <param name="accountId">Identifier of the account that owns the debit memo..</param>
        /// <param name="accountNumber">Human-readable identifier of the account that owns the debit memo..</param>
        /// <param name="authorizationId">Identifier of the authorization transaction from the payment gateway..</param>
        /// <param name="description">An arbitrary string attached to the object. Often useful for displaying to users..</param>
        /// <param name="currency">3-letter ISO 4217 currency code. (required).</param>
        /// <param name="bankAccountAccount">An active account in your Zuora Chart of Accounts..</param>
        /// <param name="paymentDate">The date and time when the payment takes effect..</param>
        /// <param name="paymentMethodId">Identifier of the payment method used to create this payment..</param>
        /// <param name="gatewayId">Identifier of the payment gateway that Zuora will use to authorize this payment..</param>
        /// <param name="gatewayOrderId">A merchant-specified natural key value that can be passed to the payment gateway when a payment is created. If not specified, the payment number will be passed in instead..</param>
        /// <param name="referenceId">A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments..</param>
        /// <param name="gatewayOptions">gatewayOptions.</param>
        /// <param name="statementDescriptor">A payment gateway-specific field used by Orbital, Vantiv and Verifi..</param>
        /// <param name="statementDescriptorPhone">A payment gateway-specific field used by Orbital, Vantiv and Verifi..</param>
        /// <param name="external">If true, indicates that this payment is not handled by Zuora..</param>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        public PayDebitMemoRequest(decimal amount = default(decimal), string accountId = default(string), string accountNumber = default(string), string authorizationId = default(string), string description = default(string), string currency = default(string), string bankAccountAccount = default(string), DateTime paymentDate = default(DateTime), string paymentMethodId = default(string), string gatewayId = default(string), string gatewayOrderId = default(string), string referenceId = default(string), Dictionary<string, string> gatewayOptions = default(Dictionary<string, string>), string statementDescriptor = default(string), string statementDescriptorPhone = default(string), bool external = default(bool), Dictionary<string, Object> customFields = default(Dictionary<string, Object>))
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for PayDebitMemoRequest and cannot be null");
            }
            else
            {
                this.currency = currency;
            }

            this.amount = amount;
            this.account_id = accountId;
            this.account_number = accountNumber;
            this.authorization_id = authorizationId;
            this.description = description;
            this.bank_account_account = bankAccountAccount;
            this.payment_date = paymentDate;
            this.payment_method_id = paymentMethodId;
            this.gateway_id = gatewayId;
            this.gateway_order_id = gatewayOrderId;
            this.reference_id = referenceId;
            this.gateway_options = gatewayOptions;
            this.statement_descriptor = statementDescriptor;
            this.statement_descriptor_phone = statementDescriptorPhone;
            this.external = external;
            this.custom_fields = customFields;
        }

        /// <summary>
        /// The amount of the payment.
        /// </summary>
        /// <value>The amount of the payment.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal amount { get; set; }

        /// <summary>
        /// Identifier of the account that owns the debit memo.
        /// </summary>
        /// <value>Identifier of the account that owns the debit memo.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string account_id { get; set; }

        /// <summary>
        /// Human-readable identifier of the account that owns the debit memo.
        /// </summary>
        /// <value>Human-readable identifier of the account that owns the debit memo.</value>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string account_number { get; set; }

        /// <summary>
        /// Identifier of the authorization transaction from the payment gateway.
        /// </summary>
        /// <value>Identifier of the authorization transaction from the payment gateway.</value>
        [DataMember(Name="authorization_id", EmitDefaultValue=false)]
        public string authorization_id { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// 3-letter ISO 4217 currency code.
        /// </summary>
        /// <value>3-letter ISO 4217 currency code.</value>
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public string currency { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>
        [DataMember(Name="bank_account_account", EmitDefaultValue=false)]
        public string bank_account_account { get; set; }

        /// <summary>
        /// The date and time when the payment takes effect.
        /// </summary>
        /// <value>The date and time when the payment takes effect.</value>
        [DataMember(Name="payment_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime payment_date { get; set; }

        /// <summary>
        /// Identifier of the payment method used to create this payment.
        /// </summary>
        /// <value>Identifier of the payment method used to create this payment.</value>
        [DataMember(Name="payment_method_id", EmitDefaultValue=false)]
        public string payment_method_id { get; set; }

        /// <summary>
        /// Identifier of the payment gateway that Zuora will use to authorize this payment.
        /// </summary>
        /// <value>Identifier of the payment gateway that Zuora will use to authorize this payment.</value>
        [DataMember(Name="gateway_id", EmitDefaultValue=false)]
        public string gateway_id { get; set; }

        /// <summary>
        /// A merchant-specified natural key value that can be passed to the payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
        /// </summary>
        /// <value>A merchant-specified natural key value that can be passed to the payment gateway when a payment is created. If not specified, the payment number will be passed in instead.</value>
        [DataMember(Name="gateway_order_id", EmitDefaultValue=false)]
        public string gateway_order_id { get; set; }

        /// <summary>
        /// A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.</value>
        [DataMember(Name="reference_id", EmitDefaultValue=false)]
        public string reference_id { get; set; }

        /// <summary>
        /// Gets or Sets gateway_options
        /// </summary>
        [DataMember(Name="gateway_options", EmitDefaultValue=false)]
        public Dictionary<string, string> gateway_options { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>
        [DataMember(Name="statement_descriptor", EmitDefaultValue=false)]
        public string statement_descriptor { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>
        [DataMember(Name="statement_descriptor_phone", EmitDefaultValue=false)]
        public string statement_descriptor_phone { get; set; }

        /// <summary>
        /// If true, indicates that this payment is not handled by Zuora.
        /// </summary>
        /// <value>If true, indicates that this payment is not handled by Zuora.</value>
        [DataMember(Name="external", EmitDefaultValue=false)]
        public bool external { get; set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayDebitMemoRequest {\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  account_id: ").Append(account_id).Append("\n");
            sb.Append("  account_number: ").Append(account_number).Append("\n");
            sb.Append("  authorization_id: ").Append(authorization_id).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  currency: ").Append(currency).Append("\n");
            sb.Append("  bank_account_account: ").Append(bank_account_account).Append("\n");
            sb.Append("  payment_date: ").Append(payment_date).Append("\n");
            sb.Append("  payment_method_id: ").Append(payment_method_id).Append("\n");
            sb.Append("  gateway_id: ").Append(gateway_id).Append("\n");
            sb.Append("  gateway_order_id: ").Append(gateway_order_id).Append("\n");
            sb.Append("  reference_id: ").Append(reference_id).Append("\n");
            sb.Append("  gateway_options: ").Append(gateway_options).Append("\n");
            sb.Append("  statement_descriptor: ").Append(statement_descriptor).Append("\n");
            sb.Append("  statement_descriptor_phone: ").Append(statement_descriptor_phone).Append("\n");
            sb.Append("  external: ").Append(external).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayDebitMemoRequest);
        }

        /// <summary>
        /// Returns true if PayDebitMemoRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PayDebitMemoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayDebitMemoRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.account_id == input.account_id ||
                    (this.account_id != null &&
                    this.account_id.Equals(input.account_id))
                ) && 
                (
                    this.account_number == input.account_number ||
                    (this.account_number != null &&
                    this.account_number.Equals(input.account_number))
                ) && 
                (
                    this.authorization_id == input.authorization_id ||
                    (this.authorization_id != null &&
                    this.authorization_id.Equals(input.authorization_id))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.currency == input.currency ||
                    (this.currency != null &&
                    this.currency.Equals(input.currency))
                ) && 
                (
                    this.bank_account_account == input.bank_account_account ||
                    (this.bank_account_account != null &&
                    this.bank_account_account.Equals(input.bank_account_account))
                ) && 
                (
                    this.payment_date == input.payment_date ||
                    (this.payment_date != null &&
                    this.payment_date.Equals(input.payment_date))
                ) && 
                (
                    this.payment_method_id == input.payment_method_id ||
                    (this.payment_method_id != null &&
                    this.payment_method_id.Equals(input.payment_method_id))
                ) && 
                (
                    this.gateway_id == input.gateway_id ||
                    (this.gateway_id != null &&
                    this.gateway_id.Equals(input.gateway_id))
                ) && 
                (
                    this.gateway_order_id == input.gateway_order_id ||
                    (this.gateway_order_id != null &&
                    this.gateway_order_id.Equals(input.gateway_order_id))
                ) && 
                (
                    this.reference_id == input.reference_id ||
                    (this.reference_id != null &&
                    this.reference_id.Equals(input.reference_id))
                ) && 
                (
                    this.gateway_options == input.gateway_options ||
                    this.gateway_options != null &&
                    input.gateway_options != null &&
                    this.gateway_options.SequenceEqual(input.gateway_options)
                ) && 
                (
                    this.statement_descriptor == input.statement_descriptor ||
                    (this.statement_descriptor != null &&
                    this.statement_descriptor.Equals(input.statement_descriptor))
                ) && 
                (
                    this.statement_descriptor_phone == input.statement_descriptor_phone ||
                    (this.statement_descriptor_phone != null &&
                    this.statement_descriptor_phone.Equals(input.statement_descriptor_phone))
                ) && 
                (
                    this.external == input.external ||
                    (this.external != null &&
                    this.external.Equals(input.external))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.account_id != null)
                    hashCode = hashCode * 59 + this.account_id.GetHashCode();
                if (this.account_number != null)
                    hashCode = hashCode * 59 + this.account_number.GetHashCode();
                if (this.authorization_id != null)
                    hashCode = hashCode * 59 + this.authorization_id.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.currency != null)
                    hashCode = hashCode * 59 + this.currency.GetHashCode();
                if (this.bank_account_account != null)
                    hashCode = hashCode * 59 + this.bank_account_account.GetHashCode();
                if (this.payment_date != null)
                    hashCode = hashCode * 59 + this.payment_date.GetHashCode();
                if (this.payment_method_id != null)
                    hashCode = hashCode * 59 + this.payment_method_id.GetHashCode();
                if (this.gateway_id != null)
                    hashCode = hashCode * 59 + this.gateway_id.GetHashCode();
                if (this.gateway_order_id != null)
                    hashCode = hashCode * 59 + this.gateway_order_id.GetHashCode();
                if (this.reference_id != null)
                    hashCode = hashCode * 59 + this.reference_id.GetHashCode();
                if (this.gateway_options != null)
                    hashCode = hashCode * 59 + this.gateway_options.GetHashCode();
                if (this.statement_descriptor != null)
                    hashCode = hashCode * 59 + this.statement_descriptor.GetHashCode();
                if (this.statement_descriptor_phone != null)
                    hashCode = hashCode * 59 + this.statement_descriptor_phone.GetHashCode();
                if (this.external != null)
                    hashCode = hashCode * 59 + this.external.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
