/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// SubscriptionPreviewActionsResponse
    /// </summary>
    [DataContract]
    public partial class SubscriptionPreviewActionsResponse :  IEquatable<SubscriptionPreviewActionsResponse>, IValidatableObject
    {
        /// <summary>
        /// The action associated with this metric.
        /// </summary>
        /// <value>The action associated with this metric.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Createsubscription for value: create_subscription
            /// </summary>
            [EnumMember(Value = "create_subscription")]
            Createsubscription = 1,

            /// <summary>
            /// Enum Updatetermsandconditions for value: update_terms_and_conditions
            /// </summary>
            [EnumMember(Value = "update_terms_and_conditions")]
            Updatetermsandconditions = 2,

            /// <summary>
            /// Enum Addproduct for value: add_product
            /// </summary>
            [EnumMember(Value = "add_product")]
            Addproduct = 3,

            /// <summary>
            /// Enum Updateproduct for value: update_product
            /// </summary>
            [EnumMember(Value = "update_product")]
            Updateproduct = 4,

            /// <summary>
            /// Enum Removeproduct for value: remove_product
            /// </summary>
            [EnumMember(Value = "remove_product")]
            Removeproduct = 5,

            /// <summary>
            /// Enum Renewsubscription for value: renew_subscription
            /// </summary>
            [EnumMember(Value = "renew_subscription")]
            Renewsubscription = 6,

            /// <summary>
            /// Enum Cancelsubscription for value: cancel_subscription
            /// </summary>
            [EnumMember(Value = "cancel_subscription")]
            Cancelsubscription = 7,

            /// <summary>
            /// Enum Transferownership for value: transfer_ownership
            /// </summary>
            [EnumMember(Value = "transfer_ownership")]
            Transferownership = 8,

            /// <summary>
            /// Enum Pausesubscription for value: pause_subscription
            /// </summary>
            [EnumMember(Value = "pause_subscription")]
            Pausesubscription = 9,

            /// <summary>
            /// Enum Resumesubscription for value: resume_subscription
            /// </summary>
            [EnumMember(Value = "resume_subscription")]
            Resumesubscription = 10

        }

        /// <summary>
        /// The action associated with this metric.
        /// </summary>
        /// <value>The action associated with this metric.</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPreviewActionsResponse" /> class.
        /// </summary>
        /// <param name="actionId">Identifier of the action..</param>
        /// <param name="action">The action associated with this metric..</param>
        /// <param name="sequence">The sequence number of the action..</param>
        /// <param name="subscriptionItems">subscriptionItems.</param>
        public SubscriptionPreviewActionsResponse(string actionId = default(string), ActionEnum? action = default(ActionEnum?), int sequence = default(int), List<SubscriptionItemPreviewResponse> subscriptionItems = default(List<SubscriptionItemPreviewResponse>))
        {
            this.action_id = actionId;
            this.action = action;
            this.sequence = sequence;
            this.subscription_items = subscriptionItems;
        }

        /// <summary>
        /// Identifier of the action.
        /// </summary>
        /// <value>Identifier of the action.</value>
        [DataMember(Name="action_id", EmitDefaultValue=false)]
        public string action_id { get; set; }


        /// <summary>
        /// The sequence number of the action.
        /// </summary>
        /// <value>The sequence number of the action.</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int sequence { get; set; }

        /// <summary>
        /// Gets or Sets subscription_items
        /// </summary>
        [DataMember(Name="subscription_items", EmitDefaultValue=false)]
        public List<SubscriptionItemPreviewResponse> subscription_items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPreviewActionsResponse {\n");
            sb.Append("  action_id: ").Append(action_id).Append("\n");
            sb.Append("  action: ").Append(action).Append("\n");
            sb.Append("  sequence: ").Append(sequence).Append("\n");
            sb.Append("  subscription_items: ").Append(subscription_items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionPreviewActionsResponse);
        }

        /// <summary>
        /// Returns true if SubscriptionPreviewActionsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionPreviewActionsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPreviewActionsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.action_id == input.action_id ||
                    (this.action_id != null &&
                    this.action_id.Equals(input.action_id))
                ) && 
                (
                    this.action == input.action ||
                    (this.action != null &&
                    this.action.Equals(input.action))
                ) && 
                (
                    this.sequence == input.sequence ||
                    (this.sequence != null &&
                    this.sequence.Equals(input.sequence))
                ) && 
                (
                    this.subscription_items == input.subscription_items ||
                    this.subscription_items != null &&
                    input.subscription_items != null &&
                    this.subscription_items.SequenceEqual(input.subscription_items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.action_id != null)
                    hashCode = hashCode * 59 + this.action_id.GetHashCode();
                if (this.action != null)
                    hashCode = hashCode * 59 + this.action.GetHashCode();
                if (this.sequence != null)
                    hashCode = hashCode * 59 + this.sequence.GetHashCode();
                if (this.subscription_items != null)
                    hashCode = hashCode * 59 + this.subscription_items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
