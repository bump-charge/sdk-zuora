/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// The financial information of the credit memo items generated to write off the invoice balance.
    /// </summary>
    [DataContract]
    public partial class WriteOffSuscriptionRequest :  IEquatable<WriteOffSuscriptionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WriteOffSuscriptionRequest" /> class.
        /// </summary>
        /// <param name="onAccountAccountingCode">An active accounting code in your Zuora chart of accounts..</param>
        /// <param name="deferredRevenueAccountingCode">An active accounting code in your Zuora chart of accounts..</param>
        /// <param name="recognizedRevenueAccountingCode">An active accounting code in your Zuora chart of accounts..</param>
        /// <param name="revenueRecognitionRuleName">Name of the revenue recognition rule that you want to apply..</param>
        public WriteOffSuscriptionRequest(string onAccountAccountingCode = default(string), string deferredRevenueAccountingCode = default(string), string recognizedRevenueAccountingCode = default(string), string revenueRecognitionRuleName = default(string))
        {
            this.on_account_accounting_code = onAccountAccountingCode;
            this.deferred_revenue_accounting_code = deferredRevenueAccountingCode;
            this.recognized_revenue_accounting_code = recognizedRevenueAccountingCode;
            this.revenue_recognition_rule_name = revenueRecognitionRuleName;
        }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>
        [DataMember(Name="on_account_accounting_code", EmitDefaultValue=false)]
        public string on_account_accounting_code { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>
        [DataMember(Name="deferred_revenue_accounting_code", EmitDefaultValue=false)]
        public string deferred_revenue_accounting_code { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>
        [DataMember(Name="recognized_revenue_accounting_code", EmitDefaultValue=false)]
        public string recognized_revenue_accounting_code { get; set; }

        /// <summary>
        /// Name of the revenue recognition rule that you want to apply.
        /// </summary>
        /// <value>Name of the revenue recognition rule that you want to apply.</value>
        [DataMember(Name="revenue_recognition_rule_name", EmitDefaultValue=false)]
        public string revenue_recognition_rule_name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WriteOffSuscriptionRequest {\n");
            sb.Append("  on_account_accounting_code: ").Append(on_account_accounting_code).Append("\n");
            sb.Append("  deferred_revenue_accounting_code: ").Append(deferred_revenue_accounting_code).Append("\n");
            sb.Append("  recognized_revenue_accounting_code: ").Append(recognized_revenue_accounting_code).Append("\n");
            sb.Append("  revenue_recognition_rule_name: ").Append(revenue_recognition_rule_name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WriteOffSuscriptionRequest);
        }

        /// <summary>
        /// Returns true if WriteOffSuscriptionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WriteOffSuscriptionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WriteOffSuscriptionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.on_account_accounting_code == input.on_account_accounting_code ||
                    (this.on_account_accounting_code != null &&
                    this.on_account_accounting_code.Equals(input.on_account_accounting_code))
                ) && 
                (
                    this.deferred_revenue_accounting_code == input.deferred_revenue_accounting_code ||
                    (this.deferred_revenue_accounting_code != null &&
                    this.deferred_revenue_accounting_code.Equals(input.deferred_revenue_accounting_code))
                ) && 
                (
                    this.recognized_revenue_accounting_code == input.recognized_revenue_accounting_code ||
                    (this.recognized_revenue_accounting_code != null &&
                    this.recognized_revenue_accounting_code.Equals(input.recognized_revenue_accounting_code))
                ) && 
                (
                    this.revenue_recognition_rule_name == input.revenue_recognition_rule_name ||
                    (this.revenue_recognition_rule_name != null &&
                    this.revenue_recognition_rule_name.Equals(input.revenue_recognition_rule_name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.on_account_accounting_code != null)
                    hashCode = hashCode * 59 + this.on_account_accounting_code.GetHashCode();
                if (this.deferred_revenue_accounting_code != null)
                    hashCode = hashCode * 59 + this.deferred_revenue_accounting_code.GetHashCode();
                if (this.recognized_revenue_accounting_code != null)
                    hashCode = hashCode * 59 + this.recognized_revenue_accounting_code.GetHashCode();
                if (this.revenue_recognition_rule_name != null)
                    hashCode = hashCode * 59 + this.revenue_recognition_rule_name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
