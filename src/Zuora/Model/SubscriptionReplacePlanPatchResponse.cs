/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// SubscriptionReplacePlanPatchResponse
    /// </summary>
    [DataContract]
    public partial class SubscriptionReplacePlanPatchResponse :  IEquatable<SubscriptionReplacePlanPatchResponse>, IValidatableObject
    {
        /// <summary>
        /// The date when the replacement occurs. It can be either the current date or the end of the current billing period.
        /// </summary>
        /// <value>The date when the replacement occurs. It can be either the current date or the end of the current billing period.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReplaceAtEnum
        {
            /// <summary>
            /// Enum Now for value: now
            /// </summary>
            [EnumMember(Value = "now")]
            Now = 1,

            /// <summary>
            /// Enum Endofbillingperiod for value: end_of_billing_period
            /// </summary>
            [EnumMember(Value = "end_of_billing_period")]
            Endofbillingperiod = 2,

            /// <summary>
            /// Enum Specificdate for value: specific_date
            /// </summary>
            [EnumMember(Value = "specific_date")]
            Specificdate = 3

        }

        /// <summary>
        /// The date when the replacement occurs. It can be either the current date or the end of the current billing period.
        /// </summary>
        /// <value>The date when the replacement occurs. It can be either the current date or the end of the current billing period.</value>
        [DataMember(Name="replace_at", EmitDefaultValue=false)]
        public ReplaceAtEnum? replace_at { get; set; }
        /// <summary>
        /// The type of the replacement.
        /// </summary>
        /// <value>The type of the replacement.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReplacementTypeEnum
        {
            /// <summary>
            /// Enum Upgrade for value: upgrade
            /// </summary>
            [EnumMember(Value = "upgrade")]
            Upgrade = 1,

            /// <summary>
            /// Enum Downgrade for value: downgrade
            /// </summary>
            [EnumMember(Value = "downgrade")]
            Downgrade = 2,

            /// <summary>
            /// Enum Crossgrade for value: crossgrade
            /// </summary>
            [EnumMember(Value = "crossgrade")]
            Crossgrade = 3,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 4

        }

        /// <summary>
        /// The type of the replacement.
        /// </summary>
        /// <value>The type of the replacement.</value>
        [DataMember(Name="replacement_type", EmitDefaultValue=false)]
        public ReplacementTypeEnum? replacement_type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionReplacePlanPatchResponse" /> class.
        /// </summary>
        /// <param name="previousSubscriptionPlanId">Identifier of the subscription plan..</param>
        /// <param name="previousPlanId">Identifier of the plan to be removed..</param>
        /// <param name="replaceAt">The date when the replacement occurs. It can be either the current date or the end of the current billing period..</param>
        /// <param name="replacementType">The type of the replacement..</param>
        /// <param name="uniqueToken">A unique string to represent the subscription plan in the order. The unique token is used to perform multiple actions against a newly added subscription plan. For example, if you want to add and update a product in the same order, assign a unique token to the newly added subscription plan and use that token in future order actions..</param>
        /// <param name="planId">The id of the subscription plan to be updated. It can be the latest version or any history version id..</param>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        public SubscriptionReplacePlanPatchResponse(string previousSubscriptionPlanId = default(string), string previousPlanId = default(string), ReplaceAtEnum? replaceAt = default(ReplaceAtEnum?), ReplacementTypeEnum? replacementType = default(ReplacementTypeEnum?), string uniqueToken = default(string), string planId = default(string), Dictionary<string, Object> customFields = default(Dictionary<string, Object>))
        {
            this.previous_subscription_plan_id = previousSubscriptionPlanId;
            this.previous_plan_id = previousPlanId;
            this.replace_at = replaceAt;
            this.replacement_type = replacementType;
            this.unique_token = uniqueToken;
            this.plan_id = planId;
            this.custom_fields = customFields;
        }

        /// <summary>
        /// Identifier of the subscription plan.
        /// </summary>
        /// <value>Identifier of the subscription plan.</value>
        [DataMember(Name="previous_subscription_plan_id", EmitDefaultValue=false)]
        public string previous_subscription_plan_id { get; set; }

        /// <summary>
        /// Identifier of the plan to be removed.
        /// </summary>
        /// <value>Identifier of the plan to be removed.</value>
        [DataMember(Name="previous_plan_id", EmitDefaultValue=false)]
        public string previous_plan_id { get; set; }



        /// <summary>
        /// A unique string to represent the subscription plan in the order. The unique token is used to perform multiple actions against a newly added subscription plan. For example, if you want to add and update a product in the same order, assign a unique token to the newly added subscription plan and use that token in future order actions.
        /// </summary>
        /// <value>A unique string to represent the subscription plan in the order. The unique token is used to perform multiple actions against a newly added subscription plan. For example, if you want to add and update a product in the same order, assign a unique token to the newly added subscription plan and use that token in future order actions.</value>
        [DataMember(Name="unique_token", EmitDefaultValue=false)]
        public string unique_token { get; set; }

        /// <summary>
        /// The id of the subscription plan to be updated. It can be the latest version or any history version id.
        /// </summary>
        /// <value>The id of the subscription plan to be updated. It can be the latest version or any history version id.</value>
        [DataMember(Name="plan_id", EmitDefaultValue=false)]
        public string plan_id { get; set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// Gets or Sets subscription_items
        /// </summary>
        [DataMember(Name="subscription_items", EmitDefaultValue=false)]
        public List<SubscriptionItem> subscription_items { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionReplacePlanPatchResponse {\n");
            sb.Append("  previous_subscription_plan_id: ").Append(previous_subscription_plan_id).Append("\n");
            sb.Append("  previous_plan_id: ").Append(previous_plan_id).Append("\n");
            sb.Append("  replace_at: ").Append(replace_at).Append("\n");
            sb.Append("  replacement_type: ").Append(replacement_type).Append("\n");
            sb.Append("  unique_token: ").Append(unique_token).Append("\n");
            sb.Append("  plan_id: ").Append(plan_id).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  subscription_items: ").Append(subscription_items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionReplacePlanPatchResponse);
        }

        /// <summary>
        /// Returns true if SubscriptionReplacePlanPatchResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionReplacePlanPatchResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionReplacePlanPatchResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.previous_subscription_plan_id == input.previous_subscription_plan_id ||
                    (this.previous_subscription_plan_id != null &&
                    this.previous_subscription_plan_id.Equals(input.previous_subscription_plan_id))
                ) && 
                (
                    this.previous_plan_id == input.previous_plan_id ||
                    (this.previous_plan_id != null &&
                    this.previous_plan_id.Equals(input.previous_plan_id))
                ) && 
                (
                    this.replace_at == input.replace_at ||
                    (this.replace_at != null &&
                    this.replace_at.Equals(input.replace_at))
                ) && 
                (
                    this.replacement_type == input.replacement_type ||
                    (this.replacement_type != null &&
                    this.replacement_type.Equals(input.replacement_type))
                ) && 
                (
                    this.unique_token == input.unique_token ||
                    (this.unique_token != null &&
                    this.unique_token.Equals(input.unique_token))
                ) && 
                (
                    this.plan_id == input.plan_id ||
                    (this.plan_id != null &&
                    this.plan_id.Equals(input.plan_id))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.subscription_items == input.subscription_items ||
                    this.subscription_items != null &&
                    input.subscription_items != null &&
                    this.subscription_items.SequenceEqual(input.subscription_items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.previous_subscription_plan_id != null)
                    hashCode = hashCode * 59 + this.previous_subscription_plan_id.GetHashCode();
                if (this.previous_plan_id != null)
                    hashCode = hashCode * 59 + this.previous_plan_id.GetHashCode();
                if (this.replace_at != null)
                    hashCode = hashCode * 59 + this.replace_at.GetHashCode();
                if (this.replacement_type != null)
                    hashCode = hashCode * 59 + this.replacement_type.GetHashCode();
                if (this.unique_token != null)
                    hashCode = hashCode * 59 + this.unique_token.GetHashCode();
                if (this.plan_id != null)
                    hashCode = hashCode * 59 + this.plan_id.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.subscription_items != null)
                    hashCode = hashCode * 59 + this.subscription_items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
