/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// SubscriptionItemCreateRequest
    /// </summary>
    [DataContract]
    public partial class SubscriptionItemCreateRequest :  IEquatable<SubscriptionItemCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Specifies when to start billing your customer.
        /// </summary>
        /// <value>Specifies when to start billing your customer.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StartEventEnum
        {
            /// <summary>
            /// Enum Contracteffective for value: contract_effective
            /// </summary>
            [EnumMember(Value = "contract_effective")]
            Contracteffective = 1,

            /// <summary>
            /// Enum Serviceactivation for value: service_activation
            /// </summary>
            [EnumMember(Value = "service_activation")]
            Serviceactivation = 2,

            /// <summary>
            /// Enum Customeracceptance for value: customer_acceptance
            /// </summary>
            [EnumMember(Value = "customer_acceptance")]
            Customeracceptance = 3,

            /// <summary>
            /// Enum Specificdate for value: specific_date
            /// </summary>
            [EnumMember(Value = "specific_date")]
            Specificdate = 4

        }

        /// <summary>
        /// Specifies when to start billing your customer.
        /// </summary>
        /// <value>Specifies when to start billing your customer.</value>
        [DataMember(Name="start_event", EmitDefaultValue=false)]
        public StartEventEnum? start_event { get; set; }
        /// <summary>
        /// Specifies the mode of tiering.
        /// </summary>
        /// <value>Specifies the mode of tiering.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TiersModeEnum
        {
            /// <summary>
            /// Enum Graduated for value: graduated
            /// </summary>
            [EnumMember(Value = "graduated")]
            Graduated = 1,

            /// <summary>
            /// Enum Volume for value: volume
            /// </summary>
            [EnumMember(Value = "volume")]
            Volume = 2,

            /// <summary>
            /// Enum Highwatermarkvolume for value: high_watermark_volume
            /// </summary>
            [EnumMember(Value = "high_watermark_volume")]
            Highwatermarkvolume = 3,

            /// <summary>
            /// Enum Highwatermarkgraduated for value: high_watermark_graduated
            /// </summary>
            [EnumMember(Value = "high_watermark_graduated")]
            Highwatermarkgraduated = 4,

            /// <summary>
            /// Enum Graduatedwithoverage for value: graduated_with_overage
            /// </summary>
            [EnumMember(Value = "graduated_with_overage")]
            Graduatedwithoverage = 5

        }

        /// <summary>
        /// Specifies the mode of tiering.
        /// </summary>
        /// <value>Specifies the mode of tiering.</value>
        [DataMember(Name="tiers_mode", EmitDefaultValue=false)]
        public TiersModeEnum? tiers_mode { get; set; }
        /// <summary>
        /// Specifies the base interval of the price the subscriber is subscribed to. If not provided, this field defaults to &#x60;billing_period&#x60;.
        /// </summary>
        /// <value>Specifies the base interval of the price the subscriber is subscribed to. If not provided, this field defaults to &#x60;billing_period&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriceBaseIntervalEnum
        {
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 1,

            /// <summary>
            /// Enum Billingperiod for value: billing_period
            /// </summary>
            [EnumMember(Value = "billing_period")]
            Billingperiod = 2,

            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 3

        }

        /// <summary>
        /// Specifies the base interval of the price the subscriber is subscribed to. If not provided, this field defaults to &#x60;billing_period&#x60;.
        /// </summary>
        /// <value>Specifies the base interval of the price the subscriber is subscribed to. If not provided, this field defaults to &#x60;billing_period&#x60;.</value>
        [DataMember(Name="price_base_interval", EmitDefaultValue=false)]
        public PriceBaseIntervalEnum? price_base_interval { get; set; }
        /// <summary>
        /// Defines apply_discount_to
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplyDiscountToEnum
        {
            /// <summary>
            /// Enum Onetime for value: one_time
            /// </summary>
            [EnumMember(Value = "one_time")]
            Onetime = 1,

            /// <summary>
            /// Enum Recurring for value: recurring
            /// </summary>
            [EnumMember(Value = "recurring")]
            Recurring = 2,

            /// <summary>
            /// Enum Usage for value: usage
            /// </summary>
            [EnumMember(Value = "usage")]
            Usage = 3

        }


        /// <summary>
        /// Any combination of one-time, recurring, and usage.
        /// </summary>
        /// <value>Any combination of one-time, recurring, and usage.</value>
        [DataMember(Name="apply_discount_to", EmitDefaultValue=false)]
        public List<ApplyDiscountToEnum> apply_discount_to { get; set; }
        /// <summary>
        /// Specifies at what level a discount should be applied: one of account, subscription or plan.
        /// </summary>
        /// <value>Specifies at what level a discount should be applied: one of account, subscription or plan.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiscountLevelEnum
        {
            /// <summary>
            /// Enum Account for value: account
            /// </summary>
            [EnumMember(Value = "account")]
            Account = 1,

            /// <summary>
            /// Enum Subscription for value: subscription
            /// </summary>
            [EnumMember(Value = "subscription")]
            Subscription = 2,

            /// <summary>
            /// Enum Plan for value: plan
            /// </summary>
            [EnumMember(Value = "plan")]
            Plan = 3

        }

        /// <summary>
        /// Specifies at what level a discount should be applied: one of account, subscription or plan.
        /// </summary>
        /// <value>Specifies at what level a discount should be applied: one of account, subscription or plan.</value>
        [DataMember(Name="discount_level", EmitDefaultValue=false)]
        public DiscountLevelEnum? discount_level { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionItemCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionItemCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionItemCreateRequest" /> class.
        /// </summary>
        /// <param name="priceId">Identifier of the price. (required).</param>
        /// <param name="subscriptionItemNumber">Human-readable identifier of the subscription item. It can be user-supplied..</param>
        /// <param name="description">Description of the price. Often useful for displaying to users..</param>
        /// <param name="recurring">recurring.</param>
        /// <param name="startEvent">Specifies when to start billing your customer..</param>
        /// <param name="startDate">The date when the subscription item starts.</param>
        /// <param name="endDate">The date when the subscription item ends or ended..</param>
        /// <param name="tiersMode">Specifies the mode of tiering..</param>
        /// <param name="tiers">Information of all tiers if the price is a tiered price..</param>
        /// <param name="quantity">Quantity of the product to which your customers subscribe..</param>
        /// <param name="amount">The amount of the price. Specify this field if you want to override the original price with a flat-fee price.</param>
        /// <param name="unitAmount">The unit amount of the price. Specify this field if you want to override the original price with a per-unit price..</param>
        /// <param name="discountAmount">Discount amount. Specify this field if you offer an amount-based discount..</param>
        /// <param name="discountPercent">Discount percent. Specify this field if you offer a percentage-based discount..</param>
        /// <param name="priceBaseInterval">Specifies the base interval of the price the subscriber is subscribed to. If not provided, this field defaults to &#x60;billing_period&#x60;..</param>
        /// <param name="overage">overage.</param>
        /// <param name="uniqueToken">Unique identifier for the price. This identifier enables you to refer to the price before the price has an internal identifier in Zuora..</param>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="applyDiscountTo">Any combination of one-time, recurring, and usage..</param>
        /// <param name="discountLevel">Specifies at what level a discount should be applied: one of account, subscription or plan..</param>
        /// <param name="prepayment">prepayment.</param>
        /// <param name="drawdown">drawdown.</param>
        public SubscriptionItemCreateRequest(string priceId = default(string), string subscriptionItemNumber = default(string), string description = default(string), Recurring recurring = default(Recurring), StartEventEnum? startEvent = default(StartEventEnum?), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), TiersModeEnum? tiersMode = default(TiersModeEnum?), List<ItemTier> tiers = default(List<ItemTier>), decimal quantity = default(decimal), decimal amount = default(decimal), decimal unitAmount = default(decimal), decimal discountAmount = default(decimal), decimal discountPercent = default(decimal), PriceBaseIntervalEnum? priceBaseInterval = default(PriceBaseIntervalEnum?), Overage overage = default(Overage), string uniqueToken = default(string), Dictionary<string, Object> customFields = default(Dictionary<string, Object>), List<ApplyDiscountToEnum> applyDiscountTo = default(List<ApplyDiscountToEnum>), DiscountLevelEnum? discountLevel = default(DiscountLevelEnum?), SubscriptionItemPrepaymentField prepayment = default(SubscriptionItemPrepaymentField), SubscriptionItemDrawdownField drawdown = default(SubscriptionItemDrawdownField))
        {
            // to ensure "priceId" is required (not null)
            if (priceId == null)
            {
                throw new InvalidDataException("priceId is a required property for SubscriptionItemCreateRequest and cannot be null");
            }
            else
            {
                this.price_id = priceId;
            }

            this.subscription_item_number = subscriptionItemNumber;
            this.description = description;
            this.recurring = recurring;
            this.start_event = startEvent;
            this.start_date = startDate;
            this.end_date = endDate;
            this.tiers_mode = tiersMode;
            this.tiers = tiers;
            this.quantity = quantity;
            this.amount = amount;
            this.unit_amount = unitAmount;
            this.discount_amount = discountAmount;
            this.discount_percent = discountPercent;
            this.price_base_interval = priceBaseInterval;
            this.overage = overage;
            this.unique_token = uniqueToken;
            this.custom_fields = customFields;
            this.apply_discount_to = applyDiscountTo;
            this.discount_level = discountLevel;
            this.prepayment = prepayment;
            this.drawdown = drawdown;
        }

        /// <summary>
        /// Identifier of the price.
        /// </summary>
        /// <value>Identifier of the price.</value>
        [DataMember(Name="price_id", EmitDefaultValue=true)]
        public string price_id { get; set; }

        /// <summary>
        /// Human-readable identifier of the subscription item. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the subscription item. It can be user-supplied.</value>
        [DataMember(Name="subscription_item_number", EmitDefaultValue=false)]
        public string subscription_item_number { get; set; }

        /// <summary>
        /// Description of the price. Often useful for displaying to users.
        /// </summary>
        /// <value>Description of the price. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Gets or Sets recurring
        /// </summary>
        [DataMember(Name="recurring", EmitDefaultValue=false)]
        public Recurring recurring { get; set; }


        /// <summary>
        /// The date when the subscription item starts
        /// </summary>
        /// <value>The date when the subscription item starts</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime start_date { get; set; }

        /// <summary>
        /// The date when the subscription item ends or ended.
        /// </summary>
        /// <value>The date when the subscription item ends or ended.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime end_date { get; set; }


        /// <summary>
        /// Information of all tiers if the price is a tiered price.
        /// </summary>
        /// <value>Information of all tiers if the price is a tiered price.</value>
        [DataMember(Name="tiers", EmitDefaultValue=false)]
        public List<ItemTier> tiers { get; set; }

        /// <summary>
        /// Quantity of the product to which your customers subscribe.
        /// </summary>
        /// <value>Quantity of the product to which your customers subscribe.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal quantity { get; set; }

        /// <summary>
        /// The amount of the price. Specify this field if you want to override the original price with a flat-fee price
        /// </summary>
        /// <value>The amount of the price. Specify this field if you want to override the original price with a flat-fee price</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal amount { get; set; }

        /// <summary>
        /// The unit amount of the price. Specify this field if you want to override the original price with a per-unit price.
        /// </summary>
        /// <value>The unit amount of the price. Specify this field if you want to override the original price with a per-unit price.</value>
        [DataMember(Name="unit_amount", EmitDefaultValue=false)]
        public decimal unit_amount { get; set; }

        /// <summary>
        /// Discount amount. Specify this field if you offer an amount-based discount.
        /// </summary>
        /// <value>Discount amount. Specify this field if you offer an amount-based discount.</value>
        [DataMember(Name="discount_amount", EmitDefaultValue=false)]
        public decimal discount_amount { get; set; }

        /// <summary>
        /// Discount percent. Specify this field if you offer a percentage-based discount.
        /// </summary>
        /// <value>Discount percent. Specify this field if you offer a percentage-based discount.</value>
        [DataMember(Name="discount_percent", EmitDefaultValue=false)]
        public decimal discount_percent { get; set; }


        /// <summary>
        /// Gets or Sets overage
        /// </summary>
        [DataMember(Name="overage", EmitDefaultValue=false)]
        public Overage overage { get; set; }

        /// <summary>
        /// Unique identifier for the price. This identifier enables you to refer to the price before the price has an internal identifier in Zuora.
        /// </summary>
        /// <value>Unique identifier for the price. This identifier enables you to refer to the price before the price has an internal identifier in Zuora.</value>
        [DataMember(Name="unique_token", EmitDefaultValue=false)]
        public string unique_token { get; set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }



        /// <summary>
        /// Gets or Sets prepayment
        /// </summary>
        [DataMember(Name="prepayment", EmitDefaultValue=false)]
        public SubscriptionItemPrepaymentField prepayment { get; set; }

        /// <summary>
        /// Gets or Sets drawdown
        /// </summary>
        [DataMember(Name="drawdown", EmitDefaultValue=false)]
        public SubscriptionItemDrawdownField drawdown { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionItemCreateRequest {\n");
            sb.Append("  price_id: ").Append(price_id).Append("\n");
            sb.Append("  subscription_item_number: ").Append(subscription_item_number).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  recurring: ").Append(recurring).Append("\n");
            sb.Append("  start_event: ").Append(start_event).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  tiers_mode: ").Append(tiers_mode).Append("\n");
            sb.Append("  tiers: ").Append(tiers).Append("\n");
            sb.Append("  quantity: ").Append(quantity).Append("\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  unit_amount: ").Append(unit_amount).Append("\n");
            sb.Append("  discount_amount: ").Append(discount_amount).Append("\n");
            sb.Append("  discount_percent: ").Append(discount_percent).Append("\n");
            sb.Append("  price_base_interval: ").Append(price_base_interval).Append("\n");
            sb.Append("  overage: ").Append(overage).Append("\n");
            sb.Append("  unique_token: ").Append(unique_token).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  apply_discount_to: ").Append(apply_discount_to).Append("\n");
            sb.Append("  discount_level: ").Append(discount_level).Append("\n");
            sb.Append("  prepayment: ").Append(prepayment).Append("\n");
            sb.Append("  drawdown: ").Append(drawdown).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionItemCreateRequest);
        }

        /// <summary>
        /// Returns true if SubscriptionItemCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionItemCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionItemCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.price_id == input.price_id ||
                    (this.price_id != null &&
                    this.price_id.Equals(input.price_id))
                ) && 
                (
                    this.subscription_item_number == input.subscription_item_number ||
                    (this.subscription_item_number != null &&
                    this.subscription_item_number.Equals(input.subscription_item_number))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.recurring == input.recurring ||
                    (this.recurring != null &&
                    this.recurring.Equals(input.recurring))
                ) && 
                (
                    this.start_event == input.start_event ||
                    (this.start_event != null &&
                    this.start_event.Equals(input.start_event))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.tiers_mode == input.tiers_mode ||
                    (this.tiers_mode != null &&
                    this.tiers_mode.Equals(input.tiers_mode))
                ) && 
                (
                    this.tiers == input.tiers ||
                    this.tiers != null &&
                    input.tiers != null &&
                    this.tiers.SequenceEqual(input.tiers)
                ) && 
                (
                    this.quantity == input.quantity ||
                    (this.quantity != null &&
                    this.quantity.Equals(input.quantity))
                ) && 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.unit_amount == input.unit_amount ||
                    (this.unit_amount != null &&
                    this.unit_amount.Equals(input.unit_amount))
                ) && 
                (
                    this.discount_amount == input.discount_amount ||
                    (this.discount_amount != null &&
                    this.discount_amount.Equals(input.discount_amount))
                ) && 
                (
                    this.discount_percent == input.discount_percent ||
                    (this.discount_percent != null &&
                    this.discount_percent.Equals(input.discount_percent))
                ) && 
                (
                    this.price_base_interval == input.price_base_interval ||
                    (this.price_base_interval != null &&
                    this.price_base_interval.Equals(input.price_base_interval))
                ) && 
                (
                    this.overage == input.overage ||
                    (this.overage != null &&
                    this.overage.Equals(input.overage))
                ) && 
                (
                    this.unique_token == input.unique_token ||
                    (this.unique_token != null &&
                    this.unique_token.Equals(input.unique_token))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.apply_discount_to == input.apply_discount_to ||
                    this.apply_discount_to != null &&
                    input.apply_discount_to != null &&
                    this.apply_discount_to.SequenceEqual(input.apply_discount_to)
                ) && 
                (
                    this.discount_level == input.discount_level ||
                    (this.discount_level != null &&
                    this.discount_level.Equals(input.discount_level))
                ) && 
                (
                    this.prepayment == input.prepayment ||
                    (this.prepayment != null &&
                    this.prepayment.Equals(input.prepayment))
                ) && 
                (
                    this.drawdown == input.drawdown ||
                    (this.drawdown != null &&
                    this.drawdown.Equals(input.drawdown))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.price_id != null)
                    hashCode = hashCode * 59 + this.price_id.GetHashCode();
                if (this.subscription_item_number != null)
                    hashCode = hashCode * 59 + this.subscription_item_number.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.recurring != null)
                    hashCode = hashCode * 59 + this.recurring.GetHashCode();
                if (this.start_event != null)
                    hashCode = hashCode * 59 + this.start_event.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.tiers_mode != null)
                    hashCode = hashCode * 59 + this.tiers_mode.GetHashCode();
                if (this.tiers != null)
                    hashCode = hashCode * 59 + this.tiers.GetHashCode();
                if (this.quantity != null)
                    hashCode = hashCode * 59 + this.quantity.GetHashCode();
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.unit_amount != null)
                    hashCode = hashCode * 59 + this.unit_amount.GetHashCode();
                if (this.discount_amount != null)
                    hashCode = hashCode * 59 + this.discount_amount.GetHashCode();
                if (this.discount_percent != null)
                    hashCode = hashCode * 59 + this.discount_percent.GetHashCode();
                if (this.price_base_interval != null)
                    hashCode = hashCode * 59 + this.price_base_interval.GetHashCode();
                if (this.overage != null)
                    hashCode = hashCode * 59 + this.overage.GetHashCode();
                if (this.unique_token != null)
                    hashCode = hashCode * 59 + this.unique_token.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.apply_discount_to != null)
                    hashCode = hashCode * 59 + this.apply_discount_to.GetHashCode();
                if (this.discount_level != null)
                    hashCode = hashCode * 59 + this.discount_level.GetHashCode();
                if (this.prepayment != null)
                    hashCode = hashCode * 59 + this.prepayment.GetHashCode();
                if (this.drawdown != null)
                    hashCode = hashCode * 59 + this.drawdown.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // description (string) maxLength
            if(this.description != null && this.description.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for description, length must be less than 500.", new [] { "description" });
            }


            // unique_token (string) maxLength
            if(this.unique_token != null && this.unique_token.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for unique_token, length must be less than 50.", new [] { "unique_token" });
            }


            yield break;
        }
    }

}
