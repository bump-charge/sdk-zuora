/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Payment method information.
    /// </summary>
    [DataContract]
    public partial class PaymentMethod :  IEquatable<PaymentMethod>, IValidatableObject
    {
        /// <summary>
        /// The type of the payment method. An additional hash is included on the payment method with a name matching this value. It contains additional information specific to the payment method type.
        /// </summary>
        /// <value>The type of the payment method. An additional hash is included on the payment method with a name matching this value. It contains additional information specific to the payment method type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Paypalexpress for value: paypal_express
            /// </summary>
            [EnumMember(Value = "paypal_express")]
            Paypalexpress = 1,

            /// <summary>
            /// Enum Paypalexpressnative for value: paypal_express_native
            /// </summary>
            [EnumMember(Value = "paypal_express_native")]
            Paypalexpressnative = 2,

            /// <summary>
            /// Enum Paypaladaptive for value: paypal_adaptive
            /// </summary>
            [EnumMember(Value = "paypal_adaptive")]
            Paypaladaptive = 3,

            /// <summary>
            /// Enum Card for value: card
            /// </summary>
            [EnumMember(Value = "card")]
            Card = 4,

            /// <summary>
            /// Enum Ccref for value: cc_ref
            /// </summary>
            [EnumMember(Value = "cc_ref")]
            Ccref = 5,

            /// <summary>
            /// Enum Achdebit for value: ach_debit
            /// </summary>
            [EnumMember(Value = "ach_debit")]
            Achdebit = 6,

            /// <summary>
            /// Enum Sepadebit for value: sepa_debit
            /// </summary>
            [EnumMember(Value = "sepa_debit")]
            Sepadebit = 7,

            /// <summary>
            /// Enum Betalingsdebit for value: betalings_debit
            /// </summary>
            [EnumMember(Value = "betalings_debit")]
            Betalingsdebit = 8,

            /// <summary>
            /// Enum Autogirodebit for value: autogiro_debit
            /// </summary>
            [EnumMember(Value = "autogiro_debit")]
            Autogirodebit = 9,

            /// <summary>
            /// Enum Bacsdebit for value: bacs_debit
            /// </summary>
            [EnumMember(Value = "bacs_debit")]
            Bacsdebit = 10,

            /// <summary>
            /// Enum Aubecsdebit for value: au_becs_debit
            /// </summary>
            [EnumMember(Value = "au_becs_debit")]
            Aubecsdebit = 11,

            /// <summary>
            /// Enum Nzbecsdebit for value: nz_becs_debit
            /// </summary>
            [EnumMember(Value = "nz_becs_debit")]
            Nzbecsdebit = 12,

            /// <summary>
            /// Enum Paddebit for value: pad_debit
            /// </summary>
            [EnumMember(Value = "pad_debit")]
            Paddebit = 13,

            /// <summary>
            /// Enum Applepay for value: apple_pay
            /// </summary>
            [EnumMember(Value = "apple_pay")]
            Applepay = 14,

            /// <summary>
            /// Enum Wiretransfer for value: wire_transfer
            /// </summary>
            [EnumMember(Value = "wire_transfer")]
            Wiretransfer = 15,

            /// <summary>
            /// Enum Check for value: check
            /// </summary>
            [EnumMember(Value = "check")]
            Check = 16,

            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 17,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 18,

            /// <summary>
            /// Enum Paypal for value: paypal
            /// </summary>
            [EnumMember(Value = "paypal")]
            Paypal = 19,

            /// <summary>
            /// Enum Adyengooglepay for value: adyen_google_pay
            /// </summary>
            [EnumMember(Value = "adyen_google_pay")]
            Adyengooglepay = 20,

            /// <summary>
            /// Enum Adyenapplepay for value: adyen_apple_pay
            /// </summary>
            [EnumMember(Value = "adyen_apple_pay")]
            Adyenapplepay = 21

        }

        /// <summary>
        /// The type of the payment method. An additional hash is included on the payment method with a name matching this value. It contains additional information specific to the payment method type.
        /// </summary>
        /// <value>The type of the payment method. An additional hash is included on the payment method with a name matching this value. It contains additional information specific to the payment method type.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? type { get; set; }
        /// <summary>
        /// The state of the payment method.
        /// </summary>
        /// <value>The state of the payment method.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum Closed for value: closed
            /// </summary>
            [EnumMember(Value = "closed")]
            Closed = 2,

            /// <summary>
            /// Enum Scrubbed for value: scrubbed
            /// </summary>
            [EnumMember(Value = "scrubbed")]
            Scrubbed = 3

        }

        /// <summary>
        /// The state of the payment method.
        /// </summary>
        /// <value>The state of the payment method.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? state { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethod" /> class.
        /// </summary>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="type">The type of the payment method. An additional hash is included on the payment method with a name matching this value. It contains additional information specific to the payment method type..</param>
        /// <param name="customType">The custom type of the payment method from Universal Payment Connector..</param>
        /// <param name="accountId">A customer account identifier..</param>
        /// <param name="billingDetails">billingDetails.</param>
        /// <param name="maximumPaymentAttempts">Maximum number of consecutive failed retry payment attempts using this payment method before retries are stopped..</param>
        /// <param name="paymentRetryInterval">The retry interval in hours..</param>
        /// <param name="deviceSessionId">deviceSessionId.</param>
        /// <param name="ipAddress">The IP address from which the Mandate was accepted by the customer..</param>
        /// <param name="bankIdentificationNumber">bankIdentificationNumber.</param>
        /// <param name="card">card.</param>
        /// <param name="paypalExpressNative">paypalExpressNative.</param>
        /// <param name="paypalExpress">paypalExpress.</param>
        /// <param name="paypalAdaptive">paypalAdaptive.</param>
        /// <param name="sepaDebit">sepaDebit.</param>
        /// <param name="ccRef">ccRef.</param>
        /// <param name="applePay">applePay.</param>
        /// <param name="googlePay">googlePay.</param>
        /// <param name="achDebit">achDebit.</param>
        /// <param name="betalingsDebit">betalingsDebit.</param>
        /// <param name="autogiroDebit">autogiroDebit.</param>
        /// <param name="bacsDebit">bacsDebit.</param>
        /// <param name="auBecsDebit">auBecsDebit.</param>
        /// <param name="nzBecsDebit">nzBecsDebit.</param>
        /// <param name="padDebit">padDebit.</param>
        /// <param name="state">The state of the payment method..</param>
        /// <param name="autoGenerated">autoGenerated.</param>
        /// <param name="useDefaultRetryRule">useDefaultRetryRule.</param>
        /// <param name="existingMandate">existingMandate.</param>
        /// <param name="lastFailedSaleTransactionTime">lastFailedSaleTransactionTime.</param>
        /// <param name="lastTransactionTime">lastTransactionTime.</param>
        /// <param name="lastTransactionStatus">lastTransactionStatus.</param>
        /// <param name="numberOfConsecutiveFailures">numberOfConsecutiveFailures.</param>
        /// <param name="totalNumberOfProcessedPayments">totalNumberOfProcessedPayments.</param>
        /// <param name="totalNumberOfErrorPayments">totalNumberOfErrorPayments.</param>
        public PaymentMethod(Dictionary<string, Object> customFields = default(Dictionary<string, Object>), TypeEnum? type = default(TypeEnum?), string customType = default(string), string accountId = default(string), BillingDetails billingDetails = default(BillingDetails), decimal maximumPaymentAttempts = default(decimal), int paymentRetryInterval = default(int), string deviceSessionId = default(string), string ipAddress = default(string), string bankIdentificationNumber = default(string), GetCardList card = default(GetCardList), PaypalExpressNative paypalExpressNative = default(PaypalExpressNative), PaypalExpress paypalExpress = default(PaypalExpress), PaypalAdaptive paypalAdaptive = default(PaypalAdaptive), SepaDebit sepaDebit = default(SepaDebit), CcRef ccRef = default(CcRef), ApplePay applePay = default(ApplePay), GooglePay googlePay = default(GooglePay), AchDebit achDebit = default(AchDebit), BetalingsDebit betalingsDebit = default(BetalingsDebit), AutogiroDebit autogiroDebit = default(AutogiroDebit), BacsDebit bacsDebit = default(BacsDebit), AuBecsDebit auBecsDebit = default(AuBecsDebit), NzBecsDebit nzBecsDebit = default(NzBecsDebit), PadDebit padDebit = default(PadDebit), StateEnum? state = default(StateEnum?), bool autoGenerated = default(bool), bool useDefaultRetryRule = default(bool), bool existingMandate = default(bool), DateTime lastFailedSaleTransactionTime = default(DateTime), DateTime lastTransactionTime = default(DateTime), string lastTransactionStatus = default(string), int numberOfConsecutiveFailures = default(int), int totalNumberOfProcessedPayments = default(int), int totalNumberOfErrorPayments = default(int))
        {
            this.ip_address = ipAddress;
            this.custom_fields = customFields;
            this.type = type;
            this.custom_type = customType;
            this.account_id = accountId;
            this.billing_details = billingDetails;
            this.maximum_payment_attempts = maximumPaymentAttempts;
            this.payment_retry_interval = paymentRetryInterval;
            this.device_session_id = deviceSessionId;
            this.ip_address = ipAddress;
            this.bank_identification_number = bankIdentificationNumber;
            this.card = card;
            this.paypal_express_native = paypalExpressNative;
            this.paypal_express = paypalExpress;
            this.paypal_adaptive = paypalAdaptive;
            this.sepa_debit = sepaDebit;
            this.cc_ref = ccRef;
            this.apple_pay = applePay;
            this.google_pay = googlePay;
            this.ach_debit = achDebit;
            this.betalings_debit = betalingsDebit;
            this.autogiro_debit = autogiroDebit;
            this.bacs_debit = bacsDebit;
            this.au_becs_debit = auBecsDebit;
            this.nz_becs_debit = nzBecsDebit;
            this.pad_debit = padDebit;
            this.state = state;
            this.auto_generated = autoGenerated;
            this.use_default_retry_rule = useDefaultRetryRule;
            this.existing_mandate = existingMandate;
            this.last_failed_sale_transaction_time = lastFailedSaleTransactionTime;
            this.last_transaction_time = lastTransactionTime;
            this.last_transaction_status = lastTransactionStatus;
            this.number_of_consecutive_failures = numberOfConsecutiveFailures;
            this.total_number_of_processed_payments = totalNumberOfProcessedPayments;
            this.total_number_of_error_payments = totalNumberOfErrorPayments;
        }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>
        [DataMember(Name="updated_by_id", EmitDefaultValue=false)]
        public string updated_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public DateTime updated_time { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>
        [DataMember(Name="created_by_id", EmitDefaultValue=false)]
        public string created_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public DateTime created_time { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).
        /// </summary>
        /// <value>The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).</value>
        [DataMember(Name="custom_objects", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_objects { get; private set; }


        /// <summary>
        /// The custom type of the payment method from Universal Payment Connector.
        /// </summary>
        /// <value>The custom type of the payment method from Universal Payment Connector.</value>
        [DataMember(Name="custom_type", EmitDefaultValue=false)]
        public string custom_type { get; set; }

        /// <summary>
        /// A customer account identifier.
        /// </summary>
        /// <value>A customer account identifier.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string account_id { get; set; }

        /// <summary>
        /// The customer account associated with this payment method.
        /// </summary>
        /// <value>The customer account associated with this payment method.</value>
        [DataMember(Name="account", EmitDefaultValue=true)]
        public Account account { get; private set; }

        /// <summary>
        /// Gets or Sets billing_details
        /// </summary>
        [DataMember(Name="billing_details", EmitDefaultValue=false)]
        public BillingDetails billing_details { get; set; }

        /// <summary>
        /// Maximum number of consecutive failed retry payment attempts using this payment method before retries are stopped.
        /// </summary>
        /// <value>Maximum number of consecutive failed retry payment attempts using this payment method before retries are stopped.</value>
        [DataMember(Name="maximum_payment_attempts", EmitDefaultValue=false)]
        public decimal maximum_payment_attempts { get; set; }

        /// <summary>
        /// The retry interval in hours.
        /// </summary>
        /// <value>The retry interval in hours.</value>
        [DataMember(Name="payment_retry_interval", EmitDefaultValue=false)]
        public int payment_retry_interval { get; set; }

        /// <summary>
        /// Gets or Sets device_session_id
        /// </summary>
        [DataMember(Name="device_session_id", EmitDefaultValue=false)]
        public string device_session_id { get; set; }

        /// <summary>
        /// The IP address from which the Mandate was accepted by the customer.
        /// </summary>
        /// <value>The IP address from which the Mandate was accepted by the customer.</value>
        [DataMember(Name="ip_address", EmitDefaultValue=true)]
        public string ip_address { get; set; }

        /// <summary>
        /// Gets or Sets bank_identification_number
        /// </summary>
        [DataMember(Name="bank_identification_number", EmitDefaultValue=false)]
        public string bank_identification_number { get; set; }

        /// <summary>
        /// Gets or Sets card
        /// </summary>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public GetCardList card { get; set; }

        /// <summary>
        /// Gets or Sets paypal_express_native
        /// </summary>
        [DataMember(Name="paypal_express_native", EmitDefaultValue=false)]
        public PaypalExpressNative paypal_express_native { get; set; }

        /// <summary>
        /// Gets or Sets paypal_express
        /// </summary>
        [DataMember(Name="paypal_express", EmitDefaultValue=false)]
        public PaypalExpress paypal_express { get; set; }

        /// <summary>
        /// Gets or Sets paypal_adaptive
        /// </summary>
        [DataMember(Name="paypal_adaptive", EmitDefaultValue=false)]
        public PaypalAdaptive paypal_adaptive { get; set; }

        /// <summary>
        /// Gets or Sets sepa_debit
        /// </summary>
        [DataMember(Name="sepa_debit", EmitDefaultValue=false)]
        public SepaDebit sepa_debit { get; set; }

        /// <summary>
        /// Gets or Sets cc_ref
        /// </summary>
        [DataMember(Name="cc_ref", EmitDefaultValue=false)]
        public CcRef cc_ref { get; set; }

        /// <summary>
        /// Gets or Sets apple_pay
        /// </summary>
        [DataMember(Name="apple_pay", EmitDefaultValue=false)]
        public ApplePay apple_pay { get; set; }

        /// <summary>
        /// Gets or Sets google_pay
        /// </summary>
        [DataMember(Name="google_pay", EmitDefaultValue=false)]
        public GooglePay google_pay { get; set; }

        /// <summary>
        /// Gets or Sets ach_debit
        /// </summary>
        [DataMember(Name="ach_debit", EmitDefaultValue=false)]
        public AchDebit ach_debit { get; set; }

        /// <summary>
        /// Gets or Sets betalings_debit
        /// </summary>
        [DataMember(Name="betalings_debit", EmitDefaultValue=false)]
        public BetalingsDebit betalings_debit { get; set; }

        /// <summary>
        /// Gets or Sets autogiro_debit
        /// </summary>
        [DataMember(Name="autogiro_debit", EmitDefaultValue=false)]
        public AutogiroDebit autogiro_debit { get; set; }

        /// <summary>
        /// Gets or Sets bacs_debit
        /// </summary>
        [DataMember(Name="bacs_debit", EmitDefaultValue=false)]
        public BacsDebit bacs_debit { get; set; }

        /// <summary>
        /// Gets or Sets au_becs_debit
        /// </summary>
        [DataMember(Name="au_becs_debit", EmitDefaultValue=false)]
        public AuBecsDebit au_becs_debit { get; set; }

        /// <summary>
        /// Gets or Sets nz_becs_debit
        /// </summary>
        [DataMember(Name="nz_becs_debit", EmitDefaultValue=false)]
        public NzBecsDebit nz_becs_debit { get; set; }

        /// <summary>
        /// Gets or Sets pad_debit
        /// </summary>
        [DataMember(Name="pad_debit", EmitDefaultValue=false)]
        public PadDebit pad_debit { get; set; }


        /// <summary>
        /// Gets or Sets auto_generated
        /// </summary>
        [DataMember(Name="auto_generated", EmitDefaultValue=false)]
        public bool auto_generated { get; set; }

        /// <summary>
        /// Gets or Sets use_default_retry_rule
        /// </summary>
        [DataMember(Name="use_default_retry_rule", EmitDefaultValue=false)]
        public bool use_default_retry_rule { get; set; }

        /// <summary>
        /// Gets or Sets existing_mandate
        /// </summary>
        [DataMember(Name="existing_mandate", EmitDefaultValue=false)]
        public bool existing_mandate { get; set; }

        /// <summary>
        /// Gets or Sets last_failed_sale_transaction_time
        /// </summary>
        [DataMember(Name="last_failed_sale_transaction_time", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime last_failed_sale_transaction_time { get; set; }

        /// <summary>
        /// Gets or Sets last_transaction_time
        /// </summary>
        [DataMember(Name="last_transaction_time", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime last_transaction_time { get; set; }

        /// <summary>
        /// Gets or Sets last_transaction_status
        /// </summary>
        [DataMember(Name="last_transaction_status", EmitDefaultValue=false)]
        public string last_transaction_status { get; set; }

        /// <summary>
        /// Gets or Sets number_of_consecutive_failures
        /// </summary>
        [DataMember(Name="number_of_consecutive_failures", EmitDefaultValue=false)]
        public int number_of_consecutive_failures { get; set; }

        /// <summary>
        /// Gets or Sets total_number_of_processed_payments
        /// </summary>
        [DataMember(Name="total_number_of_processed_payments", EmitDefaultValue=false)]
        public int total_number_of_processed_payments { get; set; }

        /// <summary>
        /// Gets or Sets total_number_of_error_payments
        /// </summary>
        [DataMember(Name="total_number_of_error_payments", EmitDefaultValue=false)]
        public int total_number_of_error_payments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMethod {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  updated_by_id: ").Append(updated_by_id).Append("\n");
            sb.Append("  updated_time: ").Append(updated_time).Append("\n");
            sb.Append("  created_by_id: ").Append(created_by_id).Append("\n");
            sb.Append("  created_time: ").Append(created_time).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  custom_objects: ").Append(custom_objects).Append("\n");
            sb.Append("  type: ").Append(type).Append("\n");
            sb.Append("  custom_type: ").Append(custom_type).Append("\n");
            sb.Append("  account_id: ").Append(account_id).Append("\n");
            sb.Append("  account: ").Append(account).Append("\n");
            sb.Append("  billing_details: ").Append(billing_details).Append("\n");
            sb.Append("  maximum_payment_attempts: ").Append(maximum_payment_attempts).Append("\n");
            sb.Append("  payment_retry_interval: ").Append(payment_retry_interval).Append("\n");
            sb.Append("  device_session_id: ").Append(device_session_id).Append("\n");
            sb.Append("  ip_address: ").Append(ip_address).Append("\n");
            sb.Append("  bank_identification_number: ").Append(bank_identification_number).Append("\n");
            sb.Append("  card: ").Append(card).Append("\n");
            sb.Append("  paypal_express_native: ").Append(paypal_express_native).Append("\n");
            sb.Append("  paypal_express: ").Append(paypal_express).Append("\n");
            sb.Append("  paypal_adaptive: ").Append(paypal_adaptive).Append("\n");
            sb.Append("  sepa_debit: ").Append(sepa_debit).Append("\n");
            sb.Append("  cc_ref: ").Append(cc_ref).Append("\n");
            sb.Append("  apple_pay: ").Append(apple_pay).Append("\n");
            sb.Append("  google_pay: ").Append(google_pay).Append("\n");
            sb.Append("  ach_debit: ").Append(ach_debit).Append("\n");
            sb.Append("  betalings_debit: ").Append(betalings_debit).Append("\n");
            sb.Append("  autogiro_debit: ").Append(autogiro_debit).Append("\n");
            sb.Append("  bacs_debit: ").Append(bacs_debit).Append("\n");
            sb.Append("  au_becs_debit: ").Append(au_becs_debit).Append("\n");
            sb.Append("  nz_becs_debit: ").Append(nz_becs_debit).Append("\n");
            sb.Append("  pad_debit: ").Append(pad_debit).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  auto_generated: ").Append(auto_generated).Append("\n");
            sb.Append("  use_default_retry_rule: ").Append(use_default_retry_rule).Append("\n");
            sb.Append("  existing_mandate: ").Append(existing_mandate).Append("\n");
            sb.Append("  last_failed_sale_transaction_time: ").Append(last_failed_sale_transaction_time).Append("\n");
            sb.Append("  last_transaction_time: ").Append(last_transaction_time).Append("\n");
            sb.Append("  last_transaction_status: ").Append(last_transaction_status).Append("\n");
            sb.Append("  number_of_consecutive_failures: ").Append(number_of_consecutive_failures).Append("\n");
            sb.Append("  total_number_of_processed_payments: ").Append(total_number_of_processed_payments).Append("\n");
            sb.Append("  total_number_of_error_payments: ").Append(total_number_of_error_payments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMethod);
        }

        /// <summary>
        /// Returns true if PaymentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.updated_by_id == input.updated_by_id ||
                    (this.updated_by_id != null &&
                    this.updated_by_id.Equals(input.updated_by_id))
                ) && 
                (
                    this.updated_time == input.updated_time ||
                    (this.updated_time != null &&
                    this.updated_time.Equals(input.updated_time))
                ) && 
                (
                    this.created_by_id == input.created_by_id ||
                    (this.created_by_id != null &&
                    this.created_by_id.Equals(input.created_by_id))
                ) && 
                (
                    this.created_time == input.created_time ||
                    (this.created_time != null &&
                    this.created_time.Equals(input.created_time))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.custom_objects == input.custom_objects ||
                    this.custom_objects != null &&
                    input.custom_objects != null &&
                    this.custom_objects.SequenceEqual(input.custom_objects)
                ) && 
                (
                    this.type == input.type ||
                    (this.type != null &&
                    this.type.Equals(input.type))
                ) && 
                (
                    this.custom_type == input.custom_type ||
                    (this.custom_type != null &&
                    this.custom_type.Equals(input.custom_type))
                ) && 
                (
                    this.account_id == input.account_id ||
                    (this.account_id != null &&
                    this.account_id.Equals(input.account_id))
                ) && 
                (
                    this.account == input.account ||
                    (this.account != null &&
                    this.account.Equals(input.account))
                ) && 
                (
                    this.billing_details == input.billing_details ||
                    (this.billing_details != null &&
                    this.billing_details.Equals(input.billing_details))
                ) && 
                (
                    this.maximum_payment_attempts == input.maximum_payment_attempts ||
                    (this.maximum_payment_attempts != null &&
                    this.maximum_payment_attempts.Equals(input.maximum_payment_attempts))
                ) && 
                (
                    this.payment_retry_interval == input.payment_retry_interval ||
                    (this.payment_retry_interval != null &&
                    this.payment_retry_interval.Equals(input.payment_retry_interval))
                ) && 
                (
                    this.device_session_id == input.device_session_id ||
                    (this.device_session_id != null &&
                    this.device_session_id.Equals(input.device_session_id))
                ) && 
                (
                    this.ip_address == input.ip_address ||
                    (this.ip_address != null &&
                    this.ip_address.Equals(input.ip_address))
                ) && 
                (
                    this.bank_identification_number == input.bank_identification_number ||
                    (this.bank_identification_number != null &&
                    this.bank_identification_number.Equals(input.bank_identification_number))
                ) && 
                (
                    this.card == input.card ||
                    (this.card != null &&
                    this.card.Equals(input.card))
                ) && 
                (
                    this.paypal_express_native == input.paypal_express_native ||
                    (this.paypal_express_native != null &&
                    this.paypal_express_native.Equals(input.paypal_express_native))
                ) && 
                (
                    this.paypal_express == input.paypal_express ||
                    (this.paypal_express != null &&
                    this.paypal_express.Equals(input.paypal_express))
                ) && 
                (
                    this.paypal_adaptive == input.paypal_adaptive ||
                    (this.paypal_adaptive != null &&
                    this.paypal_adaptive.Equals(input.paypal_adaptive))
                ) && 
                (
                    this.sepa_debit == input.sepa_debit ||
                    (this.sepa_debit != null &&
                    this.sepa_debit.Equals(input.sepa_debit))
                ) && 
                (
                    this.cc_ref == input.cc_ref ||
                    (this.cc_ref != null &&
                    this.cc_ref.Equals(input.cc_ref))
                ) && 
                (
                    this.apple_pay == input.apple_pay ||
                    (this.apple_pay != null &&
                    this.apple_pay.Equals(input.apple_pay))
                ) && 
                (
                    this.google_pay == input.google_pay ||
                    (this.google_pay != null &&
                    this.google_pay.Equals(input.google_pay))
                ) && 
                (
                    this.ach_debit == input.ach_debit ||
                    (this.ach_debit != null &&
                    this.ach_debit.Equals(input.ach_debit))
                ) && 
                (
                    this.betalings_debit == input.betalings_debit ||
                    (this.betalings_debit != null &&
                    this.betalings_debit.Equals(input.betalings_debit))
                ) && 
                (
                    this.autogiro_debit == input.autogiro_debit ||
                    (this.autogiro_debit != null &&
                    this.autogiro_debit.Equals(input.autogiro_debit))
                ) && 
                (
                    this.bacs_debit == input.bacs_debit ||
                    (this.bacs_debit != null &&
                    this.bacs_debit.Equals(input.bacs_debit))
                ) && 
                (
                    this.au_becs_debit == input.au_becs_debit ||
                    (this.au_becs_debit != null &&
                    this.au_becs_debit.Equals(input.au_becs_debit))
                ) && 
                (
                    this.nz_becs_debit == input.nz_becs_debit ||
                    (this.nz_becs_debit != null &&
                    this.nz_becs_debit.Equals(input.nz_becs_debit))
                ) && 
                (
                    this.pad_debit == input.pad_debit ||
                    (this.pad_debit != null &&
                    this.pad_debit.Equals(input.pad_debit))
                ) && 
                (
                    this.state == input.state ||
                    (this.state != null &&
                    this.state.Equals(input.state))
                ) && 
                (
                    this.auto_generated == input.auto_generated ||
                    (this.auto_generated != null &&
                    this.auto_generated.Equals(input.auto_generated))
                ) && 
                (
                    this.use_default_retry_rule == input.use_default_retry_rule ||
                    (this.use_default_retry_rule != null &&
                    this.use_default_retry_rule.Equals(input.use_default_retry_rule))
                ) && 
                (
                    this.existing_mandate == input.existing_mandate ||
                    (this.existing_mandate != null &&
                    this.existing_mandate.Equals(input.existing_mandate))
                ) && 
                (
                    this.last_failed_sale_transaction_time == input.last_failed_sale_transaction_time ||
                    (this.last_failed_sale_transaction_time != null &&
                    this.last_failed_sale_transaction_time.Equals(input.last_failed_sale_transaction_time))
                ) && 
                (
                    this.last_transaction_time == input.last_transaction_time ||
                    (this.last_transaction_time != null &&
                    this.last_transaction_time.Equals(input.last_transaction_time))
                ) && 
                (
                    this.last_transaction_status == input.last_transaction_status ||
                    (this.last_transaction_status != null &&
                    this.last_transaction_status.Equals(input.last_transaction_status))
                ) && 
                (
                    this.number_of_consecutive_failures == input.number_of_consecutive_failures ||
                    (this.number_of_consecutive_failures != null &&
                    this.number_of_consecutive_failures.Equals(input.number_of_consecutive_failures))
                ) && 
                (
                    this.total_number_of_processed_payments == input.total_number_of_processed_payments ||
                    (this.total_number_of_processed_payments != null &&
                    this.total_number_of_processed_payments.Equals(input.total_number_of_processed_payments))
                ) && 
                (
                    this.total_number_of_error_payments == input.total_number_of_error_payments ||
                    (this.total_number_of_error_payments != null &&
                    this.total_number_of_error_payments.Equals(input.total_number_of_error_payments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.updated_by_id != null)
                    hashCode = hashCode * 59 + this.updated_by_id.GetHashCode();
                if (this.updated_time != null)
                    hashCode = hashCode * 59 + this.updated_time.GetHashCode();
                if (this.created_by_id != null)
                    hashCode = hashCode * 59 + this.created_by_id.GetHashCode();
                if (this.created_time != null)
                    hashCode = hashCode * 59 + this.created_time.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.custom_objects != null)
                    hashCode = hashCode * 59 + this.custom_objects.GetHashCode();
                if (this.type != null)
                    hashCode = hashCode * 59 + this.type.GetHashCode();
                if (this.custom_type != null)
                    hashCode = hashCode * 59 + this.custom_type.GetHashCode();
                if (this.account_id != null)
                    hashCode = hashCode * 59 + this.account_id.GetHashCode();
                if (this.account != null)
                    hashCode = hashCode * 59 + this.account.GetHashCode();
                if (this.billing_details != null)
                    hashCode = hashCode * 59 + this.billing_details.GetHashCode();
                if (this.maximum_payment_attempts != null)
                    hashCode = hashCode * 59 + this.maximum_payment_attempts.GetHashCode();
                if (this.payment_retry_interval != null)
                    hashCode = hashCode * 59 + this.payment_retry_interval.GetHashCode();
                if (this.device_session_id != null)
                    hashCode = hashCode * 59 + this.device_session_id.GetHashCode();
                if (this.ip_address != null)
                    hashCode = hashCode * 59 + this.ip_address.GetHashCode();
                if (this.bank_identification_number != null)
                    hashCode = hashCode * 59 + this.bank_identification_number.GetHashCode();
                if (this.card != null)
                    hashCode = hashCode * 59 + this.card.GetHashCode();
                if (this.paypal_express_native != null)
                    hashCode = hashCode * 59 + this.paypal_express_native.GetHashCode();
                if (this.paypal_express != null)
                    hashCode = hashCode * 59 + this.paypal_express.GetHashCode();
                if (this.paypal_adaptive != null)
                    hashCode = hashCode * 59 + this.paypal_adaptive.GetHashCode();
                if (this.sepa_debit != null)
                    hashCode = hashCode * 59 + this.sepa_debit.GetHashCode();
                if (this.cc_ref != null)
                    hashCode = hashCode * 59 + this.cc_ref.GetHashCode();
                if (this.apple_pay != null)
                    hashCode = hashCode * 59 + this.apple_pay.GetHashCode();
                if (this.google_pay != null)
                    hashCode = hashCode * 59 + this.google_pay.GetHashCode();
                if (this.ach_debit != null)
                    hashCode = hashCode * 59 + this.ach_debit.GetHashCode();
                if (this.betalings_debit != null)
                    hashCode = hashCode * 59 + this.betalings_debit.GetHashCode();
                if (this.autogiro_debit != null)
                    hashCode = hashCode * 59 + this.autogiro_debit.GetHashCode();
                if (this.bacs_debit != null)
                    hashCode = hashCode * 59 + this.bacs_debit.GetHashCode();
                if (this.au_becs_debit != null)
                    hashCode = hashCode * 59 + this.au_becs_debit.GetHashCode();
                if (this.nz_becs_debit != null)
                    hashCode = hashCode * 59 + this.nz_becs_debit.GetHashCode();
                if (this.pad_debit != null)
                    hashCode = hashCode * 59 + this.pad_debit.GetHashCode();
                if (this.state != null)
                    hashCode = hashCode * 59 + this.state.GetHashCode();
                if (this.auto_generated != null)
                    hashCode = hashCode * 59 + this.auto_generated.GetHashCode();
                if (this.use_default_retry_rule != null)
                    hashCode = hashCode * 59 + this.use_default_retry_rule.GetHashCode();
                if (this.existing_mandate != null)
                    hashCode = hashCode * 59 + this.existing_mandate.GetHashCode();
                if (this.last_failed_sale_transaction_time != null)
                    hashCode = hashCode * 59 + this.last_failed_sale_transaction_time.GetHashCode();
                if (this.last_transaction_time != null)
                    hashCode = hashCode * 59 + this.last_transaction_time.GetHashCode();
                if (this.last_transaction_status != null)
                    hashCode = hashCode * 59 + this.last_transaction_status.GetHashCode();
                if (this.number_of_consecutive_failures != null)
                    hashCode = hashCode * 59 + this.number_of_consecutive_failures.GetHashCode();
                if (this.total_number_of_processed_payments != null)
                    hashCode = hashCode * 59 + this.total_number_of_processed_payments.GetHashCode();
                if (this.total_number_of_error_payments != null)
                    hashCode = hashCode * 59 + this.total_number_of_error_payments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
