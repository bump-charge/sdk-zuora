/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Billing document settings for an account
    /// </summary>
    [DataContract]
    public partial class BillingDocumentSettings :  IEquatable<BillingDocumentSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingDocumentSettings" /> class.
        /// </summary>
        /// <param name="creditMemoTemplateId">Identifier of the credit memo template associated with this customer..</param>
        /// <param name="debitMemoTemplateId">Identifier of the debit memo template associated with this customer..</param>
        /// <param name="emailDocuments">Whether the customer wants to receive email invoices..</param>
        /// <param name="printDocuments">Whether the customer wants to receive printed invoices..</param>
        /// <param name="invoiceTemplateId">Identifier of the invoice template associated with this customer..</param>
        /// <param name="additionalEmail">A list of additional email addresses to receive email notifications..</param>
        public BillingDocumentSettings(string creditMemoTemplateId = default(string), string debitMemoTemplateId = default(string), bool emailDocuments = default(bool), bool printDocuments = default(bool), string invoiceTemplateId = default(string), List<string> additionalEmail = default(List<string>))
        {
            this.credit_memo_template_id = creditMemoTemplateId;
            this.debit_memo_template_id = debitMemoTemplateId;
            this.email_documents = emailDocuments;
            this.print_documents = printDocuments;
            this.invoice_template_id = invoiceTemplateId;
            this.additional_email = additionalEmail;
        }

        /// <summary>
        /// Identifier of the credit memo template associated with this customer.
        /// </summary>
        /// <value>Identifier of the credit memo template associated with this customer.</value>
        [DataMember(Name="credit_memo_template_id", EmitDefaultValue=false)]
        public string credit_memo_template_id { get; set; }

        /// <summary>
        /// Identifier of the debit memo template associated with this customer.
        /// </summary>
        /// <value>Identifier of the debit memo template associated with this customer.</value>
        [DataMember(Name="debit_memo_template_id", EmitDefaultValue=false)]
        public string debit_memo_template_id { get; set; }

        /// <summary>
        /// Whether the customer wants to receive email invoices.
        /// </summary>
        /// <value>Whether the customer wants to receive email invoices.</value>
        [DataMember(Name="email_documents", EmitDefaultValue=false)]
        public bool email_documents { get; set; }

        /// <summary>
        /// Whether the customer wants to receive printed invoices.
        /// </summary>
        /// <value>Whether the customer wants to receive printed invoices.</value>
        [DataMember(Name="print_documents", EmitDefaultValue=false)]
        public bool print_documents { get; set; }

        /// <summary>
        /// Identifier of the invoice template associated with this customer.
        /// </summary>
        /// <value>Identifier of the invoice template associated with this customer.</value>
        [DataMember(Name="invoice_template_id", EmitDefaultValue=false)]
        public string invoice_template_id { get; set; }

        /// <summary>
        /// A list of additional email addresses to receive email notifications.
        /// </summary>
        /// <value>A list of additional email addresses to receive email notifications.</value>
        [DataMember(Name="additional_email", EmitDefaultValue=false)]
        public List<string> additional_email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingDocumentSettings {\n");
            sb.Append("  credit_memo_template_id: ").Append(credit_memo_template_id).Append("\n");
            sb.Append("  debit_memo_template_id: ").Append(debit_memo_template_id).Append("\n");
            sb.Append("  email_documents: ").Append(email_documents).Append("\n");
            sb.Append("  print_documents: ").Append(print_documents).Append("\n");
            sb.Append("  invoice_template_id: ").Append(invoice_template_id).Append("\n");
            sb.Append("  additional_email: ").Append(additional_email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillingDocumentSettings);
        }

        /// <summary>
        /// Returns true if BillingDocumentSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of BillingDocumentSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingDocumentSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.credit_memo_template_id == input.credit_memo_template_id ||
                    (this.credit_memo_template_id != null &&
                    this.credit_memo_template_id.Equals(input.credit_memo_template_id))
                ) && 
                (
                    this.debit_memo_template_id == input.debit_memo_template_id ||
                    (this.debit_memo_template_id != null &&
                    this.debit_memo_template_id.Equals(input.debit_memo_template_id))
                ) && 
                (
                    this.email_documents == input.email_documents ||
                    (this.email_documents != null &&
                    this.email_documents.Equals(input.email_documents))
                ) && 
                (
                    this.print_documents == input.print_documents ||
                    (this.print_documents != null &&
                    this.print_documents.Equals(input.print_documents))
                ) && 
                (
                    this.invoice_template_id == input.invoice_template_id ||
                    (this.invoice_template_id != null &&
                    this.invoice_template_id.Equals(input.invoice_template_id))
                ) && 
                (
                    this.additional_email == input.additional_email ||
                    this.additional_email != null &&
                    input.additional_email != null &&
                    this.additional_email.SequenceEqual(input.additional_email)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.credit_memo_template_id != null)
                    hashCode = hashCode * 59 + this.credit_memo_template_id.GetHashCode();
                if (this.debit_memo_template_id != null)
                    hashCode = hashCode * 59 + this.debit_memo_template_id.GetHashCode();
                if (this.email_documents != null)
                    hashCode = hashCode * 59 + this.email_documents.GetHashCode();
                if (this.print_documents != null)
                    hashCode = hashCode * 59 + this.print_documents.GetHashCode();
                if (this.invoice_template_id != null)
                    hashCode = hashCode * 59 + this.invoice_template_id.GetHashCode();
                if (this.additional_email != null)
                    hashCode = hashCode * 59 + this.additional_email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
