/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// ListQueryParams
    /// </summary>
    [DataContract]
    public partial class ListQueryParams : Dictionary<String, Object>,  IEquatable<ListQueryParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListQueryParams" /> class.
        /// </summary>
        /// <param name="cursor">A cursor for use in pagination. A cursor defines the starting place in a list. For instance, if you make a list request and receive 100 objects, ending with &#x60;next_page&#x3D;W3sib3JkZXJ&#x3D;&#x60;, your subsequent call can include &#x60;cursor&#x3D;W3sib3JkZXJ&#x3D;&#x60; in order to fetch the next page of the list..</param>
        /// <param name="expand">Allows you to expand responses by including related object information in a single call. See the [Expand responses](https://www.zuora.com/developer/quickstart-api/tutorial/expand-responses/) section of the Quickstart API Tutorials for detailed instructions..</param>
        /// <param name="filter">A case-sensitive filter on the list. See the [Filter lists](https://www.zuora.com/developer/quickstart-api/tutorial/filter-lists/) section of the Quickstart API Tutorials for detailed instructions..</param>
        /// <param name="sort">A case-sensitive query parameter that specifies the sort order of the list, which can be either ascending (e.g. &#x60;account_number.asc&#x60;) or descending (e.g. &#x60;account_number.desc&#x60;). You cannot sort on properties that are arrays. If the array-type properties are specified for the &#x60;sort[]&#x60; parameter, they are ignored..</param>
        /// <param name="pageSize">The maximum number of results to return in a single page. If the specified &#x60;page_size&#x60; is less than 1 or greater than 99, Zuora will return a 400 error..</param>
        public ListQueryParams(string cursor = default(string), List<string> expand = default(List<string>), List<string> filter = default(List<string>), List<string> sort = default(List<string>), int pageSize = default(int)) : base()
        {
            this.cursor = cursor;
            this.expand = expand;
            this.filter = filter;
            this.sort = sort;
            this.page_size = pageSize;
        }

        /// <summary>
        /// A cursor for use in pagination. A cursor defines the starting place in a list. For instance, if you make a list request and receive 100 objects, ending with &#x60;next_page&#x3D;W3sib3JkZXJ&#x3D;&#x60;, your subsequent call can include &#x60;cursor&#x3D;W3sib3JkZXJ&#x3D;&#x60; in order to fetch the next page of the list.
        /// </summary>
        /// <value>A cursor for use in pagination. A cursor defines the starting place in a list. For instance, if you make a list request and receive 100 objects, ending with &#x60;next_page&#x3D;W3sib3JkZXJ&#x3D;&#x60;, your subsequent call can include &#x60;cursor&#x3D;W3sib3JkZXJ&#x3D;&#x60; in order to fetch the next page of the list.</value>
        [DataMember(Name="cursor", EmitDefaultValue=false)]
        public string cursor { get; set; }

        /// <summary>
        /// Allows you to expand responses by including related object information in a single call. See the [Expand responses](https://www.zuora.com/developer/quickstart-api/tutorial/expand-responses/) section of the Quickstart API Tutorials for detailed instructions.
        /// </summary>
        /// <value>Allows you to expand responses by including related object information in a single call. See the [Expand responses](https://www.zuora.com/developer/quickstart-api/tutorial/expand-responses/) section of the Quickstart API Tutorials for detailed instructions.</value>
        [DataMember(Name="expand[]", EmitDefaultValue=false)]
        public List<string> expand { get; set; }

        /// <summary>
        /// A case-sensitive filter on the list. See the [Filter lists](https://www.zuora.com/developer/quickstart-api/tutorial/filter-lists/) section of the Quickstart API Tutorials for detailed instructions.
        /// </summary>
        /// <value>A case-sensitive filter on the list. See the [Filter lists](https://www.zuora.com/developer/quickstart-api/tutorial/filter-lists/) section of the Quickstart API Tutorials for detailed instructions.</value>
        [DataMember(Name="filter[]", EmitDefaultValue=false)]
        public List<string> filter { get; set; }

        /// <summary>
        /// A case-sensitive query parameter that specifies the sort order of the list, which can be either ascending (e.g. &#x60;account_number.asc&#x60;) or descending (e.g. &#x60;account_number.desc&#x60;). You cannot sort on properties that are arrays. If the array-type properties are specified for the &#x60;sort[]&#x60; parameter, they are ignored.
        /// </summary>
        /// <value>A case-sensitive query parameter that specifies the sort order of the list, which can be either ascending (e.g. &#x60;account_number.asc&#x60;) or descending (e.g. &#x60;account_number.desc&#x60;). You cannot sort on properties that are arrays. If the array-type properties are specified for the &#x60;sort[]&#x60; parameter, they are ignored.</value>
        [DataMember(Name="sort[]", EmitDefaultValue=false)]
        public List<string> sort { get; set; }

        /// <summary>
        /// The maximum number of results to return in a single page. If the specified &#x60;page_size&#x60; is less than 1 or greater than 99, Zuora will return a 400 error.
        /// </summary>
        /// <value>The maximum number of results to return in a single page. If the specified &#x60;page_size&#x60; is less than 1 or greater than 99, Zuora will return a 400 error.</value>
        [DataMember(Name="page_size", EmitDefaultValue=false)]
        public int page_size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListQueryParams {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  cursor: ").Append(cursor).Append("\n");
            sb.Append("  expand: ").Append(expand).Append("\n");
            sb.Append("  filter: ").Append(filter).Append("\n");
            sb.Append("  sort: ").Append(sort).Append("\n");
            sb.Append("  page_size: ").Append(page_size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListQueryParams);
        }

        /// <summary>
        /// Returns true if ListQueryParams instances are equal
        /// </summary>
        /// <param name="input">Instance of ListQueryParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListQueryParams input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.cursor == input.cursor ||
                    (this.cursor != null &&
                    this.cursor.Equals(input.cursor))
                ) && base.Equals(input) && 
                (
                    this.expand == input.expand ||
                    this.expand != null &&
                    input.expand != null &&
                    this.expand.SequenceEqual(input.expand)
                ) && base.Equals(input) && 
                (
                    this.filter == input.filter ||
                    this.filter != null &&
                    input.filter != null &&
                    this.filter.SequenceEqual(input.filter)
                ) && base.Equals(input) && 
                (
                    this.sort == input.sort ||
                    this.sort != null &&
                    input.sort != null &&
                    this.sort.SequenceEqual(input.sort)
                ) && base.Equals(input) && 
                (
                    this.page_size == input.page_size ||
                    (this.page_size != null &&
                    this.page_size.Equals(input.page_size))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.cursor != null)
                    hashCode = hashCode * 59 + this.cursor.GetHashCode();
                if (this.expand != null)
                    hashCode = hashCode * 59 + this.expand.GetHashCode();
                if (this.filter != null)
                    hashCode = hashCode * 59 + this.filter.GetHashCode();
                if (this.sort != null)
                    hashCode = hashCode * 59 + this.sort.GetHashCode();
                if (this.page_size != null)
                    hashCode = hashCode * 59 + this.page_size.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // page_size (int) maximum
            if(this.page_size > (int)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for page_size, must be a value less than or equal to 99.", new [] { "page_size" });
            }

            // page_size (int) minimum
            if(this.page_size < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for page_size, must be a value greater than or equal to 1.", new [] { "page_size" });
            }

            yield break;
        }
    }

}
