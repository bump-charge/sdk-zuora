/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// PaymentRun
    /// </summary>
    [DataContract]
    public partial class PaymentRun :  IEquatable<PaymentRun>, IValidatableObject
    {
        /// <summary>
        /// Status of the payment run.
        /// </summary>
        /// <value>Status of the payment run.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 1,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 2,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 3,

            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            Canceled = 4,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 5

        }

        /// <summary>
        /// Status of the payment run.
        /// </summary>
        /// <value>Status of the payment run.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? state { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRun" /> class.
        /// </summary>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="applyCreditMemos">If true, any posted credit memos are applied first..</param>
        /// <param name="applyUnappliedPayments">If true, any unapplied payments are applied first..</param>
        /// <param name="batch">Identifier of the customer account batch to be included in this payment run..</param>
        /// <param name="consolidatePayment">If true, a single payment will be collected for all receivables due on an account..</param>
        /// <param name="billCycleDay">The day of the month to bill multiple customer accounts..</param>
        /// <param name="billRunId">The unique identifier of a bill run..</param>
        /// <param name="collectPayment">Indicates whether to process electronic payments during the execution of payment runs..</param>
        /// <param name="currency">Three-letter ISO currency code..</param>
        /// <param name="stateTransitions">The date and time when the payment run executed, in the &#x60;yyyy-mm-dd hh:mm:ss&#x60; format..</param>
        /// <param name="paymentGatewayId">Unique identifier for the payment gateway..</param>
        /// <param name="paymentRunNumber">Human-readable identifier for this object..</param>
        /// <param name="paymentRunDate">The date and time when the scheduled payment run is to be executed, in &#x60;yyyy-mm-dd hh:mm:ss&#x60; format..</param>
        /// <param name="targetDate">The target date used to determine which receivables to be paid in the payment run.       The payments are collected for all receivables with the due date no later than the target date..</param>
        /// <param name="state">Status of the payment run..</param>
        public PaymentRun(Dictionary<string, Object> customFields = default(Dictionary<string, Object>), bool applyCreditMemos = default(bool), bool applyUnappliedPayments = default(bool), string batch = default(string), bool consolidatePayment = default(bool), int billCycleDay = default(int), string billRunId = default(string), bool collectPayment = default(bool), string currency = default(string), Object stateTransitions = default(Object), string paymentGatewayId = default(string), string paymentRunNumber = default(string), DateTime paymentRunDate = default(DateTime), DateTime targetDate = default(DateTime), StateEnum? state = default(StateEnum?))
        {
            this.state_transitions = stateTransitions;
            this.custom_fields = customFields;
            this.apply_credit_memos = applyCreditMemos;
            this.apply_unapplied_payments = applyUnappliedPayments;
            this.batch = batch;
            this.consolidate_payment = consolidatePayment;
            this.bill_cycle_day = billCycleDay;
            this.bill_run_id = billRunId;
            this.collect_payment = collectPayment;
            this.currency = currency;
            this.state_transitions = stateTransitions;
            this.payment_gateway_id = paymentGatewayId;
            this.payment_run_number = paymentRunNumber;
            this.payment_run_date = paymentRunDate;
            this.target_date = targetDate;
            this.state = state;
        }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>
        [DataMember(Name="updated_by_id", EmitDefaultValue=false)]
        public string updated_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public DateTime updated_time { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>
        [DataMember(Name="created_by_id", EmitDefaultValue=false)]
        public string created_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public DateTime created_time { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).
        /// </summary>
        /// <value>The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).</value>
        [DataMember(Name="custom_objects", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_objects { get; private set; }

        /// <summary>
        /// If true, any posted credit memos are applied first.
        /// </summary>
        /// <value>If true, any posted credit memos are applied first.</value>
        [DataMember(Name="apply_credit_memos", EmitDefaultValue=false)]
        public bool apply_credit_memos { get; set; }

        /// <summary>
        /// If true, any unapplied payments are applied first.
        /// </summary>
        /// <value>If true, any unapplied payments are applied first.</value>
        [DataMember(Name="apply_unapplied_payments", EmitDefaultValue=false)]
        public bool apply_unapplied_payments { get; set; }

        /// <summary>
        /// Identifier of the customer account batch to be included in this payment run.
        /// </summary>
        /// <value>Identifier of the customer account batch to be included in this payment run.</value>
        [DataMember(Name="batch", EmitDefaultValue=false)]
        public string batch { get; set; }

        /// <summary>
        /// If true, a single payment will be collected for all receivables due on an account.
        /// </summary>
        /// <value>If true, a single payment will be collected for all receivables due on an account.</value>
        [DataMember(Name="consolidate_payment", EmitDefaultValue=false)]
        public bool consolidate_payment { get; set; }

        /// <summary>
        /// The day of the month to bill multiple customer accounts.
        /// </summary>
        /// <value>The day of the month to bill multiple customer accounts.</value>
        [DataMember(Name="bill_cycle_day", EmitDefaultValue=false)]
        public int bill_cycle_day { get; set; }

        /// <summary>
        /// The unique identifier of a bill run.
        /// </summary>
        /// <value>The unique identifier of a bill run.</value>
        [DataMember(Name="bill_run_id", EmitDefaultValue=false)]
        public string bill_run_id { get; set; }

        /// <summary>
        /// Indicates whether to process electronic payments during the execution of payment runs.
        /// </summary>
        /// <value>Indicates whether to process electronic payments during the execution of payment runs.</value>
        [DataMember(Name="collect_payment", EmitDefaultValue=false)]
        public bool collect_payment { get; set; }

        /// <summary>
        /// Three-letter ISO currency code.
        /// </summary>
        /// <value>Three-letter ISO currency code.</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string currency { get; set; }

        /// <summary>
        /// The date and time when the payment run executed, in the &#x60;yyyy-mm-dd hh:mm:ss&#x60; format.
        /// </summary>
        /// <value>The date and time when the payment run executed, in the &#x60;yyyy-mm-dd hh:mm:ss&#x60; format.</value>
        [DataMember(Name="state_transitions", EmitDefaultValue=true)]
        public Object state_transitions { get; set; }

        /// <summary>
        /// Unique identifier for the payment gateway.
        /// </summary>
        /// <value>Unique identifier for the payment gateway.</value>
        [DataMember(Name="payment_gateway_id", EmitDefaultValue=false)]
        public string payment_gateway_id { get; set; }

        /// <summary>
        /// Gets or Sets payment_collection_date
        /// </summary>
        [DataMember(Name="payment_collection_date", EmitDefaultValue=false)]
        public DateTime payment_collection_date { get; private set; }

        /// <summary>
        /// Human-readable identifier for this object.
        /// </summary>
        /// <value>Human-readable identifier for this object.</value>
        [DataMember(Name="payment_run_number", EmitDefaultValue=false)]
        public string payment_run_number { get; set; }

        /// <summary>
        /// The date and time when the scheduled payment run is to be executed, in &#x60;yyyy-mm-dd hh:mm:ss&#x60; format.
        /// </summary>
        /// <value>The date and time when the scheduled payment run is to be executed, in &#x60;yyyy-mm-dd hh:mm:ss&#x60; format.</value>
        [DataMember(Name="payment_run_date", EmitDefaultValue=false)]
        public DateTime payment_run_date { get; set; }

        /// <summary>
        /// The target date used to determine which receivables to be paid in the payment run.       The payments are collected for all receivables with the due date no later than the target date.
        /// </summary>
        /// <value>The target date used to determine which receivables to be paid in the payment run.       The payments are collected for all receivables with the due date no later than the target date.</value>
        [DataMember(Name="target_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime target_date { get; set; }


        /// <summary>
        /// Summary of the payment run.
        /// </summary>
        /// <value>Summary of the payment run.</value>
        [DataMember(Name="summary", EmitDefaultValue=true)]
        public PaymentRunSummary summary { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRun {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  updated_by_id: ").Append(updated_by_id).Append("\n");
            sb.Append("  updated_time: ").Append(updated_time).Append("\n");
            sb.Append("  created_by_id: ").Append(created_by_id).Append("\n");
            sb.Append("  created_time: ").Append(created_time).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  custom_objects: ").Append(custom_objects).Append("\n");
            sb.Append("  apply_credit_memos: ").Append(apply_credit_memos).Append("\n");
            sb.Append("  apply_unapplied_payments: ").Append(apply_unapplied_payments).Append("\n");
            sb.Append("  batch: ").Append(batch).Append("\n");
            sb.Append("  consolidate_payment: ").Append(consolidate_payment).Append("\n");
            sb.Append("  bill_cycle_day: ").Append(bill_cycle_day).Append("\n");
            sb.Append("  bill_run_id: ").Append(bill_run_id).Append("\n");
            sb.Append("  collect_payment: ").Append(collect_payment).Append("\n");
            sb.Append("  currency: ").Append(currency).Append("\n");
            sb.Append("  state_transitions: ").Append(state_transitions).Append("\n");
            sb.Append("  payment_gateway_id: ").Append(payment_gateway_id).Append("\n");
            sb.Append("  payment_collection_date: ").Append(payment_collection_date).Append("\n");
            sb.Append("  payment_run_number: ").Append(payment_run_number).Append("\n");
            sb.Append("  payment_run_date: ").Append(payment_run_date).Append("\n");
            sb.Append("  target_date: ").Append(target_date).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  summary: ").Append(summary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRun);
        }

        /// <summary>
        /// Returns true if PaymentRun instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRun to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRun input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.updated_by_id == input.updated_by_id ||
                    (this.updated_by_id != null &&
                    this.updated_by_id.Equals(input.updated_by_id))
                ) && 
                (
                    this.updated_time == input.updated_time ||
                    (this.updated_time != null &&
                    this.updated_time.Equals(input.updated_time))
                ) && 
                (
                    this.created_by_id == input.created_by_id ||
                    (this.created_by_id != null &&
                    this.created_by_id.Equals(input.created_by_id))
                ) && 
                (
                    this.created_time == input.created_time ||
                    (this.created_time != null &&
                    this.created_time.Equals(input.created_time))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.custom_objects == input.custom_objects ||
                    this.custom_objects != null &&
                    input.custom_objects != null &&
                    this.custom_objects.SequenceEqual(input.custom_objects)
                ) && 
                (
                    this.apply_credit_memos == input.apply_credit_memos ||
                    (this.apply_credit_memos != null &&
                    this.apply_credit_memos.Equals(input.apply_credit_memos))
                ) && 
                (
                    this.apply_unapplied_payments == input.apply_unapplied_payments ||
                    (this.apply_unapplied_payments != null &&
                    this.apply_unapplied_payments.Equals(input.apply_unapplied_payments))
                ) && 
                (
                    this.batch == input.batch ||
                    (this.batch != null &&
                    this.batch.Equals(input.batch))
                ) && 
                (
                    this.consolidate_payment == input.consolidate_payment ||
                    (this.consolidate_payment != null &&
                    this.consolidate_payment.Equals(input.consolidate_payment))
                ) && 
                (
                    this.bill_cycle_day == input.bill_cycle_day ||
                    (this.bill_cycle_day != null &&
                    this.bill_cycle_day.Equals(input.bill_cycle_day))
                ) && 
                (
                    this.bill_run_id == input.bill_run_id ||
                    (this.bill_run_id != null &&
                    this.bill_run_id.Equals(input.bill_run_id))
                ) && 
                (
                    this.collect_payment == input.collect_payment ||
                    (this.collect_payment != null &&
                    this.collect_payment.Equals(input.collect_payment))
                ) && 
                (
                    this.currency == input.currency ||
                    (this.currency != null &&
                    this.currency.Equals(input.currency))
                ) && 
                (
                    this.state_transitions == input.state_transitions ||
                    (this.state_transitions != null &&
                    this.state_transitions.Equals(input.state_transitions))
                ) && 
                (
                    this.payment_gateway_id == input.payment_gateway_id ||
                    (this.payment_gateway_id != null &&
                    this.payment_gateway_id.Equals(input.payment_gateway_id))
                ) && 
                (
                    this.payment_collection_date == input.payment_collection_date ||
                    (this.payment_collection_date != null &&
                    this.payment_collection_date.Equals(input.payment_collection_date))
                ) && 
                (
                    this.payment_run_number == input.payment_run_number ||
                    (this.payment_run_number != null &&
                    this.payment_run_number.Equals(input.payment_run_number))
                ) && 
                (
                    this.payment_run_date == input.payment_run_date ||
                    (this.payment_run_date != null &&
                    this.payment_run_date.Equals(input.payment_run_date))
                ) && 
                (
                    this.target_date == input.target_date ||
                    (this.target_date != null &&
                    this.target_date.Equals(input.target_date))
                ) && 
                (
                    this.state == input.state ||
                    (this.state != null &&
                    this.state.Equals(input.state))
                ) && 
                (
                    this.summary == input.summary ||
                    (this.summary != null &&
                    this.summary.Equals(input.summary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.updated_by_id != null)
                    hashCode = hashCode * 59 + this.updated_by_id.GetHashCode();
                if (this.updated_time != null)
                    hashCode = hashCode * 59 + this.updated_time.GetHashCode();
                if (this.created_by_id != null)
                    hashCode = hashCode * 59 + this.created_by_id.GetHashCode();
                if (this.created_time != null)
                    hashCode = hashCode * 59 + this.created_time.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.custom_objects != null)
                    hashCode = hashCode * 59 + this.custom_objects.GetHashCode();
                if (this.apply_credit_memos != null)
                    hashCode = hashCode * 59 + this.apply_credit_memos.GetHashCode();
                if (this.apply_unapplied_payments != null)
                    hashCode = hashCode * 59 + this.apply_unapplied_payments.GetHashCode();
                if (this.batch != null)
                    hashCode = hashCode * 59 + this.batch.GetHashCode();
                if (this.consolidate_payment != null)
                    hashCode = hashCode * 59 + this.consolidate_payment.GetHashCode();
                if (this.bill_cycle_day != null)
                    hashCode = hashCode * 59 + this.bill_cycle_day.GetHashCode();
                if (this.bill_run_id != null)
                    hashCode = hashCode * 59 + this.bill_run_id.GetHashCode();
                if (this.collect_payment != null)
                    hashCode = hashCode * 59 + this.collect_payment.GetHashCode();
                if (this.currency != null)
                    hashCode = hashCode * 59 + this.currency.GetHashCode();
                if (this.state_transitions != null)
                    hashCode = hashCode * 59 + this.state_transitions.GetHashCode();
                if (this.payment_gateway_id != null)
                    hashCode = hashCode * 59 + this.payment_gateway_id.GetHashCode();
                if (this.payment_collection_date != null)
                    hashCode = hashCode * 59 + this.payment_collection_date.GetHashCode();
                if (this.payment_run_number != null)
                    hashCode = hashCode * 59 + this.payment_run_number.GetHashCode();
                if (this.payment_run_date != null)
                    hashCode = hashCode * 59 + this.payment_run_date.GetHashCode();
                if (this.target_date != null)
                    hashCode = hashCode * 59 + this.target_date.GetHashCode();
                if (this.state != null)
                    hashCode = hashCode * 59 + this.state.GetHashCode();
                if (this.summary != null)
                    hashCode = hashCode * 59 + this.summary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // bill_cycle_day (int) maximum
            if(this.bill_cycle_day > (int)31)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for bill_cycle_day, must be a value less than or equal to 31.", new [] { "bill_cycle_day" });
            }

            // bill_cycle_day (int) minimum
            if(this.bill_cycle_day < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for bill_cycle_day, must be a value greater than or equal to 0.", new [] { "bill_cycle_day" });
            }

            yield break;
        }
    }

}
