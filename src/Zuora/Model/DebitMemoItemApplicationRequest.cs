/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// DebitMemoItemApplicationRequest
    /// </summary>
    [DataContract]
    public partial class DebitMemoItemApplicationRequest :  IEquatable<DebitMemoItemApplicationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DebitMemoItemApplicationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DebitMemoItemApplicationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DebitMemoItemApplicationRequest" /> class.
        /// </summary>
        /// <param name="id">Identifier of a memo item. (required).</param>
        /// <param name="amount">The amount of the payment that is applied to the specific billing document item or taxation item. (required).</param>
        /// <param name="taxationItemId">Identifier of the taxation item to which the payment is applied..</param>
        public DebitMemoItemApplicationRequest(string id = default(string), decimal amount = default(decimal), string taxationItemId = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for DebitMemoItemApplicationRequest and cannot be null");
            }
            else
            {
                this.id = id;
            }

            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for DebitMemoItemApplicationRequest and cannot be null");
            }
            else
            {
                this.amount = amount;
            }

            this.taxation_item_id = taxationItemId;
        }

        /// <summary>
        /// Identifier of a memo item.
        /// </summary>
        /// <value>Identifier of a memo item.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string id { get; set; }

        /// <summary>
        /// The amount of the payment that is applied to the specific billing document item or taxation item.
        /// </summary>
        /// <value>The amount of the payment that is applied to the specific billing document item or taxation item.</value>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public decimal amount { get; set; }

        /// <summary>
        /// Identifier of the taxation item to which the payment is applied.
        /// </summary>
        /// <value>Identifier of the taxation item to which the payment is applied.</value>
        [DataMember(Name="taxation_item_id", EmitDefaultValue=false)]
        public string taxation_item_id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DebitMemoItemApplicationRequest {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  taxation_item_id: ").Append(taxation_item_id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebitMemoItemApplicationRequest);
        }

        /// <summary>
        /// Returns true if DebitMemoItemApplicationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DebitMemoItemApplicationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebitMemoItemApplicationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.taxation_item_id == input.taxation_item_id ||
                    (this.taxation_item_id != null &&
                    this.taxation_item_id.Equals(input.taxation_item_id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.taxation_item_id != null)
                    hashCode = hashCode * 59 + this.taxation_item_id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
