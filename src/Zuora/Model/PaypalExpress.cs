/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// If it is a &#x60;paypal_express&#x60; payment method, this hash contains details about the PayPal Express payment method.
    /// </summary>
    [DataContract]
    public partial class PaypalExpress :  IEquatable<PaypalExpress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaypalExpress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaypalExpress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaypalExpress" /> class.
        /// </summary>
        /// <param name="baid">Identifier of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9. (required).</param>
        /// <param name="email">Email address associated with the payment method (required).</param>
        public PaypalExpress(string baid = default(string), string email = default(string))
        {
            // to ensure "baid" is required (not null)
            if (baid == null)
            {
                throw new InvalidDataException("baid is a required property for PaypalExpress and cannot be null");
            }
            else
            {
                this.baid = baid;
            }

            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for PaypalExpress and cannot be null");
            }
            else
            {
                this.email = email;
            }

        }

        /// <summary>
        /// Identifier of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9.
        /// </summary>
        /// <value>Identifier of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9.</value>
        [DataMember(Name="baid", EmitDefaultValue=true)]
        public string baid { get; set; }

        /// <summary>
        /// Email address associated with the payment method
        /// </summary>
        /// <value>Email address associated with the payment method</value>
        [DataMember(Name="email", EmitDefaultValue=true)]
        public string email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaypalExpress {\n");
            sb.Append("  baid: ").Append(baid).Append("\n");
            sb.Append("  email: ").Append(email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaypalExpress);
        }

        /// <summary>
        /// Returns true if PaypalExpress instances are equal
        /// </summary>
        /// <param name="input">Instance of PaypalExpress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaypalExpress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.baid == input.baid ||
                    (this.baid != null &&
                    this.baid.Equals(input.baid))
                ) && 
                (
                    this.email == input.email ||
                    (this.email != null &&
                    this.email.Equals(input.email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.baid != null)
                    hashCode = hashCode * 59 + this.baid.GetHashCode();
                if (this.email != null)
                    hashCode = hashCode * 59 + this.email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
