/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// SubscriptionItemPreviewResponse
    /// </summary>
    [DataContract]
    public partial class SubscriptionItemPreviewResponse :  IEquatable<SubscriptionItemPreviewResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionItemPreviewResponse" /> class.
        /// </summary>
        /// <param name="subscriptionItemId">Identifier of the subscription item..</param>
        /// <param name="priceId">Identifier of the price..</param>
        /// <param name="startDate">Date on which the subscription item starts to become effective..</param>
        /// <param name="endDate">Date on which the subscription item expires..</param>
        /// <param name="mrr">mrr.</param>
        /// <param name="tcb">tcb.</param>
        public SubscriptionItemPreviewResponse(string subscriptionItemId = default(string), string priceId = default(string), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), SubscriptionItemPreviewResponseMrr mrr = default(SubscriptionItemPreviewResponseMrr), SubscriptionItemPreviewResponseMrr tcb = default(SubscriptionItemPreviewResponseMrr))
        {
            this.subscription_item_id = subscriptionItemId;
            this.price_id = priceId;
            this.start_date = startDate;
            this.end_date = endDate;
            this.mrr = mrr;
            this.tcb = tcb;
        }

        /// <summary>
        /// Identifier of the subscription item.
        /// </summary>
        /// <value>Identifier of the subscription item.</value>
        [DataMember(Name="subscription_item_id", EmitDefaultValue=false)]
        public string subscription_item_id { get; set; }

        /// <summary>
        /// Identifier of the price.
        /// </summary>
        /// <value>Identifier of the price.</value>
        [DataMember(Name="price_id", EmitDefaultValue=false)]
        public string price_id { get; set; }

        /// <summary>
        /// Date on which the subscription item starts to become effective.
        /// </summary>
        /// <value>Date on which the subscription item starts to become effective.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime start_date { get; set; }

        /// <summary>
        /// Date on which the subscription item expires.
        /// </summary>
        /// <value>Date on which the subscription item expires.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime end_date { get; set; }

        /// <summary>
        /// Gets or Sets mrr
        /// </summary>
        [DataMember(Name="mrr", EmitDefaultValue=false)]
        public SubscriptionItemPreviewResponseMrr mrr { get; set; }

        /// <summary>
        /// Gets or Sets tcb
        /// </summary>
        [DataMember(Name="tcb", EmitDefaultValue=false)]
        public SubscriptionItemPreviewResponseMrr tcb { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionItemPreviewResponse {\n");
            sb.Append("  subscription_item_id: ").Append(subscription_item_id).Append("\n");
            sb.Append("  price_id: ").Append(price_id).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  mrr: ").Append(mrr).Append("\n");
            sb.Append("  tcb: ").Append(tcb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionItemPreviewResponse);
        }

        /// <summary>
        /// Returns true if SubscriptionItemPreviewResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionItemPreviewResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionItemPreviewResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.subscription_item_id == input.subscription_item_id ||
                    (this.subscription_item_id != null &&
                    this.subscription_item_id.Equals(input.subscription_item_id))
                ) && 
                (
                    this.price_id == input.price_id ||
                    (this.price_id != null &&
                    this.price_id.Equals(input.price_id))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.mrr == input.mrr ||
                    (this.mrr != null &&
                    this.mrr.Equals(input.mrr))
                ) && 
                (
                    this.tcb == input.tcb ||
                    (this.tcb != null &&
                    this.tcb.Equals(input.tcb))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.subscription_item_id != null)
                    hashCode = hashCode * 59 + this.subscription_item_id.GetHashCode();
                if (this.price_id != null)
                    hashCode = hashCode * 59 + this.price_id.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.mrr != null)
                    hashCode = hashCode * 59 + this.mrr.GetHashCode();
                if (this.tcb != null)
                    hashCode = hashCode * 59 + this.tcb.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
