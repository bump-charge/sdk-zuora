/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Account data that is used for the subscription preview. If you specify this field, do not specify &#x60;account_id&#x60;. Note that this operation is only for preview and no subscription is created.
    /// </summary>
    [DataContract]
    public partial class SubscriptionPreviewAccountRequest :  IEquatable<SubscriptionPreviewAccountRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPreviewAccountRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionPreviewAccountRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPreviewAccountRequest" /> class.
        /// </summary>
        /// <param name="soldTo">Customer address used for calculating tax..</param>
        /// <param name="taxCertificate">taxCertificate.</param>
        /// <param name="billCycleDay">The day of the month on which your customer will be invoiced. For month-end specify 31. (required).</param>
        /// <param name="currency">Three-letter ISO currency code. Once the currency is set for an account, it cannot be updated. (required).</param>
        /// <param name="taxIdentifier">taxIdentifier.</param>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        public SubscriptionPreviewAccountRequest(AccountContactCreateRequest soldTo = default(AccountContactCreateRequest), TaxCertificate taxCertificate = default(TaxCertificate), int billCycleDay = default(int), string currency = default(string), TaxIdentifier taxIdentifier = default(TaxIdentifier), Dictionary<string, Object> customFields = default(Dictionary<string, Object>))
        {
            this.sold_to = soldTo;
            // to ensure "billCycleDay" is required (not null)
            if (billCycleDay == null)
            {
                throw new InvalidDataException("billCycleDay is a required property for SubscriptionPreviewAccountRequest and cannot be null");
            }
            else
            {
                this.bill_cycle_day = billCycleDay;
            }

            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for SubscriptionPreviewAccountRequest and cannot be null");
            }
            else
            {
                this.currency = currency;
            }

            this.sold_to = soldTo;
            this.tax_certificate = taxCertificate;
            this.tax_identifier = taxIdentifier;
            this.custom_fields = customFields;
        }

        /// <summary>
        /// Customer address used for calculating tax.
        /// </summary>
        /// <value>Customer address used for calculating tax.</value>
        [DataMember(Name="sold_to", EmitDefaultValue=true)]
        public AccountContactCreateRequest sold_to { get; set; }

        /// <summary>
        /// Gets or Sets tax_certificate
        /// </summary>
        [DataMember(Name="tax_certificate", EmitDefaultValue=false)]
        public TaxCertificate tax_certificate { get; set; }

        /// <summary>
        /// The day of the month on which your customer will be invoiced. For month-end specify 31.
        /// </summary>
        /// <value>The day of the month on which your customer will be invoiced. For month-end specify 31.</value>
        [DataMember(Name="bill_cycle_day", EmitDefaultValue=true)]
        public int bill_cycle_day { get; set; }

        /// <summary>
        /// Three-letter ISO currency code. Once the currency is set for an account, it cannot be updated.
        /// </summary>
        /// <value>Three-letter ISO currency code. Once the currency is set for an account, it cannot be updated.</value>
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public string currency { get; set; }

        /// <summary>
        /// Gets or Sets tax_identifier
        /// </summary>
        [DataMember(Name="tax_identifier", EmitDefaultValue=false)]
        public TaxIdentifier tax_identifier { get; set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPreviewAccountRequest {\n");
            sb.Append("  sold_to: ").Append(sold_to).Append("\n");
            sb.Append("  tax_certificate: ").Append(tax_certificate).Append("\n");
            sb.Append("  bill_cycle_day: ").Append(bill_cycle_day).Append("\n");
            sb.Append("  currency: ").Append(currency).Append("\n");
            sb.Append("  tax_identifier: ").Append(tax_identifier).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionPreviewAccountRequest);
        }

        /// <summary>
        /// Returns true if SubscriptionPreviewAccountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionPreviewAccountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPreviewAccountRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.sold_to == input.sold_to ||
                    (this.sold_to != null &&
                    this.sold_to.Equals(input.sold_to))
                ) && 
                (
                    this.tax_certificate == input.tax_certificate ||
                    (this.tax_certificate != null &&
                    this.tax_certificate.Equals(input.tax_certificate))
                ) && 
                (
                    this.bill_cycle_day == input.bill_cycle_day ||
                    (this.bill_cycle_day != null &&
                    this.bill_cycle_day.Equals(input.bill_cycle_day))
                ) && 
                (
                    this.currency == input.currency ||
                    (this.currency != null &&
                    this.currency.Equals(input.currency))
                ) && 
                (
                    this.tax_identifier == input.tax_identifier ||
                    (this.tax_identifier != null &&
                    this.tax_identifier.Equals(input.tax_identifier))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.sold_to != null)
                    hashCode = hashCode * 59 + this.sold_to.GetHashCode();
                if (this.tax_certificate != null)
                    hashCode = hashCode * 59 + this.tax_certificate.GetHashCode();
                if (this.bill_cycle_day != null)
                    hashCode = hashCode * 59 + this.bill_cycle_day.GetHashCode();
                if (this.currency != null)
                    hashCode = hashCode * 59 + this.currency.GetHashCode();
                if (this.tax_identifier != null)
                    hashCode = hashCode * 59 + this.tax_identifier.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // bill_cycle_day (int) maximum
            if(this.bill_cycle_day > (int)31)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for bill_cycle_day, must be a value less than or equal to 31.", new [] { "bill_cycle_day" });
            }

            // bill_cycle_day (int) minimum
            if(this.bill_cycle_day < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for bill_cycle_day, must be a value greater than or equal to 0.", new [] { "bill_cycle_day" });
            }

            yield break;
        }
    }

}
