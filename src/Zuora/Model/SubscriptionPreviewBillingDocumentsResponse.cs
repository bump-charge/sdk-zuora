/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// SubscriptionPreviewBillingDocumentsResponse
    /// </summary>
    [DataContract]
    public partial class SubscriptionPreviewBillingDocumentsResponse :  IEquatable<SubscriptionPreviewBillingDocumentsResponse>, IValidatableObject
    {
        /// <summary>
        /// The type of billing document. Can be one of the credit memo, debit memo, or invoice.
        /// </summary>
        /// <value>The type of billing document. Can be one of the credit memo, debit memo, or invoice.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Creditmemo for value: credit_memo
            /// </summary>
            [EnumMember(Value = "credit_memo")]
            Creditmemo = 1,

            /// <summary>
            /// Enum Debitmemo for value: debit_memo
            /// </summary>
            [EnumMember(Value = "debit_memo")]
            Debitmemo = 2,

            /// <summary>
            /// Enum Invoice for value: invoice
            /// </summary>
            [EnumMember(Value = "invoice")]
            Invoice = 3

        }

        /// <summary>
        /// The type of billing document. Can be one of the credit memo, debit memo, or invoice.
        /// </summary>
        /// <value>The type of billing document. Can be one of the credit memo, debit memo, or invoice.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPreviewBillingDocumentsResponse" /> class.
        /// </summary>
        /// <param name="type">The type of billing document. Can be one of the credit memo, debit memo, or invoice..</param>
        /// <param name="targetDate">targetDate.</param>
        /// <param name="billingDocumentItems">billingDocumentItems.</param>
        public SubscriptionPreviewBillingDocumentsResponse(TypeEnum? type = default(TypeEnum?), DateTime targetDate = default(DateTime), List<SubscriptionPreviewBillingDocumentItemResponse> billingDocumentItems = default(List<SubscriptionPreviewBillingDocumentItemResponse>))
        {
            this.type = type;
            this.target_date = targetDate;
            this.billing_document_items = billingDocumentItems;
        }

        /// <summary>
        /// The total amount exclusive of tax.
        /// </summary>
        /// <value>The total amount exclusive of tax.</value>
        [DataMember(Name="subtotal", EmitDefaultValue=false)]
        public decimal subtotal { get; private set; }

        /// <summary>
        /// The total tax amount.
        /// </summary>
        /// <value>The total tax amount.</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public decimal tax { get; private set; }

        /// <summary>
        /// The total amount.
        /// </summary>
        /// <value>The total amount.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal total { get; private set; }


        /// <summary>
        /// Gets or Sets target_date
        /// </summary>
        [DataMember(Name="target_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime target_date { get; set; }

        /// <summary>
        /// Gets or Sets billing_document_items
        /// </summary>
        [DataMember(Name="billing_document_items", EmitDefaultValue=false)]
        public List<SubscriptionPreviewBillingDocumentItemResponse> billing_document_items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPreviewBillingDocumentsResponse {\n");
            sb.Append("  subtotal: ").Append(subtotal).Append("\n");
            sb.Append("  tax: ").Append(tax).Append("\n");
            sb.Append("  total: ").Append(total).Append("\n");
            sb.Append("  type: ").Append(type).Append("\n");
            sb.Append("  target_date: ").Append(target_date).Append("\n");
            sb.Append("  billing_document_items: ").Append(billing_document_items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionPreviewBillingDocumentsResponse);
        }

        /// <summary>
        /// Returns true if SubscriptionPreviewBillingDocumentsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionPreviewBillingDocumentsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPreviewBillingDocumentsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.subtotal == input.subtotal ||
                    (this.subtotal != null &&
                    this.subtotal.Equals(input.subtotal))
                ) && 
                (
                    this.tax == input.tax ||
                    (this.tax != null &&
                    this.tax.Equals(input.tax))
                ) && 
                (
                    this.total == input.total ||
                    (this.total != null &&
                    this.total.Equals(input.total))
                ) && 
                (
                    this.type == input.type ||
                    (this.type != null &&
                    this.type.Equals(input.type))
                ) && 
                (
                    this.target_date == input.target_date ||
                    (this.target_date != null &&
                    this.target_date.Equals(input.target_date))
                ) && 
                (
                    this.billing_document_items == input.billing_document_items ||
                    this.billing_document_items != null &&
                    input.billing_document_items != null &&
                    this.billing_document_items.SequenceEqual(input.billing_document_items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.subtotal != null)
                    hashCode = hashCode * 59 + this.subtotal.GetHashCode();
                if (this.tax != null)
                    hashCode = hashCode * 59 + this.tax.GetHashCode();
                if (this.total != null)
                    hashCode = hashCode * 59 + this.total.GetHashCode();
                if (this.type != null)
                    hashCode = hashCode * 59 + this.type.GetHashCode();
                if (this.target_date != null)
                    hashCode = hashCode * 59 + this.target_date.GetHashCode();
                if (this.billing_document_items != null)
                    hashCode = hashCode * 59 + this.billing_document_items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
