/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Usage
    /// </summary>
    [DataContract]
    public partial class Usage :  IEquatable<Usage>, IValidatableObject
    {
        /// <summary>
        /// Defines state
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 2

        }

        /// <summary>
        /// Gets or Sets state
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? state { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Usage" /> class.
        /// </summary>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="accountNumber">Human-readable identifier of the account. It can be user-supplied. Either &#x60;account_number&#x60; or &#x60;account_id&#x60; is required..</param>
        /// <param name="accountId">Identifier of the account associated with this subscription. Either &#x60;account_id&#x60; or &#x60;account_number&#x60; is required..</param>
        /// <param name="subscriptionItemId">Identifier of the subscription item..</param>
        /// <param name="subscriptionItemNumber">Human-readable identifier of the subscription item. It can be user-supplied..</param>
        /// <param name="description">An arbitrary string attached to the object. Often useful for displaying to users..</param>
        /// <param name="endTime">The end time for which usage is recorded..</param>
        /// <param name="quantity">The number of units of this item..</param>
        /// <param name="startTime">The start time for which usage is recorded..</param>
        /// <param name="subscriptionId">The identifier of the subscription associated with the billing document item..</param>
        /// <param name="subscriptionNumber">Human-readable identifier of the subscription. It can be user-supplied..</param>
        /// <param name="unitOfMeasure">Specifies the units to measure usage. Units of measure are configured in Zuora Central. Your values depend on your configuration in Billing Settings..</param>
        /// <param name="state">state.</param>
        /// <param name="account">The account that owns the usages. EXPANDABLE.</param>
        public Usage(Dictionary<string, Object> customFields = default(Dictionary<string, Object>), string accountNumber = default(string), string accountId = default(string), string subscriptionItemId = default(string), string subscriptionItemNumber = default(string), string description = default(string), DateTime endTime = default(DateTime), decimal quantity = default(decimal), DateTime startTime = default(DateTime), string subscriptionId = default(string), string subscriptionNumber = default(string), string unitOfMeasure = default(string), StateEnum? state = default(StateEnum?), Account account = default(Account))
        {
            this.account = account;
            this.custom_fields = customFields;
            this.account_number = accountNumber;
            this.account_id = accountId;
            this.subscription_item_id = subscriptionItemId;
            this.subscription_item_number = subscriptionItemNumber;
            this.description = description;
            this.end_time = endTime;
            this.quantity = quantity;
            this.start_time = startTime;
            this.subscription_id = subscriptionId;
            this.subscription_number = subscriptionNumber;
            this.unit_of_measure = unitOfMeasure;
            this.state = state;
            this.account = account;
        }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>
        [DataMember(Name="updated_by_id", EmitDefaultValue=false)]
        public string updated_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public DateTime updated_time { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>
        [DataMember(Name="created_by_id", EmitDefaultValue=false)]
        public string created_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public DateTime created_time { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).
        /// </summary>
        /// <value>The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).</value>
        [DataMember(Name="custom_objects", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_objects { get; private set; }

        /// <summary>
        /// Human-readable identifier of the account. It can be user-supplied. Either &#x60;account_number&#x60; or &#x60;account_id&#x60; is required.
        /// </summary>
        /// <value>Human-readable identifier of the account. It can be user-supplied. Either &#x60;account_number&#x60; or &#x60;account_id&#x60; is required.</value>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string account_number { get; set; }

        /// <summary>
        /// Identifier of the account associated with this subscription. Either &#x60;account_id&#x60; or &#x60;account_number&#x60; is required.
        /// </summary>
        /// <value>Identifier of the account associated with this subscription. Either &#x60;account_id&#x60; or &#x60;account_number&#x60; is required.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string account_id { get; set; }

        /// <summary>
        /// Identifier of the subscription item.
        /// </summary>
        /// <value>Identifier of the subscription item.</value>
        [DataMember(Name="subscription_item_id", EmitDefaultValue=false)]
        public string subscription_item_id { get; set; }

        /// <summary>
        /// Human-readable identifier of the subscription item. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the subscription item. It can be user-supplied.</value>
        [DataMember(Name="subscription_item_number", EmitDefaultValue=false)]
        public string subscription_item_number { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// The end time for which usage is recorded.
        /// </summary>
        /// <value>The end time for which usage is recorded.</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public DateTime end_time { get; set; }

        /// <summary>
        /// The number of units of this item.
        /// </summary>
        /// <value>The number of units of this item.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal quantity { get; set; }

        /// <summary>
        /// The start time for which usage is recorded.
        /// </summary>
        /// <value>The start time for which usage is recorded.</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public DateTime start_time { get; set; }

        /// <summary>
        /// The identifier of the subscription associated with the billing document item.
        /// </summary>
        /// <value>The identifier of the subscription associated with the billing document item.</value>
        [DataMember(Name="subscription_id", EmitDefaultValue=false)]
        public string subscription_id { get; set; }

        /// <summary>
        /// Human-readable identifier of the subscription. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the subscription. It can be user-supplied.</value>
        [DataMember(Name="subscription_number", EmitDefaultValue=false)]
        public string subscription_number { get; set; }

        /// <summary>
        /// Specifies the units to measure usage. Units of measure are configured in Zuora Central. Your values depend on your configuration in Billing Settings.
        /// </summary>
        /// <value>Specifies the units to measure usage. Units of measure are configured in Zuora Central. Your values depend on your configuration in Billing Settings.</value>
        [DataMember(Name="unit_of_measure", EmitDefaultValue=false)]
        public string unit_of_measure { get; set; }


        /// <summary>
        /// The account that owns the usages. EXPANDABLE
        /// </summary>
        /// <value>The account that owns the usages. EXPANDABLE</value>
        [DataMember(Name="account", EmitDefaultValue=true)]
        public Account account { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Usage {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  updated_by_id: ").Append(updated_by_id).Append("\n");
            sb.Append("  updated_time: ").Append(updated_time).Append("\n");
            sb.Append("  created_by_id: ").Append(created_by_id).Append("\n");
            sb.Append("  created_time: ").Append(created_time).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  custom_objects: ").Append(custom_objects).Append("\n");
            sb.Append("  account_number: ").Append(account_number).Append("\n");
            sb.Append("  account_id: ").Append(account_id).Append("\n");
            sb.Append("  subscription_item_id: ").Append(subscription_item_id).Append("\n");
            sb.Append("  subscription_item_number: ").Append(subscription_item_number).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  end_time: ").Append(end_time).Append("\n");
            sb.Append("  quantity: ").Append(quantity).Append("\n");
            sb.Append("  start_time: ").Append(start_time).Append("\n");
            sb.Append("  subscription_id: ").Append(subscription_id).Append("\n");
            sb.Append("  subscription_number: ").Append(subscription_number).Append("\n");
            sb.Append("  unit_of_measure: ").Append(unit_of_measure).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  account: ").Append(account).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Usage);
        }

        /// <summary>
        /// Returns true if Usage instances are equal
        /// </summary>
        /// <param name="input">Instance of Usage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Usage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.updated_by_id == input.updated_by_id ||
                    (this.updated_by_id != null &&
                    this.updated_by_id.Equals(input.updated_by_id))
                ) && 
                (
                    this.updated_time == input.updated_time ||
                    (this.updated_time != null &&
                    this.updated_time.Equals(input.updated_time))
                ) && 
                (
                    this.created_by_id == input.created_by_id ||
                    (this.created_by_id != null &&
                    this.created_by_id.Equals(input.created_by_id))
                ) && 
                (
                    this.created_time == input.created_time ||
                    (this.created_time != null &&
                    this.created_time.Equals(input.created_time))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.custom_objects == input.custom_objects ||
                    this.custom_objects != null &&
                    input.custom_objects != null &&
                    this.custom_objects.SequenceEqual(input.custom_objects)
                ) && 
                (
                    this.account_number == input.account_number ||
                    (this.account_number != null &&
                    this.account_number.Equals(input.account_number))
                ) && 
                (
                    this.account_id == input.account_id ||
                    (this.account_id != null &&
                    this.account_id.Equals(input.account_id))
                ) && 
                (
                    this.subscription_item_id == input.subscription_item_id ||
                    (this.subscription_item_id != null &&
                    this.subscription_item_id.Equals(input.subscription_item_id))
                ) && 
                (
                    this.subscription_item_number == input.subscription_item_number ||
                    (this.subscription_item_number != null &&
                    this.subscription_item_number.Equals(input.subscription_item_number))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.end_time == input.end_time ||
                    (this.end_time != null &&
                    this.end_time.Equals(input.end_time))
                ) && 
                (
                    this.quantity == input.quantity ||
                    (this.quantity != null &&
                    this.quantity.Equals(input.quantity))
                ) && 
                (
                    this.start_time == input.start_time ||
                    (this.start_time != null &&
                    this.start_time.Equals(input.start_time))
                ) && 
                (
                    this.subscription_id == input.subscription_id ||
                    (this.subscription_id != null &&
                    this.subscription_id.Equals(input.subscription_id))
                ) && 
                (
                    this.subscription_number == input.subscription_number ||
                    (this.subscription_number != null &&
                    this.subscription_number.Equals(input.subscription_number))
                ) && 
                (
                    this.unit_of_measure == input.unit_of_measure ||
                    (this.unit_of_measure != null &&
                    this.unit_of_measure.Equals(input.unit_of_measure))
                ) && 
                (
                    this.state == input.state ||
                    (this.state != null &&
                    this.state.Equals(input.state))
                ) && 
                (
                    this.account == input.account ||
                    (this.account != null &&
                    this.account.Equals(input.account))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.updated_by_id != null)
                    hashCode = hashCode * 59 + this.updated_by_id.GetHashCode();
                if (this.updated_time != null)
                    hashCode = hashCode * 59 + this.updated_time.GetHashCode();
                if (this.created_by_id != null)
                    hashCode = hashCode * 59 + this.created_by_id.GetHashCode();
                if (this.created_time != null)
                    hashCode = hashCode * 59 + this.created_time.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.custom_objects != null)
                    hashCode = hashCode * 59 + this.custom_objects.GetHashCode();
                if (this.account_number != null)
                    hashCode = hashCode * 59 + this.account_number.GetHashCode();
                if (this.account_id != null)
                    hashCode = hashCode * 59 + this.account_id.GetHashCode();
                if (this.subscription_item_id != null)
                    hashCode = hashCode * 59 + this.subscription_item_id.GetHashCode();
                if (this.subscription_item_number != null)
                    hashCode = hashCode * 59 + this.subscription_item_number.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.end_time != null)
                    hashCode = hashCode * 59 + this.end_time.GetHashCode();
                if (this.quantity != null)
                    hashCode = hashCode * 59 + this.quantity.GetHashCode();
                if (this.start_time != null)
                    hashCode = hashCode * 59 + this.start_time.GetHashCode();
                if (this.subscription_id != null)
                    hashCode = hashCode * 59 + this.subscription_id.GetHashCode();
                if (this.subscription_number != null)
                    hashCode = hashCode * 59 + this.subscription_number.GetHashCode();
                if (this.unit_of_measure != null)
                    hashCode = hashCode * 59 + this.unit_of_measure.GetHashCode();
                if (this.state != null)
                    hashCode = hashCode * 59 + this.state.GetHashCode();
                if (this.account != null)
                    hashCode = hashCode * 59 + this.account.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
