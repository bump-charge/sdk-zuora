/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// SubscriptionPreviewResponse
    /// </summary>
    [DataContract]
    public partial class SubscriptionPreviewResponse :  IEquatable<SubscriptionPreviewResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPreviewResponse" /> class.
        /// </summary>
        /// <param name="actions">actions.</param>
        /// <param name="billingDocuments">billingDocuments.</param>
        public SubscriptionPreviewResponse(List<SubscriptionPreviewActionsResponse> actions = default(List<SubscriptionPreviewActionsResponse>), List<SubscriptionPreviewBillingDocumentsResponse> billingDocuments = default(List<SubscriptionPreviewBillingDocumentsResponse>))
        {
            this.actions = actions;
            this.billing_documents = billingDocuments;
        }

        /// <summary>
        /// Gets or Sets actions
        /// </summary>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<SubscriptionPreviewActionsResponse> actions { get; set; }

        /// <summary>
        /// Gets or Sets billing_documents
        /// </summary>
        [DataMember(Name="billing_documents", EmitDefaultValue=false)]
        public List<SubscriptionPreviewBillingDocumentsResponse> billing_documents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPreviewResponse {\n");
            sb.Append("  actions: ").Append(actions).Append("\n");
            sb.Append("  billing_documents: ").Append(billing_documents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionPreviewResponse);
        }

        /// <summary>
        /// Returns true if SubscriptionPreviewResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionPreviewResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPreviewResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.actions == input.actions ||
                    this.actions != null &&
                    input.actions != null &&
                    this.actions.SequenceEqual(input.actions)
                ) && 
                (
                    this.billing_documents == input.billing_documents ||
                    this.billing_documents != null &&
                    input.billing_documents != null &&
                    this.billing_documents.SequenceEqual(input.billing_documents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.actions != null)
                    hashCode = hashCode * 59 + this.actions.GetHashCode();
                if (this.billing_documents != null)
                    hashCode = hashCode * 59 + this.billing_documents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
