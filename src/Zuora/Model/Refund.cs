/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Refund
    /// </summary>
    [DataContract]
    public partial class Refund :  IEquatable<Refund>, IValidatableObject
    {
        /// <summary>
        /// Defines refund_method_type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RefundMethodTypeEnum
        {
            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 1,

            /// <summary>
            /// Enum Check for value: check
            /// </summary>
            [EnumMember(Value = "check")]
            Check = 2,

            /// <summary>
            /// Enum Wiretransfer for value: wire_transfer
            /// </summary>
            [EnumMember(Value = "wire_transfer")]
            Wiretransfer = 3,

            /// <summary>
            /// Enum Paypal for value: pay_pal
            /// </summary>
            [EnumMember(Value = "pay_pal")]
            Paypal = 4,

            /// <summary>
            /// Enum Creditcard for value: credit_card
            /// </summary>
            [EnumMember(Value = "credit_card")]
            Creditcard = 5,

            /// <summary>
            /// Enum Ccref for value: cc_ref
            /// </summary>
            [EnumMember(Value = "cc_ref")]
            Ccref = 6,

            /// <summary>
            /// Enum Achdebit for value: ach_debit
            /// </summary>
            [EnumMember(Value = "ach_debit")]
            Achdebit = 7,

            /// <summary>
            /// Enum Debitcard for value: debit_card
            /// </summary>
            [EnumMember(Value = "debit_card")]
            Debitcard = 8,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 9

        }

        /// <summary>
        /// Gets or Sets refund_method_type
        /// </summary>
        [DataMember(Name="refund_method_type", EmitDefaultValue=false)]
        public RefundMethodTypeEnum? refund_method_type { get; set; }
        /// <summary>
        /// The payment gateway state of the refund.
        /// </summary>
        /// <value>The payment gateway state of the refund.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GatewayStateEnum
        {
            /// <summary>
            /// Enum Markedforsubmission for value: marked_for_submission
            /// </summary>
            [EnumMember(Value = "marked_for_submission")]
            Markedforsubmission = 1,

            /// <summary>
            /// Enum Submitted for value: submitted
            /// </summary>
            [EnumMember(Value = "submitted")]
            Submitted = 2,

            /// <summary>
            /// Enum Settled for value: settled
            /// </summary>
            [EnumMember(Value = "settled")]
            Settled = 3,

            /// <summary>
            /// Enum Notsubmitted for value: not_submitted
            /// </summary>
            [EnumMember(Value = "not_submitted")]
            Notsubmitted = 4,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 5

        }

        /// <summary>
        /// The payment gateway state of the refund.
        /// </summary>
        /// <value>The payment gateway state of the refund.</value>
        [DataMember(Name="gateway_state", EmitDefaultValue=false)]
        public GatewayStateEnum? gateway_state { get; set; }
        /// <summary>
        /// The state of the refund.
        /// </summary>
        /// <value>The state of the refund.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            [EnumMember(Value = "draft")]
            Draft = 1,

            /// <summary>
            /// Enum Posted for value: posted
            /// </summary>
            [EnumMember(Value = "posted")]
            Posted = 2,

            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 3,

            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 4,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 5,

            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            Canceled = 6

        }

        /// <summary>
        /// The state of the refund.
        /// </summary>
        /// <value>The state of the refund.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? state { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Refund" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="amount">Refund amount..</param>
        /// <param name="description">An arbitrary string attached to the object. Often useful for displaying to users..</param>
        /// <param name="gatewayOptions">gatewayOptions.</param>
        /// <param name="refundDate">The date when the refund takes effect..</param>
        /// <param name="refundMethodType">refundMethodType.</param>
        /// <param name="reasonCode">User-provided reason for the refund..</param>
        /// <param name="statementDescriptor">A payment gateway-specific field used by Orbital, Vantiv and Verifi..</param>
        /// <param name="statementDescriptorPhone">A payment gateway-specific field used by Orbital, Vantiv and Verifi..</param>
        /// <param name="external">If true, indicates that this refund is not handled by Zuora..</param>
        /// <param name="referenceId">Transaction identifier returned by the payment gateway. You may use this field to reconcile refunds between your payment gateway and Zuora Payments..</param>
        /// <param name="secondReferenceId">A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments..</param>
        /// <param name="bankAccountAccount">An active account in your Zuora Chart of Accounts..</param>
        /// <param name="onAccountAccount">An active account in your Zuora Chart of Accounts..</param>
        /// <param name="unappliedPaymentAccount">An active account in your Zuora Chart of Accounts..</param>
        /// <param name="creditMemo">The related credit memo..</param>
        /// <param name="accountId">Identifier of the customer this refund is for, if one exists..</param>
        /// <param name="account">The account that owns the refund.</param>
        /// <param name="gatewayId">Identifier of the payment gateway that Zuora will use to authorize the payments that are made with this payment method. If you do not set this field, Zuora will use one of the following payment gateways instead: The default payment gateway of the customer account that owns the payment method, if the payment method is associated with a customer account or the default payment gateway of your Zuora tenant..</param>
        /// <param name="comment">Comments about the refund..</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="refundNumber">Human-readable identifier for this object; may be user-supplied..</param>
        /// <param name="stateTransitions">stateTransitions.</param>
        public Refund(string id = default(string), Dictionary<string, Object> customFields = default(Dictionary<string, Object>), decimal amount = default(decimal), string description = default(string), Dictionary<string, string> gatewayOptions = default(Dictionary<string, string>), DateTime refundDate = default(DateTime), RefundMethodTypeEnum? refundMethodType = default(RefundMethodTypeEnum?), string reasonCode = default(string), string statementDescriptor = default(string), string statementDescriptorPhone = default(string), bool external = default(bool), string referenceId = default(string), string secondReferenceId = default(string), string bankAccountAccount = default(string), string onAccountAccount = default(string), string unappliedPaymentAccount = default(string), RefundCreditMemoRequest creditMemo = default(RefundCreditMemoRequest), string accountId = default(string), Account account = default(Account), string gatewayId = default(string), string comment = default(string), PaymentMethod paymentMethod = default(PaymentMethod), string refundNumber = default(string), RefundStateTransitions stateTransitions = default(RefundStateTransitions))
        {
            this.credit_memo = creditMemo;
            this.account = account;
            this.id = id;
            this.custom_fields = customFields;
            this.amount = amount;
            this.description = description;
            this.gateway_options = gatewayOptions;
            this.refund_date = refundDate;
            this.refund_method_type = refundMethodType;
            this.reason_code = reasonCode;
            this.statement_descriptor = statementDescriptor;
            this.statement_descriptor_phone = statementDescriptorPhone;
            this.external = external;
            this.reference_id = referenceId;
            this.second_reference_id = secondReferenceId;
            this.bank_account_account = bankAccountAccount;
            this.on_account_account = onAccountAccount;
            this.unapplied_payment_account = unappliedPaymentAccount;
            this.credit_memo = creditMemo;
            this.account_id = accountId;
            this.account = account;
            this.gateway_id = gatewayId;
            this.comment = comment;
            this.payment_method = paymentMethod;
            this.refund_number = refundNumber;
            this.state_transitions = stateTransitions;
        }

        /// <summary>
        /// Gets or Sets id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>
        [DataMember(Name="updated_by_id", EmitDefaultValue=false)]
        public string updated_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public DateTime updated_time { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>
        [DataMember(Name="created_by_id", EmitDefaultValue=false)]
        public string created_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public DateTime created_time { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).
        /// </summary>
        /// <value>The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).</value>
        [DataMember(Name="custom_objects", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_objects { get; private set; }

        /// <summary>
        /// Refund amount.
        /// </summary>
        /// <value>Refund amount.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal amount { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Gets or Sets gateway_options
        /// </summary>
        [DataMember(Name="gateway_options", EmitDefaultValue=false)]
        public Dictionary<string, string> gateway_options { get; set; }

        /// <summary>
        /// The date when the refund takes effect.
        /// </summary>
        /// <value>The date when the refund takes effect.</value>
        [DataMember(Name="refund_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime refund_date { get; set; }


        /// <summary>
        /// Identifier for the payment, either &#x60;payment_number&#x60; or &#x60;payment_id.
        /// </summary>
        /// <value>Identifier for the payment, either &#x60;payment_number&#x60; or &#x60;payment_id.</value>
        [DataMember(Name="payment_id", EmitDefaultValue=false)]
        public string payment_id { get; private set; }

        /// <summary>
        /// User-provided reason for the refund.
        /// </summary>
        /// <value>User-provided reason for the refund.</value>
        [DataMember(Name="reason_code", EmitDefaultValue=false)]
        public string reason_code { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>
        [DataMember(Name="statement_descriptor", EmitDefaultValue=false)]
        public string statement_descriptor { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>
        [DataMember(Name="statement_descriptor_phone", EmitDefaultValue=false)]
        public string statement_descriptor_phone { get; set; }

        /// <summary>
        /// If true, indicates that this refund is not handled by Zuora.
        /// </summary>
        /// <value>If true, indicates that this refund is not handled by Zuora.</value>
        [DataMember(Name="external", EmitDefaultValue=false)]
        public bool external { get; set; }

        /// <summary>
        /// Transaction identifier returned by the payment gateway. You may use this field to reconcile refunds between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>Transaction identifier returned by the payment gateway. You may use this field to reconcile refunds between your payment gateway and Zuora Payments.</value>
        [DataMember(Name="reference_id", EmitDefaultValue=false)]
        public string reference_id { get; set; }

        /// <summary>
        /// A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.</value>
        [DataMember(Name="second_reference_id", EmitDefaultValue=false)]
        public string second_reference_id { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>
        [DataMember(Name="bank_account_account", EmitDefaultValue=false)]
        public string bank_account_account { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>
        [DataMember(Name="on_account_account", EmitDefaultValue=false)]
        public string on_account_account { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>
        [DataMember(Name="unapplied_payment_account", EmitDefaultValue=false)]
        public string unapplied_payment_account { get; set; }

        /// <summary>
        /// Identifier of the payment method used to create this refund.
        /// </summary>
        /// <value>Identifier of the payment method used to create this refund.</value>
        [DataMember(Name="payment_method_id", EmitDefaultValue=false)]
        public string payment_method_id { get; private set; }

        /// <summary>
        /// The related credit memo.
        /// </summary>
        /// <value>The related credit memo.</value>
        [DataMember(Name="credit_memo", EmitDefaultValue=true)]
        public RefundCreditMemoRequest credit_memo { get; set; }

        /// <summary>
        /// Identifier of the customer this refund is for, if one exists.
        /// </summary>
        /// <value>Identifier of the customer this refund is for, if one exists.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string account_id { get; set; }

        /// <summary>
        /// The account that owns the refund
        /// </summary>
        /// <value>The account that owns the refund</value>
        [DataMember(Name="account", EmitDefaultValue=true)]
        public Account account { get; set; }

        /// <summary>
        /// Identifier of the payment gateway that Zuora will use to authorize the payments that are made with this payment method. If you do not set this field, Zuora will use one of the following payment gateways instead: The default payment gateway of the customer account that owns the payment method, if the payment method is associated with a customer account or the default payment gateway of your Zuora tenant.
        /// </summary>
        /// <value>Identifier of the payment gateway that Zuora will use to authorize the payments that are made with this payment method. If you do not set this field, Zuora will use one of the following payment gateways instead: The default payment gateway of the customer account that owns the payment method, if the payment method is associated with a customer account or the default payment gateway of your Zuora tenant.</value>
        [DataMember(Name="gateway_id", EmitDefaultValue=false)]
        public string gateway_id { get; set; }

        /// <summary>
        /// Comments about the refund.
        /// </summary>
        /// <value>Comments about the refund.</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string comment { get; set; }

        /// <summary>
        /// Message returned by the payment gateway for this refund.
        /// </summary>
        /// <value>Message returned by the payment gateway for this refund.</value>
        [DataMember(Name="gateway_response", EmitDefaultValue=false)]
        public string gateway_response { get; private set; }

        /// <summary>
        /// Code returned by the payment gateway for this refund.
        /// </summary>
        /// <value>Code returned by the payment gateway for this refund.</value>
        [DataMember(Name="gateway_response_code", EmitDefaultValue=false)]
        public string gateway_response_code { get; private set; }


        /// <summary>
        /// Gets or Sets payment_method
        /// </summary>
        [DataMember(Name="payment_method", EmitDefaultValue=false)]
        public PaymentMethod payment_method { get; set; }

        /// <summary>
        /// Human-readable identifier for this object; may be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier for this object; may be user-supplied.</value>
        [DataMember(Name="refund_number", EmitDefaultValue=false)]
        public string refund_number { get; set; }

        /// <summary>
        /// Gets or Sets state_transitions
        /// </summary>
        [DataMember(Name="state_transitions", EmitDefaultValue=false)]
        public RefundStateTransitions state_transitions { get; set; }


        /// <summary>
        /// Gateway reconciliation reason.
        /// </summary>
        /// <value>Gateway reconciliation reason.</value>
        [DataMember(Name="gateway_reconciliation_reason", EmitDefaultValue=false)]
        public string gateway_reconciliation_reason { get; private set; }

        /// <summary>
        /// Gateway reconciliation state.
        /// </summary>
        /// <value>Gateway reconciliation state.</value>
        [DataMember(Name="gateway_reconciliation_status", EmitDefaultValue=false)]
        public string gateway_reconciliation_status { get; private set; }

        /// <summary>
        /// Identifier of the payout from the payment gateway.
        /// </summary>
        /// <value>Identifier of the payout from the payment gateway.</value>
        [DataMember(Name="payout_id", EmitDefaultValue=false)]
        public string payout_id { get; private set; }

        /// <summary>
        /// Gets or Sets applied_to
        /// </summary>
        [DataMember(Name="applied_to", EmitDefaultValue=false)]
        public List<RefundsAppliedToResponse> applied_to { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Refund {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  updated_by_id: ").Append(updated_by_id).Append("\n");
            sb.Append("  updated_time: ").Append(updated_time).Append("\n");
            sb.Append("  created_by_id: ").Append(created_by_id).Append("\n");
            sb.Append("  created_time: ").Append(created_time).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  custom_objects: ").Append(custom_objects).Append("\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  gateway_options: ").Append(gateway_options).Append("\n");
            sb.Append("  refund_date: ").Append(refund_date).Append("\n");
            sb.Append("  refund_method_type: ").Append(refund_method_type).Append("\n");
            sb.Append("  payment_id: ").Append(payment_id).Append("\n");
            sb.Append("  reason_code: ").Append(reason_code).Append("\n");
            sb.Append("  statement_descriptor: ").Append(statement_descriptor).Append("\n");
            sb.Append("  statement_descriptor_phone: ").Append(statement_descriptor_phone).Append("\n");
            sb.Append("  external: ").Append(external).Append("\n");
            sb.Append("  reference_id: ").Append(reference_id).Append("\n");
            sb.Append("  second_reference_id: ").Append(second_reference_id).Append("\n");
            sb.Append("  bank_account_account: ").Append(bank_account_account).Append("\n");
            sb.Append("  on_account_account: ").Append(on_account_account).Append("\n");
            sb.Append("  unapplied_payment_account: ").Append(unapplied_payment_account).Append("\n");
            sb.Append("  payment_method_id: ").Append(payment_method_id).Append("\n");
            sb.Append("  credit_memo: ").Append(credit_memo).Append("\n");
            sb.Append("  account_id: ").Append(account_id).Append("\n");
            sb.Append("  account: ").Append(account).Append("\n");
            sb.Append("  gateway_id: ").Append(gateway_id).Append("\n");
            sb.Append("  comment: ").Append(comment).Append("\n");
            sb.Append("  gateway_response: ").Append(gateway_response).Append("\n");
            sb.Append("  gateway_response_code: ").Append(gateway_response_code).Append("\n");
            sb.Append("  gateway_state: ").Append(gateway_state).Append("\n");
            sb.Append("  payment_method: ").Append(payment_method).Append("\n");
            sb.Append("  refund_number: ").Append(refund_number).Append("\n");
            sb.Append("  state_transitions: ").Append(state_transitions).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  gateway_reconciliation_reason: ").Append(gateway_reconciliation_reason).Append("\n");
            sb.Append("  gateway_reconciliation_status: ").Append(gateway_reconciliation_status).Append("\n");
            sb.Append("  payout_id: ").Append(payout_id).Append("\n");
            sb.Append("  applied_to: ").Append(applied_to).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Refund);
        }

        /// <summary>
        /// Returns true if Refund instances are equal
        /// </summary>
        /// <param name="input">Instance of Refund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Refund input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.updated_by_id == input.updated_by_id ||
                    (this.updated_by_id != null &&
                    this.updated_by_id.Equals(input.updated_by_id))
                ) && 
                (
                    this.updated_time == input.updated_time ||
                    (this.updated_time != null &&
                    this.updated_time.Equals(input.updated_time))
                ) && 
                (
                    this.created_by_id == input.created_by_id ||
                    (this.created_by_id != null &&
                    this.created_by_id.Equals(input.created_by_id))
                ) && 
                (
                    this.created_time == input.created_time ||
                    (this.created_time != null &&
                    this.created_time.Equals(input.created_time))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.custom_objects == input.custom_objects ||
                    this.custom_objects != null &&
                    input.custom_objects != null &&
                    this.custom_objects.SequenceEqual(input.custom_objects)
                ) && 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.gateway_options == input.gateway_options ||
                    this.gateway_options != null &&
                    input.gateway_options != null &&
                    this.gateway_options.SequenceEqual(input.gateway_options)
                ) && 
                (
                    this.refund_date == input.refund_date ||
                    (this.refund_date != null &&
                    this.refund_date.Equals(input.refund_date))
                ) && 
                (
                    this.refund_method_type == input.refund_method_type ||
                    (this.refund_method_type != null &&
                    this.refund_method_type.Equals(input.refund_method_type))
                ) && 
                (
                    this.payment_id == input.payment_id ||
                    (this.payment_id != null &&
                    this.payment_id.Equals(input.payment_id))
                ) && 
                (
                    this.reason_code == input.reason_code ||
                    (this.reason_code != null &&
                    this.reason_code.Equals(input.reason_code))
                ) && 
                (
                    this.statement_descriptor == input.statement_descriptor ||
                    (this.statement_descriptor != null &&
                    this.statement_descriptor.Equals(input.statement_descriptor))
                ) && 
                (
                    this.statement_descriptor_phone == input.statement_descriptor_phone ||
                    (this.statement_descriptor_phone != null &&
                    this.statement_descriptor_phone.Equals(input.statement_descriptor_phone))
                ) && 
                (
                    this.external == input.external ||
                    (this.external != null &&
                    this.external.Equals(input.external))
                ) && 
                (
                    this.reference_id == input.reference_id ||
                    (this.reference_id != null &&
                    this.reference_id.Equals(input.reference_id))
                ) && 
                (
                    this.second_reference_id == input.second_reference_id ||
                    (this.second_reference_id != null &&
                    this.second_reference_id.Equals(input.second_reference_id))
                ) && 
                (
                    this.bank_account_account == input.bank_account_account ||
                    (this.bank_account_account != null &&
                    this.bank_account_account.Equals(input.bank_account_account))
                ) && 
                (
                    this.on_account_account == input.on_account_account ||
                    (this.on_account_account != null &&
                    this.on_account_account.Equals(input.on_account_account))
                ) && 
                (
                    this.unapplied_payment_account == input.unapplied_payment_account ||
                    (this.unapplied_payment_account != null &&
                    this.unapplied_payment_account.Equals(input.unapplied_payment_account))
                ) && 
                (
                    this.payment_method_id == input.payment_method_id ||
                    (this.payment_method_id != null &&
                    this.payment_method_id.Equals(input.payment_method_id))
                ) && 
                (
                    this.credit_memo == input.credit_memo ||
                    (this.credit_memo != null &&
                    this.credit_memo.Equals(input.credit_memo))
                ) && 
                (
                    this.account_id == input.account_id ||
                    (this.account_id != null &&
                    this.account_id.Equals(input.account_id))
                ) && 
                (
                    this.account == input.account ||
                    (this.account != null &&
                    this.account.Equals(input.account))
                ) && 
                (
                    this.gateway_id == input.gateway_id ||
                    (this.gateway_id != null &&
                    this.gateway_id.Equals(input.gateway_id))
                ) && 
                (
                    this.comment == input.comment ||
                    (this.comment != null &&
                    this.comment.Equals(input.comment))
                ) && 
                (
                    this.gateway_response == input.gateway_response ||
                    (this.gateway_response != null &&
                    this.gateway_response.Equals(input.gateway_response))
                ) && 
                (
                    this.gateway_response_code == input.gateway_response_code ||
                    (this.gateway_response_code != null &&
                    this.gateway_response_code.Equals(input.gateway_response_code))
                ) && 
                (
                    this.gateway_state == input.gateway_state ||
                    (this.gateway_state != null &&
                    this.gateway_state.Equals(input.gateway_state))
                ) && 
                (
                    this.payment_method == input.payment_method ||
                    (this.payment_method != null &&
                    this.payment_method.Equals(input.payment_method))
                ) && 
                (
                    this.refund_number == input.refund_number ||
                    (this.refund_number != null &&
                    this.refund_number.Equals(input.refund_number))
                ) && 
                (
                    this.state_transitions == input.state_transitions ||
                    (this.state_transitions != null &&
                    this.state_transitions.Equals(input.state_transitions))
                ) && 
                (
                    this.state == input.state ||
                    (this.state != null &&
                    this.state.Equals(input.state))
                ) && 
                (
                    this.gateway_reconciliation_reason == input.gateway_reconciliation_reason ||
                    (this.gateway_reconciliation_reason != null &&
                    this.gateway_reconciliation_reason.Equals(input.gateway_reconciliation_reason))
                ) && 
                (
                    this.gateway_reconciliation_status == input.gateway_reconciliation_status ||
                    (this.gateway_reconciliation_status != null &&
                    this.gateway_reconciliation_status.Equals(input.gateway_reconciliation_status))
                ) && 
                (
                    this.payout_id == input.payout_id ||
                    (this.payout_id != null &&
                    this.payout_id.Equals(input.payout_id))
                ) && 
                (
                    this.applied_to == input.applied_to ||
                    this.applied_to != null &&
                    input.applied_to != null &&
                    this.applied_to.SequenceEqual(input.applied_to)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.updated_by_id != null)
                    hashCode = hashCode * 59 + this.updated_by_id.GetHashCode();
                if (this.updated_time != null)
                    hashCode = hashCode * 59 + this.updated_time.GetHashCode();
                if (this.created_by_id != null)
                    hashCode = hashCode * 59 + this.created_by_id.GetHashCode();
                if (this.created_time != null)
                    hashCode = hashCode * 59 + this.created_time.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.custom_objects != null)
                    hashCode = hashCode * 59 + this.custom_objects.GetHashCode();
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.gateway_options != null)
                    hashCode = hashCode * 59 + this.gateway_options.GetHashCode();
                if (this.refund_date != null)
                    hashCode = hashCode * 59 + this.refund_date.GetHashCode();
                if (this.refund_method_type != null)
                    hashCode = hashCode * 59 + this.refund_method_type.GetHashCode();
                if (this.payment_id != null)
                    hashCode = hashCode * 59 + this.payment_id.GetHashCode();
                if (this.reason_code != null)
                    hashCode = hashCode * 59 + this.reason_code.GetHashCode();
                if (this.statement_descriptor != null)
                    hashCode = hashCode * 59 + this.statement_descriptor.GetHashCode();
                if (this.statement_descriptor_phone != null)
                    hashCode = hashCode * 59 + this.statement_descriptor_phone.GetHashCode();
                if (this.external != null)
                    hashCode = hashCode * 59 + this.external.GetHashCode();
                if (this.reference_id != null)
                    hashCode = hashCode * 59 + this.reference_id.GetHashCode();
                if (this.second_reference_id != null)
                    hashCode = hashCode * 59 + this.second_reference_id.GetHashCode();
                if (this.bank_account_account != null)
                    hashCode = hashCode * 59 + this.bank_account_account.GetHashCode();
                if (this.on_account_account != null)
                    hashCode = hashCode * 59 + this.on_account_account.GetHashCode();
                if (this.unapplied_payment_account != null)
                    hashCode = hashCode * 59 + this.unapplied_payment_account.GetHashCode();
                if (this.payment_method_id != null)
                    hashCode = hashCode * 59 + this.payment_method_id.GetHashCode();
                if (this.credit_memo != null)
                    hashCode = hashCode * 59 + this.credit_memo.GetHashCode();
                if (this.account_id != null)
                    hashCode = hashCode * 59 + this.account_id.GetHashCode();
                if (this.account != null)
                    hashCode = hashCode * 59 + this.account.GetHashCode();
                if (this.gateway_id != null)
                    hashCode = hashCode * 59 + this.gateway_id.GetHashCode();
                if (this.comment != null)
                    hashCode = hashCode * 59 + this.comment.GetHashCode();
                if (this.gateway_response != null)
                    hashCode = hashCode * 59 + this.gateway_response.GetHashCode();
                if (this.gateway_response_code != null)
                    hashCode = hashCode * 59 + this.gateway_response_code.GetHashCode();
                if (this.gateway_state != null)
                    hashCode = hashCode * 59 + this.gateway_state.GetHashCode();
                if (this.payment_method != null)
                    hashCode = hashCode * 59 + this.payment_method.GetHashCode();
                if (this.refund_number != null)
                    hashCode = hashCode * 59 + this.refund_number.GetHashCode();
                if (this.state_transitions != null)
                    hashCode = hashCode * 59 + this.state_transitions.GetHashCode();
                if (this.state != null)
                    hashCode = hashCode * 59 + this.state.GetHashCode();
                if (this.gateway_reconciliation_reason != null)
                    hashCode = hashCode * 59 + this.gateway_reconciliation_reason.GetHashCode();
                if (this.gateway_reconciliation_status != null)
                    hashCode = hashCode * 59 + this.gateway_reconciliation_status.GetHashCode();
                if (this.payout_id != null)
                    hashCode = hashCode * 59 + this.payout_id.GetHashCode();
                if (this.applied_to != null)
                    hashCode = hashCode * 59 + this.applied_to.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
