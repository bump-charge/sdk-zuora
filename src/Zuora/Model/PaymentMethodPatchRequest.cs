/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// PaymentMethodPatchRequest
    /// </summary>
    [DataContract]
    public partial class PaymentMethodPatchRequest :  IEquatable<PaymentMethodPatchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodPatchRequest" /> class.
        /// </summary>
        /// <param name="billingDetails">billingDetails.</param>
        /// <param name="accountId">A customer account identifier..</param>
        /// <param name="accountNumber">A human-readable customer account identifier. It can be user-supplied..</param>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="card">Credit card information. When providing a card number, you must meet the requirements for PCI compliance. We strongly recommend using Zuora.js instead of interacting with this API directly..</param>
        /// <param name="ccRef">Credit Card Reference Transaction. See Supported payment methods for payment gateways that support this type of payment method..</param>
        /// <param name="mandate">mandate.</param>
        /// <param name="achDebit">If this is an ach_debit payment method, this hash contains details about the ACH debit bank account..</param>
        /// <param name="maximumPaymentAttempts">Maximum number of consecutive failed retry payment attempts using this payment method before retries are stopped..</param>
        /// <param name="paymentRetryInterval">The retry interval in hours..</param>
        /// <param name="deviceSessionId">Identifier of the device browser session..</param>
        public PaymentMethodPatchRequest(BillingDetails billingDetails = default(BillingDetails), string accountId = default(string), string accountNumber = default(string), Dictionary<string, Object> customFields = default(Dictionary<string, Object>), CardUpdate card = default(CardUpdate), CcRefUpdate ccRef = default(CcRefUpdate), CcRefMandate mandate = default(CcRefMandate), AchDebitUpdate achDebit = default(AchDebitUpdate), decimal maximumPaymentAttempts = default(decimal), int paymentRetryInterval = default(int), string deviceSessionId = default(string))
        {
            this.card = card;
            this.cc_ref = ccRef;
            this.mandate = mandate;
            this.ach_debit = achDebit;
            this.billing_details = billingDetails;
            this.account_id = accountId;
            this.account_number = accountNumber;
            this.custom_fields = customFields;
            this.card = card;
            this.cc_ref = ccRef;
            this.mandate = mandate;
            this.ach_debit = achDebit;
            this.maximum_payment_attempts = maximumPaymentAttempts;
            this.payment_retry_interval = paymentRetryInterval;
            this.device_session_id = deviceSessionId;
        }

        /// <summary>
        /// Gets or Sets billing_details
        /// </summary>
        [DataMember(Name="billing_details", EmitDefaultValue=false)]
        public BillingDetails billing_details { get; set; }

        /// <summary>
        /// A customer account identifier.
        /// </summary>
        /// <value>A customer account identifier.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string account_id { get; set; }

        /// <summary>
        /// A human-readable customer account identifier. It can be user-supplied.
        /// </summary>
        /// <value>A human-readable customer account identifier. It can be user-supplied.</value>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string account_number { get; set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// Credit card information. When providing a card number, you must meet the requirements for PCI compliance. We strongly recommend using Zuora.js instead of interacting with this API directly.
        /// </summary>
        /// <value>Credit card information. When providing a card number, you must meet the requirements for PCI compliance. We strongly recommend using Zuora.js instead of interacting with this API directly.</value>
        [DataMember(Name="card", EmitDefaultValue=true)]
        public CardUpdate card { get; set; }

        /// <summary>
        /// Credit Card Reference Transaction. See Supported payment methods for payment gateways that support this type of payment method.
        /// </summary>
        /// <value>Credit Card Reference Transaction. See Supported payment methods for payment gateways that support this type of payment method.</value>
        [DataMember(Name="cc_ref", EmitDefaultValue=true)]
        public CcRefUpdate cc_ref { get; set; }

        /// <summary>
        /// Gets or Sets mandate
        /// </summary>
        [DataMember(Name="mandate", EmitDefaultValue=true)]
        public CcRefMandate mandate { get; set; }

        /// <summary>
        /// If this is an ach_debit payment method, this hash contains details about the ACH debit bank account.
        /// </summary>
        /// <value>If this is an ach_debit payment method, this hash contains details about the ACH debit bank account.</value>
        [DataMember(Name="ach_debit", EmitDefaultValue=true)]
        public AchDebitUpdate ach_debit { get; set; }

        /// <summary>
        /// Maximum number of consecutive failed retry payment attempts using this payment method before retries are stopped.
        /// </summary>
        /// <value>Maximum number of consecutive failed retry payment attempts using this payment method before retries are stopped.</value>
        [DataMember(Name="maximum_payment_attempts", EmitDefaultValue=false)]
        public decimal maximum_payment_attempts { get; set; }

        /// <summary>
        /// The retry interval in hours.
        /// </summary>
        /// <value>The retry interval in hours.</value>
        [DataMember(Name="payment_retry_interval", EmitDefaultValue=false)]
        public int payment_retry_interval { get; set; }

        /// <summary>
        /// Identifier of the device browser session.
        /// </summary>
        /// <value>Identifier of the device browser session.</value>
        [DataMember(Name="device_session_id", EmitDefaultValue=false)]
        public string device_session_id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMethodPatchRequest {\n");
            sb.Append("  billing_details: ").Append(billing_details).Append("\n");
            sb.Append("  account_id: ").Append(account_id).Append("\n");
            sb.Append("  account_number: ").Append(account_number).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  card: ").Append(card).Append("\n");
            sb.Append("  cc_ref: ").Append(cc_ref).Append("\n");
            sb.Append("  mandate: ").Append(mandate).Append("\n");
            sb.Append("  ach_debit: ").Append(ach_debit).Append("\n");
            sb.Append("  maximum_payment_attempts: ").Append(maximum_payment_attempts).Append("\n");
            sb.Append("  payment_retry_interval: ").Append(payment_retry_interval).Append("\n");
            sb.Append("  device_session_id: ").Append(device_session_id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMethodPatchRequest);
        }

        /// <summary>
        /// Returns true if PaymentMethodPatchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMethodPatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethodPatchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.billing_details == input.billing_details ||
                    (this.billing_details != null &&
                    this.billing_details.Equals(input.billing_details))
                ) && 
                (
                    this.account_id == input.account_id ||
                    (this.account_id != null &&
                    this.account_id.Equals(input.account_id))
                ) && 
                (
                    this.account_number == input.account_number ||
                    (this.account_number != null &&
                    this.account_number.Equals(input.account_number))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.card == input.card ||
                    (this.card != null &&
                    this.card.Equals(input.card))
                ) && 
                (
                    this.cc_ref == input.cc_ref ||
                    (this.cc_ref != null &&
                    this.cc_ref.Equals(input.cc_ref))
                ) && 
                (
                    this.mandate == input.mandate ||
                    (this.mandate != null &&
                    this.mandate.Equals(input.mandate))
                ) && 
                (
                    this.ach_debit == input.ach_debit ||
                    (this.ach_debit != null &&
                    this.ach_debit.Equals(input.ach_debit))
                ) && 
                (
                    this.maximum_payment_attempts == input.maximum_payment_attempts ||
                    (this.maximum_payment_attempts != null &&
                    this.maximum_payment_attempts.Equals(input.maximum_payment_attempts))
                ) && 
                (
                    this.payment_retry_interval == input.payment_retry_interval ||
                    (this.payment_retry_interval != null &&
                    this.payment_retry_interval.Equals(input.payment_retry_interval))
                ) && 
                (
                    this.device_session_id == input.device_session_id ||
                    (this.device_session_id != null &&
                    this.device_session_id.Equals(input.device_session_id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.billing_details != null)
                    hashCode = hashCode * 59 + this.billing_details.GetHashCode();
                if (this.account_id != null)
                    hashCode = hashCode * 59 + this.account_id.GetHashCode();
                if (this.account_number != null)
                    hashCode = hashCode * 59 + this.account_number.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.card != null)
                    hashCode = hashCode * 59 + this.card.GetHashCode();
                if (this.cc_ref != null)
                    hashCode = hashCode * 59 + this.cc_ref.GetHashCode();
                if (this.mandate != null)
                    hashCode = hashCode * 59 + this.mandate.GetHashCode();
                if (this.ach_debit != null)
                    hashCode = hashCode * 59 + this.ach_debit.GetHashCode();
                if (this.maximum_payment_attempts != null)
                    hashCode = hashCode * 59 + this.maximum_payment_attempts.GetHashCode();
                if (this.payment_retry_interval != null)
                    hashCode = hashCode * 59 + this.payment_retry_interval.GetHashCode();
                if (this.device_session_id != null)
                    hashCode = hashCode * 59 + this.device_session_id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
