/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// SubscriptionPreviewExistingRequest
    /// </summary>
    [DataContract]
    public partial class SubscriptionPreviewExistingRequest :  IEquatable<SubscriptionPreviewExistingRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines metrics
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MetricsEnum
        {
            /// <summary>
            /// Enum Billingdocuments for value: billing_documents
            /// </summary>
            [EnumMember(Value = "billing_documents")]
            Billingdocuments = 1,

            /// <summary>
            /// Enum Deltametrics for value: delta_metrics
            /// </summary>
            [EnumMember(Value = "delta_metrics")]
            Deltametrics = 2

        }


        /// <summary>
        /// Specifies the metrics you want to preview.    You can preview metrics of billing documents, the order delta metrics, or both.
        /// </summary>
        /// <value>Specifies the metrics you want to preview.    You can preview metrics of billing documents, the order delta metrics, or both.</value>
        [DataMember(Name="metrics", EmitDefaultValue=false)]
        public List<MetricsEnum> metrics { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPreviewExistingRequest" /> class.
        /// </summary>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="description">Description of the subscription..</param>
        /// <param name="accountId">Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account..</param>
        /// <param name="accountNumber">Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account..</param>
        /// <param name="accountData">accountData.</param>
        /// <param name="numberOfPeriods">Specifies how many billing periods you want to preview..</param>
        /// <param name="termEnd">Indicates whether to preview the subscription till the end of the current term..</param>
        /// <param name="metrics">Specifies the metrics you want to preview.    You can preview metrics of billing documents, the order delta metrics, or both..</param>
        /// <param name="endDate">End date of the period for which you want to preview the subscription.</param>
        /// <param name="addSubscriptionPlans">Specify this field if you want to add one or multiple subscription plans to this subscription..</param>
        /// <param name="replaceSubscriptionPlans">Specify this field if you want to replace one or multiple subscription plans to this subscription. &lt;br /&gt;            **Note**: This field is currently not supported if you have Billing - Revenue Integration enabled. When Billing - Revenue Integration is enabled, the replace subscription plan type of order action will no longer be applicable in Zuora Billing. .</param>
        /// <param name="updateSubscriptionPlans">updateSubscriptionPlans.</param>
        /// <param name="removeSubscriptionPlans">Specify this field if you want to remove one or multiple subscription plans from this subscription..</param>
        public SubscriptionPreviewExistingRequest(Dictionary<string, Object> customFields = default(Dictionary<string, Object>), string description = default(string), string accountId = default(string), string accountNumber = default(string), SubscriptionPreviewAccountRequest accountData = default(SubscriptionPreviewAccountRequest), int numberOfPeriods = default(int), bool termEnd = default(bool), List<MetricsEnum> metrics = default(List<MetricsEnum>), DateTime endDate = default(DateTime), List<SubscriptionAddPlanPatchRequest> addSubscriptionPlans = default(List<SubscriptionAddPlanPatchRequest>), List<SubscriptionReplacePlanPatchRequest> replaceSubscriptionPlans = default(List<SubscriptionReplacePlanPatchRequest>), List<SubscriptionUpdatePlanPatchRequest> updateSubscriptionPlans = default(List<SubscriptionUpdatePlanPatchRequest>), List<SubscriptionRemovePlanPatchRequest> removeSubscriptionPlans = default(List<SubscriptionRemovePlanPatchRequest>))
        {
            this.custom_fields = customFields;
            this.description = description;
            this.account_id = accountId;
            this.account_number = accountNumber;
            this.account_data = accountData;
            this.number_of_periods = numberOfPeriods;
            this.term_end = termEnd;
            this.metrics = metrics;
            this.end_date = endDate;
            this.add_subscription_plans = addSubscriptionPlans;
            this.replace_subscription_plans = replaceSubscriptionPlans;
            this.update_subscription_plans = updateSubscriptionPlans;
            this.remove_subscription_plans = removeSubscriptionPlans;
        }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// Description of the subscription.
        /// </summary>
        /// <value>Description of the subscription.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string account_id { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.</value>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string account_number { get; set; }

        /// <summary>
        /// Gets or Sets account_data
        /// </summary>
        [DataMember(Name="account_data", EmitDefaultValue=false)]
        public SubscriptionPreviewAccountRequest account_data { get; set; }

        /// <summary>
        /// Specifies how many billing periods you want to preview.
        /// </summary>
        /// <value>Specifies how many billing periods you want to preview.</value>
        [DataMember(Name="number_of_periods", EmitDefaultValue=false)]
        public int number_of_periods { get; set; }

        /// <summary>
        /// Indicates whether to preview the subscription till the end of the current term.
        /// </summary>
        /// <value>Indicates whether to preview the subscription till the end of the current term.</value>
        [DataMember(Name="term_end", EmitDefaultValue=false)]
        public bool term_end { get; set; }


        /// <summary>
        /// End date of the period for which you want to preview the subscription
        /// </summary>
        /// <value>End date of the period for which you want to preview the subscription</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime end_date { get; set; }

        /// <summary>
        /// Specify this field if you want to add one or multiple subscription plans to this subscription.
        /// </summary>
        /// <value>Specify this field if you want to add one or multiple subscription plans to this subscription.</value>
        [DataMember(Name="add_subscription_plans", EmitDefaultValue=false)]
        public List<SubscriptionAddPlanPatchRequest> add_subscription_plans { get; set; }

        /// <summary>
        /// Specify this field if you want to replace one or multiple subscription plans to this subscription. &lt;br /&gt;            **Note**: This field is currently not supported if you have Billing - Revenue Integration enabled. When Billing - Revenue Integration is enabled, the replace subscription plan type of order action will no longer be applicable in Zuora Billing. 
        /// </summary>
        /// <value>Specify this field if you want to replace one or multiple subscription plans to this subscription. &lt;br /&gt;            **Note**: This field is currently not supported if you have Billing - Revenue Integration enabled. When Billing - Revenue Integration is enabled, the replace subscription plan type of order action will no longer be applicable in Zuora Billing. </value>
        [DataMember(Name="replace_subscription_plans", EmitDefaultValue=false)]
        public List<SubscriptionReplacePlanPatchRequest> replace_subscription_plans { get; set; }

        /// <summary>
        /// Gets or Sets update_subscription_plans
        /// </summary>
        [DataMember(Name="update_subscription_plans", EmitDefaultValue=false)]
        public List<SubscriptionUpdatePlanPatchRequest> update_subscription_plans { get; set; }

        /// <summary>
        /// Specify this field if you want to remove one or multiple subscription plans from this subscription.
        /// </summary>
        /// <value>Specify this field if you want to remove one or multiple subscription plans from this subscription.</value>
        [DataMember(Name="remove_subscription_plans", EmitDefaultValue=false)]
        public List<SubscriptionRemovePlanPatchRequest> remove_subscription_plans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPreviewExistingRequest {\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  account_id: ").Append(account_id).Append("\n");
            sb.Append("  account_number: ").Append(account_number).Append("\n");
            sb.Append("  account_data: ").Append(account_data).Append("\n");
            sb.Append("  number_of_periods: ").Append(number_of_periods).Append("\n");
            sb.Append("  term_end: ").Append(term_end).Append("\n");
            sb.Append("  metrics: ").Append(metrics).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  add_subscription_plans: ").Append(add_subscription_plans).Append("\n");
            sb.Append("  replace_subscription_plans: ").Append(replace_subscription_plans).Append("\n");
            sb.Append("  update_subscription_plans: ").Append(update_subscription_plans).Append("\n");
            sb.Append("  remove_subscription_plans: ").Append(remove_subscription_plans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionPreviewExistingRequest);
        }

        /// <summary>
        /// Returns true if SubscriptionPreviewExistingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionPreviewExistingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPreviewExistingRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.account_id == input.account_id ||
                    (this.account_id != null &&
                    this.account_id.Equals(input.account_id))
                ) && 
                (
                    this.account_number == input.account_number ||
                    (this.account_number != null &&
                    this.account_number.Equals(input.account_number))
                ) && 
                (
                    this.account_data == input.account_data ||
                    (this.account_data != null &&
                    this.account_data.Equals(input.account_data))
                ) && 
                (
                    this.number_of_periods == input.number_of_periods ||
                    (this.number_of_periods != null &&
                    this.number_of_periods.Equals(input.number_of_periods))
                ) && 
                (
                    this.term_end == input.term_end ||
                    (this.term_end != null &&
                    this.term_end.Equals(input.term_end))
                ) && 
                (
                    this.metrics == input.metrics ||
                    this.metrics != null &&
                    input.metrics != null &&
                    this.metrics.SequenceEqual(input.metrics)
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.add_subscription_plans == input.add_subscription_plans ||
                    this.add_subscription_plans != null &&
                    input.add_subscription_plans != null &&
                    this.add_subscription_plans.SequenceEqual(input.add_subscription_plans)
                ) && 
                (
                    this.replace_subscription_plans == input.replace_subscription_plans ||
                    this.replace_subscription_plans != null &&
                    input.replace_subscription_plans != null &&
                    this.replace_subscription_plans.SequenceEqual(input.replace_subscription_plans)
                ) && 
                (
                    this.update_subscription_plans == input.update_subscription_plans ||
                    this.update_subscription_plans != null &&
                    input.update_subscription_plans != null &&
                    this.update_subscription_plans.SequenceEqual(input.update_subscription_plans)
                ) && 
                (
                    this.remove_subscription_plans == input.remove_subscription_plans ||
                    this.remove_subscription_plans != null &&
                    input.remove_subscription_plans != null &&
                    this.remove_subscription_plans.SequenceEqual(input.remove_subscription_plans)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.account_id != null)
                    hashCode = hashCode * 59 + this.account_id.GetHashCode();
                if (this.account_number != null)
                    hashCode = hashCode * 59 + this.account_number.GetHashCode();
                if (this.account_data != null)
                    hashCode = hashCode * 59 + this.account_data.GetHashCode();
                if (this.number_of_periods != null)
                    hashCode = hashCode * 59 + this.number_of_periods.GetHashCode();
                if (this.term_end != null)
                    hashCode = hashCode * 59 + this.term_end.GetHashCode();
                if (this.metrics != null)
                    hashCode = hashCode * 59 + this.metrics.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.add_subscription_plans != null)
                    hashCode = hashCode * 59 + this.add_subscription_plans.GetHashCode();
                if (this.replace_subscription_plans != null)
                    hashCode = hashCode * 59 + this.replace_subscription_plans.GetHashCode();
                if (this.update_subscription_plans != null)
                    hashCode = hashCode * 59 + this.update_subscription_plans.GetHashCode();
                if (this.remove_subscription_plans != null)
                    hashCode = hashCode * 59 + this.remove_subscription_plans.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
