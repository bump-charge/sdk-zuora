/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// PaymentRunSummary
    /// </summary>
    [DataContract]
    public partial class PaymentRunSummary :  IEquatable<PaymentRunSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRunSummary" /> class.
        /// </summary>
        /// <param name="numberOfErrors">The number of payments not processed..</param>
        /// <param name="numberOfInvoices">The number of invoices processed..</param>
        /// <param name="numberOfPayments">The number of payments processed..</param>
        /// <param name="numberOfCreditMemos">The number of credit memos processed..</param>
        /// <param name="numberOfDebitMemos">The number of debit memos processed..</param>
        /// <param name="numberOfUnprocessedDebitMemos">The number of unprocessed debit memos..</param>
        /// <param name="numberOfUnappliedPayments">The number of unapplied payments..</param>
        /// <param name="numberOfUnprocessedReceivables">The number of receivables with positive remamining balances..</param>
        /// <param name="errorsTotal">The total number of all receivables with payments not processed..</param>
        /// <param name="invoicesTotal">The total number of all invoices..</param>
        /// <param name="paymentsTotal">The total number of all processed and unapplied payments..</param>
        /// <param name="unprocessedReceivablesTotal">The total number of positive remaining balances of all receivables..</param>
        public PaymentRunSummary(int numberOfErrors = default(int), int numberOfInvoices = default(int), int numberOfPayments = default(int), int numberOfCreditMemos = default(int), int numberOfDebitMemos = default(int), int numberOfUnprocessedDebitMemos = default(int), int numberOfUnappliedPayments = default(int), int numberOfUnprocessedReceivables = default(int), int errorsTotal = default(int), int invoicesTotal = default(int), int paymentsTotal = default(int), int unprocessedReceivablesTotal = default(int))
        {
            this.number_of_errors = numberOfErrors;
            this.number_of_invoices = numberOfInvoices;
            this.number_of_payments = numberOfPayments;
            this.number_of_credit_memos = numberOfCreditMemos;
            this.number_of_debit_memos = numberOfDebitMemos;
            this.number_of_unprocessed_debit_memos = numberOfUnprocessedDebitMemos;
            this.number_of_unapplied_payments = numberOfUnappliedPayments;
            this.number_of_unprocessed_receivables = numberOfUnprocessedReceivables;
            this.errors_total = errorsTotal;
            this.invoices_total = invoicesTotal;
            this.payments_total = paymentsTotal;
            this.unprocessed_receivables_total = unprocessedReceivablesTotal;
        }

        /// <summary>
        /// The number of payments not processed.
        /// </summary>
        /// <value>The number of payments not processed.</value>
        [DataMember(Name="number_of_errors", EmitDefaultValue=false)]
        public int number_of_errors { get; set; }

        /// <summary>
        /// The number of invoices processed.
        /// </summary>
        /// <value>The number of invoices processed.</value>
        [DataMember(Name="number_of_invoices", EmitDefaultValue=false)]
        public int number_of_invoices { get; set; }

        /// <summary>
        /// The number of payments processed.
        /// </summary>
        /// <value>The number of payments processed.</value>
        [DataMember(Name="number_of_payments", EmitDefaultValue=false)]
        public int number_of_payments { get; set; }

        /// <summary>
        /// The number of credit memos processed.
        /// </summary>
        /// <value>The number of credit memos processed.</value>
        [DataMember(Name="number_of_credit_memos", EmitDefaultValue=false)]
        public int number_of_credit_memos { get; set; }

        /// <summary>
        /// The number of debit memos processed.
        /// </summary>
        /// <value>The number of debit memos processed.</value>
        [DataMember(Name="number_of_debit_memos", EmitDefaultValue=false)]
        public int number_of_debit_memos { get; set; }

        /// <summary>
        /// The number of unprocessed debit memos.
        /// </summary>
        /// <value>The number of unprocessed debit memos.</value>
        [DataMember(Name="number_of_unprocessed_debit_memos", EmitDefaultValue=false)]
        public int number_of_unprocessed_debit_memos { get; set; }

        /// <summary>
        /// The number of unapplied payments.
        /// </summary>
        /// <value>The number of unapplied payments.</value>
        [DataMember(Name="number_of_unapplied_payments", EmitDefaultValue=false)]
        public int number_of_unapplied_payments { get; set; }

        /// <summary>
        /// The number of receivables with positive remamining balances.
        /// </summary>
        /// <value>The number of receivables with positive remamining balances.</value>
        [DataMember(Name="number_of_unprocessed_receivables", EmitDefaultValue=false)]
        public int number_of_unprocessed_receivables { get; set; }

        /// <summary>
        /// The total number of all receivables with payments not processed.
        /// </summary>
        /// <value>The total number of all receivables with payments not processed.</value>
        [DataMember(Name="errors_total", EmitDefaultValue=false)]
        public int errors_total { get; set; }

        /// <summary>
        /// The total number of all invoices.
        /// </summary>
        /// <value>The total number of all invoices.</value>
        [DataMember(Name="invoices_total", EmitDefaultValue=false)]
        public int invoices_total { get; set; }

        /// <summary>
        /// The total number of all processed and unapplied payments.
        /// </summary>
        /// <value>The total number of all processed and unapplied payments.</value>
        [DataMember(Name="payments_total", EmitDefaultValue=false)]
        public int payments_total { get; set; }

        /// <summary>
        /// The total number of positive remaining balances of all receivables.
        /// </summary>
        /// <value>The total number of positive remaining balances of all receivables.</value>
        [DataMember(Name="unprocessed_receivables_total", EmitDefaultValue=false)]
        public int unprocessed_receivables_total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRunSummary {\n");
            sb.Append("  number_of_errors: ").Append(number_of_errors).Append("\n");
            sb.Append("  number_of_invoices: ").Append(number_of_invoices).Append("\n");
            sb.Append("  number_of_payments: ").Append(number_of_payments).Append("\n");
            sb.Append("  number_of_credit_memos: ").Append(number_of_credit_memos).Append("\n");
            sb.Append("  number_of_debit_memos: ").Append(number_of_debit_memos).Append("\n");
            sb.Append("  number_of_unprocessed_debit_memos: ").Append(number_of_unprocessed_debit_memos).Append("\n");
            sb.Append("  number_of_unapplied_payments: ").Append(number_of_unapplied_payments).Append("\n");
            sb.Append("  number_of_unprocessed_receivables: ").Append(number_of_unprocessed_receivables).Append("\n");
            sb.Append("  errors_total: ").Append(errors_total).Append("\n");
            sb.Append("  invoices_total: ").Append(invoices_total).Append("\n");
            sb.Append("  payments_total: ").Append(payments_total).Append("\n");
            sb.Append("  unprocessed_receivables_total: ").Append(unprocessed_receivables_total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRunSummary);
        }

        /// <summary>
        /// Returns true if PaymentRunSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRunSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRunSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.number_of_errors == input.number_of_errors ||
                    (this.number_of_errors != null &&
                    this.number_of_errors.Equals(input.number_of_errors))
                ) && 
                (
                    this.number_of_invoices == input.number_of_invoices ||
                    (this.number_of_invoices != null &&
                    this.number_of_invoices.Equals(input.number_of_invoices))
                ) && 
                (
                    this.number_of_payments == input.number_of_payments ||
                    (this.number_of_payments != null &&
                    this.number_of_payments.Equals(input.number_of_payments))
                ) && 
                (
                    this.number_of_credit_memos == input.number_of_credit_memos ||
                    (this.number_of_credit_memos != null &&
                    this.number_of_credit_memos.Equals(input.number_of_credit_memos))
                ) && 
                (
                    this.number_of_debit_memos == input.number_of_debit_memos ||
                    (this.number_of_debit_memos != null &&
                    this.number_of_debit_memos.Equals(input.number_of_debit_memos))
                ) && 
                (
                    this.number_of_unprocessed_debit_memos == input.number_of_unprocessed_debit_memos ||
                    (this.number_of_unprocessed_debit_memos != null &&
                    this.number_of_unprocessed_debit_memos.Equals(input.number_of_unprocessed_debit_memos))
                ) && 
                (
                    this.number_of_unapplied_payments == input.number_of_unapplied_payments ||
                    (this.number_of_unapplied_payments != null &&
                    this.number_of_unapplied_payments.Equals(input.number_of_unapplied_payments))
                ) && 
                (
                    this.number_of_unprocessed_receivables == input.number_of_unprocessed_receivables ||
                    (this.number_of_unprocessed_receivables != null &&
                    this.number_of_unprocessed_receivables.Equals(input.number_of_unprocessed_receivables))
                ) && 
                (
                    this.errors_total == input.errors_total ||
                    (this.errors_total != null &&
                    this.errors_total.Equals(input.errors_total))
                ) && 
                (
                    this.invoices_total == input.invoices_total ||
                    (this.invoices_total != null &&
                    this.invoices_total.Equals(input.invoices_total))
                ) && 
                (
                    this.payments_total == input.payments_total ||
                    (this.payments_total != null &&
                    this.payments_total.Equals(input.payments_total))
                ) && 
                (
                    this.unprocessed_receivables_total == input.unprocessed_receivables_total ||
                    (this.unprocessed_receivables_total != null &&
                    this.unprocessed_receivables_total.Equals(input.unprocessed_receivables_total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.number_of_errors != null)
                    hashCode = hashCode * 59 + this.number_of_errors.GetHashCode();
                if (this.number_of_invoices != null)
                    hashCode = hashCode * 59 + this.number_of_invoices.GetHashCode();
                if (this.number_of_payments != null)
                    hashCode = hashCode * 59 + this.number_of_payments.GetHashCode();
                if (this.number_of_credit_memos != null)
                    hashCode = hashCode * 59 + this.number_of_credit_memos.GetHashCode();
                if (this.number_of_debit_memos != null)
                    hashCode = hashCode * 59 + this.number_of_debit_memos.GetHashCode();
                if (this.number_of_unprocessed_debit_memos != null)
                    hashCode = hashCode * 59 + this.number_of_unprocessed_debit_memos.GetHashCode();
                if (this.number_of_unapplied_payments != null)
                    hashCode = hashCode * 59 + this.number_of_unapplied_payments.GetHashCode();
                if (this.number_of_unprocessed_receivables != null)
                    hashCode = hashCode * 59 + this.number_of_unprocessed_receivables.GetHashCode();
                if (this.errors_total != null)
                    hashCode = hashCode * 59 + this.errors_total.GetHashCode();
                if (this.invoices_total != null)
                    hashCode = hashCode * 59 + this.invoices_total.GetHashCode();
                if (this.payments_total != null)
                    hashCode = hashCode * 59 + this.payments_total.GetHashCode();
                if (this.unprocessed_receivables_total != null)
                    hashCode = hashCode * 59 + this.unprocessed_receivables_total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
