/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// FlexibleBillingDocumentSettings
    /// </summary>
    [DataContract]
    public partial class FlexibleBillingDocumentSettings :  IEquatable<FlexibleBillingDocumentSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexibleBillingDocumentSettings" /> class.
        /// </summary>
        /// <param name="templateId">Identifier of the invoice template associated with this customer. Not applicable for debit memos or credit memos..</param>
        /// <param name="sequenceSetId">ID of the billing document sequence set..</param>
        public FlexibleBillingDocumentSettings(string templateId = default(string), string sequenceSetId = default(string))
        {
            this.template_id = templateId;
            this.sequence_set_id = sequenceSetId;
            this.template_id = templateId;
            this.sequence_set_id = sequenceSetId;
        }

        /// <summary>
        /// Identifier of the invoice template associated with this customer. Not applicable for debit memos or credit memos.
        /// </summary>
        /// <value>Identifier of the invoice template associated with this customer. Not applicable for debit memos or credit memos.</value>
        [DataMember(Name="template_id", EmitDefaultValue=true)]
        public string template_id { get; set; }

        /// <summary>
        /// ID of the billing document sequence set.
        /// </summary>
        /// <value>ID of the billing document sequence set.</value>
        [DataMember(Name="sequence_set_id", EmitDefaultValue=true)]
        public string sequence_set_id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlexibleBillingDocumentSettings {\n");
            sb.Append("  template_id: ").Append(template_id).Append("\n");
            sb.Append("  sequence_set_id: ").Append(sequence_set_id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlexibleBillingDocumentSettings);
        }

        /// <summary>
        /// Returns true if FlexibleBillingDocumentSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of FlexibleBillingDocumentSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexibleBillingDocumentSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.template_id == input.template_id ||
                    (this.template_id != null &&
                    this.template_id.Equals(input.template_id))
                ) && 
                (
                    this.sequence_set_id == input.sequence_set_id ||
                    (this.sequence_set_id != null &&
                    this.sequence_set_id.Equals(input.sequence_set_id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.template_id != null)
                    hashCode = hashCode * 59 + this.template_id.GetHashCode();
                if (this.sequence_set_id != null)
                    hashCode = hashCode * 59 + this.sequence_set_id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
