/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// SubscriptionPreviewRequest
    /// </summary>
    [DataContract]
    public partial class SubscriptionPreviewRequest :  IEquatable<SubscriptionPreviewRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines metrics
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MetricsEnum
        {
            /// <summary>
            /// Enum Billingdocuments for value: billing_documents
            /// </summary>
            [EnumMember(Value = "billing_documents")]
            Billingdocuments = 1,

            /// <summary>
            /// Enum Deltametrics for value: delta_metrics
            /// </summary>
            [EnumMember(Value = "delta_metrics")]
            Deltametrics = 2

        }


        /// <summary>
        /// Specifies the metrics you want to preview.    You can preivew metrics of billing documents, the order delta metrics, or both.
        /// </summary>
        /// <value>Specifies the metrics you want to preview.    You can preivew metrics of billing documents, the order delta metrics, or both.</value>
        [DataMember(Name="metrics", EmitDefaultValue=false)]
        public List<MetricsEnum> metrics { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPreviewRequest" /> class.
        /// </summary>
        /// <param name="invoiceOwnerAccountId">Identifier of the account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_data&#x60;..</param>
        /// <param name="invoiceOwnerAccountNumber">Identifier of the account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_data&#x60;..</param>
        /// <param name="invoiceOwnerAccountData">The information of the new account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_id&#x60;..</param>
        /// <param name="accountId">Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account. If you specify this field, do not specify &#x60;account_data&#x60;..</param>
        /// <param name="accountNumber">Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account. If you specify this field, do not specify &#x60;account_data&#x60;..</param>
        /// <param name="accountData">accountData.</param>
        /// <param name="autoRenew">If true, the subscription automatically renews at the end of the current term..</param>
        /// <param name="subscriptionNumber">Human-readable identifier of the subscription; maybe user-supplied..</param>
        /// <param name="initialTerm">Initial term information for the subscription..</param>
        /// <param name="renewalTerm">Renewal term information for the subscription.</param>
        /// <param name="startOn">startOn.</param>
        /// <param name="description">Description of the subscription. Often useful for displaying to users..</param>
        /// <param name="invoiceSeparately">Separates a single subscription from other subscriptions and creates an invoice for this subscription. If the value is &#x60;true&#x60;, the subscription is billed separately from other subscriptions. If the value is &#x60;false&#x60;, the subscription is included with other subscriptions in the account invoice..</param>
        /// <param name="processingOptions">processingOptions.</param>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="subscriptionPlans">The plans associated with the new subscription..</param>
        /// <param name="billToId">ID of the bill-to contact..</param>
        /// <param name="paymentTerms">The name of payment term associated with the invoice..</param>
        /// <param name="billingDocumentSettings">The billing document settings for the customer..</param>
        /// <param name="soldToId">ID of the sold-to contact..</param>
        /// <param name="numberOfPeriods">Specifies how many billing periods you want to preview..</param>
        /// <param name="termEnd">Indicates whether to preview the subscription till the end of the current term..</param>
        /// <param name="metrics">Specifies the metrics you want to preview.    You can preivew metrics of billing documents, the order delta metrics, or both..</param>
        /// <param name="endDate">End date of the period for which you want to preview the subscription.</param>
        public SubscriptionPreviewRequest(string invoiceOwnerAccountId = default(string), string invoiceOwnerAccountNumber = default(string), AccountCreateRequest invoiceOwnerAccountData = default(AccountCreateRequest), string accountId = default(string), string accountNumber = default(string), SubscriptionPreviewAccountRequest accountData = default(SubscriptionPreviewAccountRequest), bool autoRenew = default(bool), string subscriptionNumber = default(string), Term initialTerm = default(Term), Term renewalTerm = default(Term), StartOn startOn = default(StartOn), string description = default(string), bool invoiceSeparately = default(bool), ProcessingOptions processingOptions = default(ProcessingOptions), Dictionary<string, Object> customFields = default(Dictionary<string, Object>), List<SubscriptionPlanCreateRequest> subscriptionPlans = default(List<SubscriptionPlanCreateRequest>), string billToId = default(string), string paymentTerms = default(string), FlexibleBillingDocumentSettings billingDocumentSettings = default(FlexibleBillingDocumentSettings), string soldToId = default(string), int numberOfPeriods = default(int), bool termEnd = default(bool), List<MetricsEnum> metrics = default(List<MetricsEnum>), DateTime endDate = default(DateTime))
        {
            this.invoice_owner_account_data = invoiceOwnerAccountData;
            this.initial_term = initialTerm;
            this.renewal_term = renewalTerm;
            this.bill_to_id = billToId;
            this.payment_terms = paymentTerms;
            this.billing_document_settings = billingDocumentSettings;
            this.sold_to_id = soldToId;
            this.invoice_owner_account_id = invoiceOwnerAccountId;
            this.invoice_owner_account_number = invoiceOwnerAccountNumber;
            this.invoice_owner_account_data = invoiceOwnerAccountData;
            this.account_id = accountId;
            this.account_number = accountNumber;
            this.account_data = accountData;
            this.auto_renew = autoRenew;
            this.subscription_number = subscriptionNumber;
            this.initial_term = initialTerm;
            this.renewal_term = renewalTerm;
            this.start_on = startOn;
            this.description = description;
            this.invoice_separately = invoiceSeparately;
            this.processing_options = processingOptions;
            this.custom_fields = customFields;
            this.subscription_plans = subscriptionPlans;
            this.bill_to_id = billToId;
            this.payment_terms = paymentTerms;
            this.billing_document_settings = billingDocumentSettings;
            this.sold_to_id = soldToId;
            this.number_of_periods = numberOfPeriods;
            this.term_end = termEnd;
            this.metrics = metrics;
            this.end_date = endDate;
        }

        /// <summary>
        /// Identifier of the account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_data&#x60;.
        /// </summary>
        /// <value>Identifier of the account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_data&#x60;.</value>
        [DataMember(Name="invoice_owner_account_id", EmitDefaultValue=false)]
        public string invoice_owner_account_id { get; set; }

        /// <summary>
        /// Identifier of the account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_data&#x60;.
        /// </summary>
        /// <value>Identifier of the account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_data&#x60;.</value>
        [DataMember(Name="invoice_owner_account_number", EmitDefaultValue=false)]
        public string invoice_owner_account_number { get; set; }

        /// <summary>
        /// The information of the new account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_id&#x60;.
        /// </summary>
        /// <value>The information of the new account that owns the invoice associated with this subscription. If you specify this field, do not specify &#x60;invoice_owner_account_id&#x60;.</value>
        [DataMember(Name="invoice_owner_account_data", EmitDefaultValue=true)]
        public AccountCreateRequest invoice_owner_account_data { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account. If you specify this field, do not specify &#x60;account_data&#x60;.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account. If you specify this field, do not specify &#x60;account_data&#x60;.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string account_id { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account. If you specify this field, do not specify &#x60;account_data&#x60;.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account. If you specify this field, do not specify &#x60;account_data&#x60;.</value>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string account_number { get; set; }

        /// <summary>
        /// Gets or Sets account_data
        /// </summary>
        [DataMember(Name="account_data", EmitDefaultValue=false)]
        public SubscriptionPreviewAccountRequest account_data { get; set; }

        /// <summary>
        /// If true, the subscription automatically renews at the end of the current term.
        /// </summary>
        /// <value>If true, the subscription automatically renews at the end of the current term.</value>
        [DataMember(Name="auto_renew", EmitDefaultValue=false)]
        public bool auto_renew { get; set; }

        /// <summary>
        /// Human-readable identifier of the subscription; maybe user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the subscription; maybe user-supplied.</value>
        [DataMember(Name="subscription_number", EmitDefaultValue=false)]
        public string subscription_number { get; set; }

        /// <summary>
        /// Initial term information for the subscription.
        /// </summary>
        /// <value>Initial term information for the subscription.</value>
        [DataMember(Name="initial_term", EmitDefaultValue=true)]
        public Term initial_term { get; set; }

        /// <summary>
        /// Renewal term information for the subscription
        /// </summary>
        /// <value>Renewal term information for the subscription</value>
        [DataMember(Name="renewal_term", EmitDefaultValue=true)]
        public Term renewal_term { get; set; }

        /// <summary>
        /// Gets or Sets start_on
        /// </summary>
        [DataMember(Name="start_on", EmitDefaultValue=false)]
        public StartOn start_on { get; set; }

        /// <summary>
        /// Description of the subscription. Often useful for displaying to users.
        /// </summary>
        /// <value>Description of the subscription. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Separates a single subscription from other subscriptions and creates an invoice for this subscription. If the value is &#x60;true&#x60;, the subscription is billed separately from other subscriptions. If the value is &#x60;false&#x60;, the subscription is included with other subscriptions in the account invoice.
        /// </summary>
        /// <value>Separates a single subscription from other subscriptions and creates an invoice for this subscription. If the value is &#x60;true&#x60;, the subscription is billed separately from other subscriptions. If the value is &#x60;false&#x60;, the subscription is included with other subscriptions in the account invoice.</value>
        [DataMember(Name="invoice_separately", EmitDefaultValue=false)]
        public bool invoice_separately { get; set; }

        /// <summary>
        /// Gets or Sets processing_options
        /// </summary>
        [DataMember(Name="processing_options", EmitDefaultValue=false)]
        public ProcessingOptions processing_options { get; set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// The plans associated with the new subscription.
        /// </summary>
        /// <value>The plans associated with the new subscription.</value>
        [DataMember(Name="subscription_plans", EmitDefaultValue=false)]
        public List<SubscriptionPlanCreateRequest> subscription_plans { get; set; }

        /// <summary>
        /// ID of the bill-to contact.
        /// </summary>
        /// <value>ID of the bill-to contact.</value>
        [DataMember(Name="bill_to_id", EmitDefaultValue=true)]
        public string bill_to_id { get; set; }

        /// <summary>
        /// The name of payment term associated with the invoice.
        /// </summary>
        /// <value>The name of payment term associated with the invoice.</value>
        [DataMember(Name="payment_terms", EmitDefaultValue=true)]
        public string payment_terms { get; set; }

        /// <summary>
        /// The billing address for the customer.
        /// </summary>
        /// <value>The billing address for the customer.</value>
        [DataMember(Name="bill_to", EmitDefaultValue=true)]
        public Contact bill_to { get; private set; }

        /// <summary>
        /// The billing document settings for the customer.
        /// </summary>
        /// <value>The billing document settings for the customer.</value>
        [DataMember(Name="billing_document_settings", EmitDefaultValue=true)]
        public FlexibleBillingDocumentSettings billing_document_settings { get; set; }

        /// <summary>
        /// ID of the sold-to contact.
        /// </summary>
        /// <value>ID of the sold-to contact.</value>
        [DataMember(Name="sold_to_id", EmitDefaultValue=true)]
        public string sold_to_id { get; set; }

        /// <summary>
        /// The selling address for the customer.
        /// </summary>
        /// <value>The selling address for the customer.</value>
        [DataMember(Name="sold_to", EmitDefaultValue=true)]
        public Contact sold_to { get; private set; }

        /// <summary>
        /// Specifies how many billing periods you want to preview.
        /// </summary>
        /// <value>Specifies how many billing periods you want to preview.</value>
        [DataMember(Name="number_of_periods", EmitDefaultValue=false)]
        public int number_of_periods { get; set; }

        /// <summary>
        /// Indicates whether to preview the subscription till the end of the current term.
        /// </summary>
        /// <value>Indicates whether to preview the subscription till the end of the current term.</value>
        [DataMember(Name="term_end", EmitDefaultValue=false)]
        public bool term_end { get; set; }


        /// <summary>
        /// End date of the period for which you want to preview the subscription
        /// </summary>
        /// <value>End date of the period for which you want to preview the subscription</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime end_date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPreviewRequest {\n");
            sb.Append("  invoice_owner_account_id: ").Append(invoice_owner_account_id).Append("\n");
            sb.Append("  invoice_owner_account_number: ").Append(invoice_owner_account_number).Append("\n");
            sb.Append("  invoice_owner_account_data: ").Append(invoice_owner_account_data).Append("\n");
            sb.Append("  account_id: ").Append(account_id).Append("\n");
            sb.Append("  account_number: ").Append(account_number).Append("\n");
            sb.Append("  account_data: ").Append(account_data).Append("\n");
            sb.Append("  auto_renew: ").Append(auto_renew).Append("\n");
            sb.Append("  subscription_number: ").Append(subscription_number).Append("\n");
            sb.Append("  initial_term: ").Append(initial_term).Append("\n");
            sb.Append("  renewal_term: ").Append(renewal_term).Append("\n");
            sb.Append("  start_on: ").Append(start_on).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  invoice_separately: ").Append(invoice_separately).Append("\n");
            sb.Append("  processing_options: ").Append(processing_options).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  subscription_plans: ").Append(subscription_plans).Append("\n");
            sb.Append("  bill_to_id: ").Append(bill_to_id).Append("\n");
            sb.Append("  payment_terms: ").Append(payment_terms).Append("\n");
            sb.Append("  bill_to: ").Append(bill_to).Append("\n");
            sb.Append("  billing_document_settings: ").Append(billing_document_settings).Append("\n");
            sb.Append("  sold_to_id: ").Append(sold_to_id).Append("\n");
            sb.Append("  sold_to: ").Append(sold_to).Append("\n");
            sb.Append("  number_of_periods: ").Append(number_of_periods).Append("\n");
            sb.Append("  term_end: ").Append(term_end).Append("\n");
            sb.Append("  metrics: ").Append(metrics).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionPreviewRequest);
        }

        /// <summary>
        /// Returns true if SubscriptionPreviewRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionPreviewRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPreviewRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.invoice_owner_account_id == input.invoice_owner_account_id ||
                    (this.invoice_owner_account_id != null &&
                    this.invoice_owner_account_id.Equals(input.invoice_owner_account_id))
                ) && 
                (
                    this.invoice_owner_account_number == input.invoice_owner_account_number ||
                    (this.invoice_owner_account_number != null &&
                    this.invoice_owner_account_number.Equals(input.invoice_owner_account_number))
                ) && 
                (
                    this.invoice_owner_account_data == input.invoice_owner_account_data ||
                    (this.invoice_owner_account_data != null &&
                    this.invoice_owner_account_data.Equals(input.invoice_owner_account_data))
                ) && 
                (
                    this.account_id == input.account_id ||
                    (this.account_id != null &&
                    this.account_id.Equals(input.account_id))
                ) && 
                (
                    this.account_number == input.account_number ||
                    (this.account_number != null &&
                    this.account_number.Equals(input.account_number))
                ) && 
                (
                    this.account_data == input.account_data ||
                    (this.account_data != null &&
                    this.account_data.Equals(input.account_data))
                ) && 
                (
                    this.auto_renew == input.auto_renew ||
                    (this.auto_renew != null &&
                    this.auto_renew.Equals(input.auto_renew))
                ) && 
                (
                    this.subscription_number == input.subscription_number ||
                    (this.subscription_number != null &&
                    this.subscription_number.Equals(input.subscription_number))
                ) && 
                (
                    this.initial_term == input.initial_term ||
                    (this.initial_term != null &&
                    this.initial_term.Equals(input.initial_term))
                ) && 
                (
                    this.renewal_term == input.renewal_term ||
                    (this.renewal_term != null &&
                    this.renewal_term.Equals(input.renewal_term))
                ) && 
                (
                    this.start_on == input.start_on ||
                    (this.start_on != null &&
                    this.start_on.Equals(input.start_on))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.invoice_separately == input.invoice_separately ||
                    (this.invoice_separately != null &&
                    this.invoice_separately.Equals(input.invoice_separately))
                ) && 
                (
                    this.processing_options == input.processing_options ||
                    (this.processing_options != null &&
                    this.processing_options.Equals(input.processing_options))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.subscription_plans == input.subscription_plans ||
                    this.subscription_plans != null &&
                    input.subscription_plans != null &&
                    this.subscription_plans.SequenceEqual(input.subscription_plans)
                ) && 
                (
                    this.bill_to_id == input.bill_to_id ||
                    (this.bill_to_id != null &&
                    this.bill_to_id.Equals(input.bill_to_id))
                ) && 
                (
                    this.payment_terms == input.payment_terms ||
                    (this.payment_terms != null &&
                    this.payment_terms.Equals(input.payment_terms))
                ) && 
                (
                    this.bill_to == input.bill_to ||
                    (this.bill_to != null &&
                    this.bill_to.Equals(input.bill_to))
                ) && 
                (
                    this.billing_document_settings == input.billing_document_settings ||
                    (this.billing_document_settings != null &&
                    this.billing_document_settings.Equals(input.billing_document_settings))
                ) && 
                (
                    this.sold_to_id == input.sold_to_id ||
                    (this.sold_to_id != null &&
                    this.sold_to_id.Equals(input.sold_to_id))
                ) && 
                (
                    this.sold_to == input.sold_to ||
                    (this.sold_to != null &&
                    this.sold_to.Equals(input.sold_to))
                ) && 
                (
                    this.number_of_periods == input.number_of_periods ||
                    (this.number_of_periods != null &&
                    this.number_of_periods.Equals(input.number_of_periods))
                ) && 
                (
                    this.term_end == input.term_end ||
                    (this.term_end != null &&
                    this.term_end.Equals(input.term_end))
                ) && 
                (
                    this.metrics == input.metrics ||
                    this.metrics != null &&
                    input.metrics != null &&
                    this.metrics.SequenceEqual(input.metrics)
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.invoice_owner_account_id != null)
                    hashCode = hashCode * 59 + this.invoice_owner_account_id.GetHashCode();
                if (this.invoice_owner_account_number != null)
                    hashCode = hashCode * 59 + this.invoice_owner_account_number.GetHashCode();
                if (this.invoice_owner_account_data != null)
                    hashCode = hashCode * 59 + this.invoice_owner_account_data.GetHashCode();
                if (this.account_id != null)
                    hashCode = hashCode * 59 + this.account_id.GetHashCode();
                if (this.account_number != null)
                    hashCode = hashCode * 59 + this.account_number.GetHashCode();
                if (this.account_data != null)
                    hashCode = hashCode * 59 + this.account_data.GetHashCode();
                if (this.auto_renew != null)
                    hashCode = hashCode * 59 + this.auto_renew.GetHashCode();
                if (this.subscription_number != null)
                    hashCode = hashCode * 59 + this.subscription_number.GetHashCode();
                if (this.initial_term != null)
                    hashCode = hashCode * 59 + this.initial_term.GetHashCode();
                if (this.renewal_term != null)
                    hashCode = hashCode * 59 + this.renewal_term.GetHashCode();
                if (this.start_on != null)
                    hashCode = hashCode * 59 + this.start_on.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.invoice_separately != null)
                    hashCode = hashCode * 59 + this.invoice_separately.GetHashCode();
                if (this.processing_options != null)
                    hashCode = hashCode * 59 + this.processing_options.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.subscription_plans != null)
                    hashCode = hashCode * 59 + this.subscription_plans.GetHashCode();
                if (this.bill_to_id != null)
                    hashCode = hashCode * 59 + this.bill_to_id.GetHashCode();
                if (this.payment_terms != null)
                    hashCode = hashCode * 59 + this.payment_terms.GetHashCode();
                if (this.bill_to != null)
                    hashCode = hashCode * 59 + this.bill_to.GetHashCode();
                if (this.billing_document_settings != null)
                    hashCode = hashCode * 59 + this.billing_document_settings.GetHashCode();
                if (this.sold_to_id != null)
                    hashCode = hashCode * 59 + this.sold_to_id.GetHashCode();
                if (this.sold_to != null)
                    hashCode = hashCode * 59 + this.sold_to.GetHashCode();
                if (this.number_of_periods != null)
                    hashCode = hashCode * 59 + this.number_of_periods.GetHashCode();
                if (this.term_end != null)
                    hashCode = hashCode * 59 + this.term_end.GetHashCode();
                if (this.metrics != null)
                    hashCode = hashCode * 59 + this.metrics.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
