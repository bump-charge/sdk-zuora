/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// The recurring components of a price such as interval and usage.
    /// </summary>
    [DataContract]
    public partial class Recurring :  IEquatable<Recurring>, IValidatableObject
    {
        /// <summary>
        /// Specifies on which day or the month or day of the week a customer shall be billed.
        /// </summary>
        /// <value>Specifies on which day or the month or day of the week a customer shall be billed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecurringOnEnum
        {
            /// <summary>
            /// Enum _1 for value: _1
            /// </summary>
            [EnumMember(Value = "_1")]
            _1 = 1,

            /// <summary>
            /// Enum _2 for value: _2
            /// </summary>
            [EnumMember(Value = "_2")]
            _2 = 2,

            /// <summary>
            /// Enum _3 for value: _3
            /// </summary>
            [EnumMember(Value = "_3")]
            _3 = 3,

            /// <summary>
            /// Enum _4 for value: _4
            /// </summary>
            [EnumMember(Value = "_4")]
            _4 = 4,

            /// <summary>
            /// Enum _5 for value: _5
            /// </summary>
            [EnumMember(Value = "_5")]
            _5 = 5,

            /// <summary>
            /// Enum _6 for value: _6
            /// </summary>
            [EnumMember(Value = "_6")]
            _6 = 6,

            /// <summary>
            /// Enum _7 for value: _7
            /// </summary>
            [EnumMember(Value = "_7")]
            _7 = 7,

            /// <summary>
            /// Enum _8 for value: _8
            /// </summary>
            [EnumMember(Value = "_8")]
            _8 = 8,

            /// <summary>
            /// Enum _9 for value: _9
            /// </summary>
            [EnumMember(Value = "_9")]
            _9 = 9,

            /// <summary>
            /// Enum _10 for value: _10
            /// </summary>
            [EnumMember(Value = "_10")]
            _10 = 10,

            /// <summary>
            /// Enum _11 for value: _11
            /// </summary>
            [EnumMember(Value = "_11")]
            _11 = 11,

            /// <summary>
            /// Enum _12 for value: _12
            /// </summary>
            [EnumMember(Value = "_12")]
            _12 = 12,

            /// <summary>
            /// Enum _13 for value: _13
            /// </summary>
            [EnumMember(Value = "_13")]
            _13 = 13,

            /// <summary>
            /// Enum _14 for value: _14
            /// </summary>
            [EnumMember(Value = "_14")]
            _14 = 14,

            /// <summary>
            /// Enum _15 for value: _15
            /// </summary>
            [EnumMember(Value = "_15")]
            _15 = 15,

            /// <summary>
            /// Enum _16 for value: _16
            /// </summary>
            [EnumMember(Value = "_16")]
            _16 = 16,

            /// <summary>
            /// Enum _17 for value: _17
            /// </summary>
            [EnumMember(Value = "_17")]
            _17 = 17,

            /// <summary>
            /// Enum _18 for value: _18
            /// </summary>
            [EnumMember(Value = "_18")]
            _18 = 18,

            /// <summary>
            /// Enum _19 for value: _19
            /// </summary>
            [EnumMember(Value = "_19")]
            _19 = 19,

            /// <summary>
            /// Enum _20 for value: _20
            /// </summary>
            [EnumMember(Value = "_20")]
            _20 = 20,

            /// <summary>
            /// Enum _21 for value: _21
            /// </summary>
            [EnumMember(Value = "_21")]
            _21 = 21,

            /// <summary>
            /// Enum _22 for value: _22
            /// </summary>
            [EnumMember(Value = "_22")]
            _22 = 22,

            /// <summary>
            /// Enum _23 for value: _23
            /// </summary>
            [EnumMember(Value = "_23")]
            _23 = 23,

            /// <summary>
            /// Enum _24 for value: _24
            /// </summary>
            [EnumMember(Value = "_24")]
            _24 = 24,

            /// <summary>
            /// Enum _25 for value: _25
            /// </summary>
            [EnumMember(Value = "_25")]
            _25 = 25,

            /// <summary>
            /// Enum _26 for value: _26
            /// </summary>
            [EnumMember(Value = "_26")]
            _26 = 26,

            /// <summary>
            /// Enum _27 for value: _27
            /// </summary>
            [EnumMember(Value = "_27")]
            _27 = 27,

            /// <summary>
            /// Enum _28 for value: _28
            /// </summary>
            [EnumMember(Value = "_28")]
            _28 = 28,

            /// <summary>
            /// Enum _29 for value: _29
            /// </summary>
            [EnumMember(Value = "_29")]
            _29 = 29,

            /// <summary>
            /// Enum _30 for value: _30
            /// </summary>
            [EnumMember(Value = "_30")]
            _30 = 30,

            /// <summary>
            /// Enum _31 for value: _31
            /// </summary>
            [EnumMember(Value = "_31")]
            _31 = 31,

            /// <summary>
            /// Enum Subscriptionitemstartday for value: subscription_item_start_day
            /// </summary>
            [EnumMember(Value = "subscription_item_start_day")]
            Subscriptionitemstartday = 32,

            /// <summary>
            /// Enum Accountcycledate for value: account_cycle_date
            /// </summary>
            [EnumMember(Value = "account_cycle_date")]
            Accountcycledate = 33,

            /// <summary>
            /// Enum Subscriptionstartday for value: subscription_start_day
            /// </summary>
            [EnumMember(Value = "subscription_start_day")]
            Subscriptionstartday = 34,

            /// <summary>
            /// Enum Termendday for value: term_end_day
            /// </summary>
            [EnumMember(Value = "term_end_day")]
            Termendday = 35,

            /// <summary>
            /// Enum Monday for value: monday
            /// </summary>
            [EnumMember(Value = "monday")]
            Monday = 36,

            /// <summary>
            /// Enum Tuesday for value: tuesday
            /// </summary>
            [EnumMember(Value = "tuesday")]
            Tuesday = 37,

            /// <summary>
            /// Enum Wednesday for value: wednesday
            /// </summary>
            [EnumMember(Value = "wednesday")]
            Wednesday = 38,

            /// <summary>
            /// Enum Thursday for value: thursday
            /// </summary>
            [EnumMember(Value = "thursday")]
            Thursday = 39,

            /// <summary>
            /// Enum Friday for value: friday
            /// </summary>
            [EnumMember(Value = "friday")]
            Friday = 40,

            /// <summary>
            /// Enum Saturday for value: saturday
            /// </summary>
            [EnumMember(Value = "saturday")]
            Saturday = 41,

            /// <summary>
            /// Enum Sunday for value: sunday
            /// </summary>
            [EnumMember(Value = "sunday")]
            Sunday = 42

        }

        /// <summary>
        /// Specifies on which day or the month or day of the week a customer shall be billed.
        /// </summary>
        /// <value>Specifies on which day or the month or day of the week a customer shall be billed.</value>
        [DataMember(Name="recurring_on", EmitDefaultValue=false)]
        public RecurringOnEnum? recurring_on { get; set; }
        /// <summary>
        /// Specifies on which day or the month or day of the week a customer shall be billed.
        /// </summary>
        /// <value>Specifies on which day or the month or day of the week a customer shall be billed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OnEnum
        {
            /// <summary>
            /// Enum _1 for value: _1
            /// </summary>
            [EnumMember(Value = "_1")]
            _1 = 1,

            /// <summary>
            /// Enum _2 for value: _2
            /// </summary>
            [EnumMember(Value = "_2")]
            _2 = 2,

            /// <summary>
            /// Enum _3 for value: _3
            /// </summary>
            [EnumMember(Value = "_3")]
            _3 = 3,

            /// <summary>
            /// Enum _4 for value: _4
            /// </summary>
            [EnumMember(Value = "_4")]
            _4 = 4,

            /// <summary>
            /// Enum _5 for value: _5
            /// </summary>
            [EnumMember(Value = "_5")]
            _5 = 5,

            /// <summary>
            /// Enum _6 for value: _6
            /// </summary>
            [EnumMember(Value = "_6")]
            _6 = 6,

            /// <summary>
            /// Enum _7 for value: _7
            /// </summary>
            [EnumMember(Value = "_7")]
            _7 = 7,

            /// <summary>
            /// Enum _8 for value: _8
            /// </summary>
            [EnumMember(Value = "_8")]
            _8 = 8,

            /// <summary>
            /// Enum _9 for value: _9
            /// </summary>
            [EnumMember(Value = "_9")]
            _9 = 9,

            /// <summary>
            /// Enum _10 for value: _10
            /// </summary>
            [EnumMember(Value = "_10")]
            _10 = 10,

            /// <summary>
            /// Enum _11 for value: _11
            /// </summary>
            [EnumMember(Value = "_11")]
            _11 = 11,

            /// <summary>
            /// Enum _12 for value: _12
            /// </summary>
            [EnumMember(Value = "_12")]
            _12 = 12,

            /// <summary>
            /// Enum _13 for value: _13
            /// </summary>
            [EnumMember(Value = "_13")]
            _13 = 13,

            /// <summary>
            /// Enum _14 for value: _14
            /// </summary>
            [EnumMember(Value = "_14")]
            _14 = 14,

            /// <summary>
            /// Enum _15 for value: _15
            /// </summary>
            [EnumMember(Value = "_15")]
            _15 = 15,

            /// <summary>
            /// Enum _16 for value: _16
            /// </summary>
            [EnumMember(Value = "_16")]
            _16 = 16,

            /// <summary>
            /// Enum _17 for value: _17
            /// </summary>
            [EnumMember(Value = "_17")]
            _17 = 17,

            /// <summary>
            /// Enum _18 for value: _18
            /// </summary>
            [EnumMember(Value = "_18")]
            _18 = 18,

            /// <summary>
            /// Enum _19 for value: _19
            /// </summary>
            [EnumMember(Value = "_19")]
            _19 = 19,

            /// <summary>
            /// Enum _20 for value: _20
            /// </summary>
            [EnumMember(Value = "_20")]
            _20 = 20,

            /// <summary>
            /// Enum _21 for value: _21
            /// </summary>
            [EnumMember(Value = "_21")]
            _21 = 21,

            /// <summary>
            /// Enum _22 for value: _22
            /// </summary>
            [EnumMember(Value = "_22")]
            _22 = 22,

            /// <summary>
            /// Enum _23 for value: _23
            /// </summary>
            [EnumMember(Value = "_23")]
            _23 = 23,

            /// <summary>
            /// Enum _24 for value: _24
            /// </summary>
            [EnumMember(Value = "_24")]
            _24 = 24,

            /// <summary>
            /// Enum _25 for value: _25
            /// </summary>
            [EnumMember(Value = "_25")]
            _25 = 25,

            /// <summary>
            /// Enum _26 for value: _26
            /// </summary>
            [EnumMember(Value = "_26")]
            _26 = 26,

            /// <summary>
            /// Enum _27 for value: _27
            /// </summary>
            [EnumMember(Value = "_27")]
            _27 = 27,

            /// <summary>
            /// Enum _28 for value: _28
            /// </summary>
            [EnumMember(Value = "_28")]
            _28 = 28,

            /// <summary>
            /// Enum _29 for value: _29
            /// </summary>
            [EnumMember(Value = "_29")]
            _29 = 29,

            /// <summary>
            /// Enum _30 for value: _30
            /// </summary>
            [EnumMember(Value = "_30")]
            _30 = 30,

            /// <summary>
            /// Enum _31 for value: _31
            /// </summary>
            [EnumMember(Value = "_31")]
            _31 = 31,

            /// <summary>
            /// Enum Subscriptionitemstartday for value: subscription_item_start_day
            /// </summary>
            [EnumMember(Value = "subscription_item_start_day")]
            Subscriptionitemstartday = 32,

            /// <summary>
            /// Enum Accountcycledate for value: account_cycle_date
            /// </summary>
            [EnumMember(Value = "account_cycle_date")]
            Accountcycledate = 33,

            /// <summary>
            /// Enum Subscriptionstartday for value: subscription_start_day
            /// </summary>
            [EnumMember(Value = "subscription_start_day")]
            Subscriptionstartday = 34,

            /// <summary>
            /// Enum Termendday for value: term_end_day
            /// </summary>
            [EnumMember(Value = "term_end_day")]
            Termendday = 35,

            /// <summary>
            /// Enum Monday for value: monday
            /// </summary>
            [EnumMember(Value = "monday")]
            Monday = 36,

            /// <summary>
            /// Enum Tuesday for value: tuesday
            /// </summary>
            [EnumMember(Value = "tuesday")]
            Tuesday = 37,

            /// <summary>
            /// Enum Wednesday for value: wednesday
            /// </summary>
            [EnumMember(Value = "wednesday")]
            Wednesday = 38,

            /// <summary>
            /// Enum Thursday for value: thursday
            /// </summary>
            [EnumMember(Value = "thursday")]
            Thursday = 39,

            /// <summary>
            /// Enum Friday for value: friday
            /// </summary>
            [EnumMember(Value = "friday")]
            Friday = 40,

            /// <summary>
            /// Enum Saturday for value: saturday
            /// </summary>
            [EnumMember(Value = "saturday")]
            Saturday = 41,

            /// <summary>
            /// Enum Sunday for value: sunday
            /// </summary>
            [EnumMember(Value = "sunday")]
            Sunday = 42

        }

        /// <summary>
        /// Specifies on which day or the month or day of the week a customer shall be billed.
        /// </summary>
        /// <value>Specifies on which day or the month or day of the week a customer shall be billed.</value>
        [DataMember(Name="on", EmitDefaultValue=false)]
        [Obsolete]
        public OnEnum? on { get; set; }
        /// <summary>
        /// Specifies the billing frequency. One of &#x60;week&#x60;, &#x60;month&#x60; or &#x60;year&#x60;.
        /// </summary>
        /// <value>Specifies the billing frequency. One of &#x60;week&#x60;, &#x60;month&#x60; or &#x60;year&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntervalEnum
        {
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 1,

            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 2,

            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 3,

            /// <summary>
            /// Enum Term for value: term
            /// </summary>
            [EnumMember(Value = "term")]
            Term = 4,

            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 5

        }

        /// <summary>
        /// Specifies the billing frequency. One of &#x60;week&#x60;, &#x60;month&#x60; or &#x60;year&#x60;.
        /// </summary>
        /// <value>Specifies the billing frequency. One of &#x60;week&#x60;, &#x60;month&#x60; or &#x60;year&#x60;.</value>
        [DataMember(Name="interval", EmitDefaultValue=false)]
        public IntervalEnum? interval { get; set; }
        /// <summary>
        /// Specifies how to align billing for recurring (subscription) products that start on different days.
        /// </summary>
        /// <value>Specifies how to align billing for recurring (subscription) products that start on different days.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlignmentBehaviorEnum
        {
            /// <summary>
            /// Enum Subscriptionstart for value: subscription_start
            /// </summary>
            [EnumMember(Value = "subscription_start")]
            Subscriptionstart = 1,

            /// <summary>
            /// Enum Termstart for value: term_start
            /// </summary>
            [EnumMember(Value = "term_start")]
            Termstart = 2,

            /// <summary>
            /// Enum Termend for value: term_end
            /// </summary>
            [EnumMember(Value = "term_end")]
            Termend = 3,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 4

        }

        /// <summary>
        /// Specifies how to align billing for recurring (subscription) products that start on different days.
        /// </summary>
        /// <value>Specifies how to align billing for recurring (subscription) products that start on different days.</value>
        [DataMember(Name="alignment_behavior", EmitDefaultValue=false)]
        public AlignmentBehaviorEnum? alignment_behavior { get; set; }
        /// <summary>
        /// You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices.
        /// </summary>
        /// <value>You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimingEnum
        {
            /// <summary>
            /// Enum Advance for value: in_advance
            /// </summary>
            [EnumMember(Value = "in_advance")]
            Advance = 1,

            /// <summary>
            /// Enum Arrears for value: in_arrears
            /// </summary>
            [EnumMember(Value = "in_arrears")]
            Arrears = 2

        }

        /// <summary>
        /// You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices.
        /// </summary>
        /// <value>You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices.</value>
        [DataMember(Name="timing", EmitDefaultValue=false)]
        public TimingEnum? timing { get; set; }
        /// <summary>
        /// Specifies the duration frequency. One of day, week, month or year.
        /// </summary>
        /// <value>Specifies the duration frequency. One of day, week, month or year.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DurationIntervalEnum
        {
            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 1,

            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 2,

            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 3,

            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 4,

            /// <summary>
            /// Enum Subscriptionterm for value: subscription_term
            /// </summary>
            [EnumMember(Value = "subscription_term")]
            Subscriptionterm = 5,

            /// <summary>
            /// Enum Billingperiod for value: billing_period
            /// </summary>
            [EnumMember(Value = "billing_period")]
            Billingperiod = 6

        }

        /// <summary>
        /// Specifies the duration frequency. One of day, week, month or year.
        /// </summary>
        /// <value>Specifies the duration frequency. One of day, week, month or year.</value>
        [DataMember(Name="duration_interval", EmitDefaultValue=false)]
        public DurationIntervalEnum? duration_interval { get; set; }
        /// <summary>
        /// A rating group based on which usage records are rated. Only applicable to usage prices.
        /// </summary>
        /// <value>A rating group based on which usage records are rated. Only applicable to usage prices.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RatingGroupEnum
        {
            /// <summary>
            /// Enum Billingperiod for value: billing_period
            /// </summary>
            [EnumMember(Value = "billing_period")]
            Billingperiod = 1,

            /// <summary>
            /// Enum Usagestartdate for value: usage_start_date
            /// </summary>
            [EnumMember(Value = "usage_start_date")]
            Usagestartdate = 2,

            /// <summary>
            /// Enum Usagerecord for value: usage_record
            /// </summary>
            [EnumMember(Value = "usage_record")]
            Usagerecord = 3,

            /// <summary>
            /// Enum Usageupload for value: usage_upload
            /// </summary>
            [EnumMember(Value = "usage_upload")]
            Usageupload = 4,

            /// <summary>
            /// Enum Customgroup for value: custom_group
            /// </summary>
            [EnumMember(Value = "custom_group")]
            Customgroup = 5

        }

        /// <summary>
        /// A rating group based on which usage records are rated. Only applicable to usage prices.
        /// </summary>
        /// <value>A rating group based on which usage records are rated. Only applicable to usage prices.</value>
        [DataMember(Name="rating_group", EmitDefaultValue=false)]
        public RatingGroupEnum? rating_group { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Recurring" /> class.
        /// </summary>
        /// <param name="recurringOn">Specifies on which day or the month or day of the week a customer shall be billed..</param>
        /// <param name="on">Specifies on which day or the month or day of the week a customer shall be billed..</param>
        /// <param name="usage">Indicates that this is a usage price..</param>
        /// <param name="interval">Specifies the billing frequency. One of &#x60;week&#x60;, &#x60;month&#x60; or &#x60;year&#x60;..</param>
        /// <param name="intervalCount">The number of intervals (specified in the interval attribute) between subscription billings. For example, interval&#x3D;month and intervalCount&#x3D;3 bills every 3 months..</param>
        /// <param name="alignmentBehavior">Specifies how to align billing for recurring (subscription) products that start on different days..</param>
        /// <param name="timing">You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices..</param>
        /// <param name="durationInterval">Specifies the duration frequency. One of day, week, month or year..</param>
        /// <param name="durationIntervalCount">Specifies how long a customer shall be charged if this is less than the duration of the subscription.</param>
        /// <param name="ratingGroup">A rating group based on which usage records are rated. Only applicable to usage prices..</param>
        public Recurring(RecurringOnEnum? recurringOn = default(RecurringOnEnum?), OnEnum? on = default(OnEnum?), bool usage = default(bool), IntervalEnum? interval = default(IntervalEnum?), int intervalCount = default(int), AlignmentBehaviorEnum? alignmentBehavior = default(AlignmentBehaviorEnum?), TimingEnum? timing = default(TimingEnum?), DurationIntervalEnum? durationInterval = default(DurationIntervalEnum?), int durationIntervalCount = default(int), RatingGroupEnum? ratingGroup = default(RatingGroupEnum?))
        {
            this.recurring_on = recurringOn;
            this.on = on;
            this.usage = usage;
            this.interval = interval;
            this.interval_count = intervalCount;
            this.alignment_behavior = alignmentBehavior;
            this.timing = timing;
            this.duration_interval = durationInterval;
            this.duration_interval_count = durationIntervalCount;
            this.rating_group = ratingGroup;
        }



        /// <summary>
        /// Indicates that this is a usage price.
        /// </summary>
        /// <value>Indicates that this is a usage price.</value>
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public bool usage { get; set; }


        /// <summary>
        /// The number of intervals (specified in the interval attribute) between subscription billings. For example, interval&#x3D;month and intervalCount&#x3D;3 bills every 3 months.
        /// </summary>
        /// <value>The number of intervals (specified in the interval attribute) between subscription billings. For example, interval&#x3D;month and intervalCount&#x3D;3 bills every 3 months.</value>
        [DataMember(Name="interval_count", EmitDefaultValue=false)]
        public int interval_count { get; set; }



        /// <summary>
        /// You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices.
        /// </summary>
        /// <value>You can choose to bill in_advance or in_arrears for recurring prices. The field is not used with one-time or usage-based prices.</value>
        [DataMember(Name="formula", EmitDefaultValue=false)]
        public string formula { get; private set; }


        /// <summary>
        /// Specifies how long a customer shall be charged if this is less than the duration of the subscription
        /// </summary>
        /// <value>Specifies how long a customer shall be charged if this is less than the duration of the subscription</value>
        [DataMember(Name="duration_interval_count", EmitDefaultValue=false)]
        public int duration_interval_count { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Recurring {\n");
            sb.Append("  recurring_on: ").Append(recurring_on).Append("\n");
            sb.Append("  on: ").Append(on).Append("\n");
            sb.Append("  usage: ").Append(usage).Append("\n");
            sb.Append("  interval: ").Append(interval).Append("\n");
            sb.Append("  interval_count: ").Append(interval_count).Append("\n");
            sb.Append("  alignment_behavior: ").Append(alignment_behavior).Append("\n");
            sb.Append("  timing: ").Append(timing).Append("\n");
            sb.Append("  formula: ").Append(formula).Append("\n");
            sb.Append("  duration_interval: ").Append(duration_interval).Append("\n");
            sb.Append("  duration_interval_count: ").Append(duration_interval_count).Append("\n");
            sb.Append("  rating_group: ").Append(rating_group).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Recurring);
        }

        /// <summary>
        /// Returns true if Recurring instances are equal
        /// </summary>
        /// <param name="input">Instance of Recurring to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Recurring input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.recurring_on == input.recurring_on ||
                    (this.recurring_on != null &&
                    this.recurring_on.Equals(input.recurring_on))
                ) && 
                (
                    this.on == input.on ||
                    (this.on != null &&
                    this.on.Equals(input.on))
                ) && 
                (
                    this.usage == input.usage ||
                    (this.usage != null &&
                    this.usage.Equals(input.usage))
                ) && 
                (
                    this.interval == input.interval ||
                    (this.interval != null &&
                    this.interval.Equals(input.interval))
                ) && 
                (
                    this.interval_count == input.interval_count ||
                    (this.interval_count != null &&
                    this.interval_count.Equals(input.interval_count))
                ) && 
                (
                    this.alignment_behavior == input.alignment_behavior ||
                    (this.alignment_behavior != null &&
                    this.alignment_behavior.Equals(input.alignment_behavior))
                ) && 
                (
                    this.timing == input.timing ||
                    (this.timing != null &&
                    this.timing.Equals(input.timing))
                ) && 
                (
                    this.formula == input.formula ||
                    (this.formula != null &&
                    this.formula.Equals(input.formula))
                ) && 
                (
                    this.duration_interval == input.duration_interval ||
                    (this.duration_interval != null &&
                    this.duration_interval.Equals(input.duration_interval))
                ) && 
                (
                    this.duration_interval_count == input.duration_interval_count ||
                    (this.duration_interval_count != null &&
                    this.duration_interval_count.Equals(input.duration_interval_count))
                ) && 
                (
                    this.rating_group == input.rating_group ||
                    (this.rating_group != null &&
                    this.rating_group.Equals(input.rating_group))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.recurring_on != null)
                    hashCode = hashCode * 59 + this.recurring_on.GetHashCode();
                if (this.on != null)
                    hashCode = hashCode * 59 + this.on.GetHashCode();
                if (this.usage != null)
                    hashCode = hashCode * 59 + this.usage.GetHashCode();
                if (this.interval != null)
                    hashCode = hashCode * 59 + this.interval.GetHashCode();
                if (this.interval_count != null)
                    hashCode = hashCode * 59 + this.interval_count.GetHashCode();
                if (this.alignment_behavior != null)
                    hashCode = hashCode * 59 + this.alignment_behavior.GetHashCode();
                if (this.timing != null)
                    hashCode = hashCode * 59 + this.timing.GetHashCode();
                if (this.formula != null)
                    hashCode = hashCode * 59 + this.formula.GetHashCode();
                if (this.duration_interval != null)
                    hashCode = hashCode * 59 + this.duration_interval.GetHashCode();
                if (this.duration_interval_count != null)
                    hashCode = hashCode * 59 + this.duration_interval_count.GetHashCode();
                if (this.rating_group != null)
                    hashCode = hashCode * 59 + this.rating_group.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
