/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Credit card information. When providing a card number, you must meet the requirements for PCI compliance. We strongly recommend using Zuora&#39;s [Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0) instead of interacting with this API directly.
    /// </summary>
    [DataContract]
    public partial class Card :  IEquatable<Card>, IValidatableObject
    {
        /// <summary>
        /// Card brand.
        /// </summary>
        /// <value>Card brand.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BrandEnum
        {
            /// <summary>
            /// Enum Visa for value: visa
            /// </summary>
            [EnumMember(Value = "visa")]
            Visa = 1,

            /// <summary>
            /// Enum Mastercard for value: mastercard
            /// </summary>
            [EnumMember(Value = "mastercard")]
            Mastercard = 2,

            /// <summary>
            /// Enum Americanexpress for value: american_express
            /// </summary>
            [EnumMember(Value = "american_express")]
            Americanexpress = 3,

            /// <summary>
            /// Enum Discover for value: discover
            /// </summary>
            [EnumMember(Value = "discover")]
            Discover = 4,

            /// <summary>
            /// Enum Jcb for value: jcb
            /// </summary>
            [EnumMember(Value = "jcb")]
            Jcb = 5,

            /// <summary>
            /// Enum Diners for value: diners
            /// </summary>
            [EnumMember(Value = "diners")]
            Diners = 6

        }

        /// <summary>
        /// Card brand.
        /// </summary>
        /// <value>Card brand.</value>
        [DataMember(Name="brand", EmitDefaultValue=true)]
        public BrandEnum brand { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Card" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Card() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Card" /> class.
        /// </summary>
        /// <param name="cardNumber">The card number, as a string without any separators. (required).</param>
        /// <param name="brand">Card brand. (required).</param>
        /// <param name="expiryMonth">One or two digit expiration month (1-12) of the credit card. (required).</param>
        /// <param name="expiryYear">Two- or four-digit number representing the card&#39;s expiration year. (required).</param>
        /// <param name="securityCode">Card security code. It is highly recommended to always include this value..</param>
        /// <param name="mandate">mandate.</param>
        public Card(string cardNumber = default(string), BrandEnum brand = default(BrandEnum), decimal expiryMonth = default(decimal), decimal expiryYear = default(decimal), string securityCode = default(string), CardMandate mandate = default(CardMandate))
        {
            // to ensure "cardNumber" is required (not null)
            if (cardNumber == null)
            {
                throw new InvalidDataException("cardNumber is a required property for Card and cannot be null");
            }
            else
            {
                this.card_number = cardNumber;
            }

            // to ensure "brand" is required (not null)
            if (brand == null)
            {
                throw new InvalidDataException("brand is a required property for Card and cannot be null");
            }
            else
            {
                this.brand = brand;
            }

            // to ensure "expiryMonth" is required (not null)
            if (expiryMonth == null)
            {
                throw new InvalidDataException("expiryMonth is a required property for Card and cannot be null");
            }
            else
            {
                this.expiry_month = expiryMonth;
            }

            // to ensure "expiryYear" is required (not null)
            if (expiryYear == null)
            {
                throw new InvalidDataException("expiryYear is a required property for Card and cannot be null");
            }
            else
            {
                this.expiry_year = expiryYear;
            }

            this.security_code = securityCode;
            this.mandate = mandate;
        }

        /// <summary>
        /// The card number, as a string without any separators.
        /// </summary>
        /// <value>The card number, as a string without any separators.</value>
        [DataMember(Name="card_number", EmitDefaultValue=true)]
        public string card_number { get; set; }


        /// <summary>
        /// One or two digit expiration month (1-12) of the credit card.
        /// </summary>
        /// <value>One or two digit expiration month (1-12) of the credit card.</value>
        [DataMember(Name="expiry_month", EmitDefaultValue=true)]
        public decimal expiry_month { get; set; }

        /// <summary>
        /// Two- or four-digit number representing the card&#39;s expiration year.
        /// </summary>
        /// <value>Two- or four-digit number representing the card&#39;s expiration year.</value>
        [DataMember(Name="expiry_year", EmitDefaultValue=true)]
        public decimal expiry_year { get; set; }

        /// <summary>
        /// Card security code. It is highly recommended to always include this value.
        /// </summary>
        /// <value>Card security code. It is highly recommended to always include this value.</value>
        [DataMember(Name="security_code", EmitDefaultValue=false)]
        public string security_code { get; set; }

        /// <summary>
        /// Gets or Sets mandate
        /// </summary>
        [DataMember(Name="mandate", EmitDefaultValue=false)]
        public CardMandate mandate { get; set; }

        /// <summary>
        /// The last four digits of the card number.
        /// </summary>
        /// <value>The last four digits of the card number.</value>
        [DataMember(Name="last_4", EmitDefaultValue=false)]
        public string last_4 { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Card {\n");
            sb.Append("  card_number: ").Append(card_number).Append("\n");
            sb.Append("  brand: ").Append(brand).Append("\n");
            sb.Append("  expiry_month: ").Append(expiry_month).Append("\n");
            sb.Append("  expiry_year: ").Append(expiry_year).Append("\n");
            sb.Append("  security_code: ").Append(security_code).Append("\n");
            sb.Append("  mandate: ").Append(mandate).Append("\n");
            sb.Append("  last_4: ").Append(last_4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Card);
        }

        /// <summary>
        /// Returns true if Card instances are equal
        /// </summary>
        /// <param name="input">Instance of Card to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Card input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.card_number == input.card_number ||
                    (this.card_number != null &&
                    this.card_number.Equals(input.card_number))
                ) && 
                (
                    this.brand == input.brand ||
                    (this.brand != null &&
                    this.brand.Equals(input.brand))
                ) && 
                (
                    this.expiry_month == input.expiry_month ||
                    (this.expiry_month != null &&
                    this.expiry_month.Equals(input.expiry_month))
                ) && 
                (
                    this.expiry_year == input.expiry_year ||
                    (this.expiry_year != null &&
                    this.expiry_year.Equals(input.expiry_year))
                ) && 
                (
                    this.security_code == input.security_code ||
                    (this.security_code != null &&
                    this.security_code.Equals(input.security_code))
                ) && 
                (
                    this.mandate == input.mandate ||
                    (this.mandate != null &&
                    this.mandate.Equals(input.mandate))
                ) && 
                (
                    this.last_4 == input.last_4 ||
                    (this.last_4 != null &&
                    this.last_4.Equals(input.last_4))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.card_number != null)
                    hashCode = hashCode * 59 + this.card_number.GetHashCode();
                if (this.brand != null)
                    hashCode = hashCode * 59 + this.brand.GetHashCode();
                if (this.expiry_month != null)
                    hashCode = hashCode * 59 + this.expiry_month.GetHashCode();
                if (this.expiry_year != null)
                    hashCode = hashCode * 59 + this.expiry_year.GetHashCode();
                if (this.security_code != null)
                    hashCode = hashCode * 59 + this.security_code.GetHashCode();
                if (this.mandate != null)
                    hashCode = hashCode * 59 + this.mandate.GetHashCode();
                if (this.last_4 != null)
                    hashCode = hashCode * 59 + this.last_4.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
