/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// GenerateBillingDocumentsAccountRequest
    /// </summary>
    [DataContract]
    public partial class GenerateBillingDocumentsAccountRequest :  IEquatable<GenerateBillingDocumentsAccountRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateBillingDocumentsAccountRequest" /> class.
        /// </summary>
        /// <param name="post">If true, invoices will be automatically posted..</param>
        /// <param name="renew">If true, subscriptions will be automatically renewed..</param>
        /// <param name="chargesExcluded">Charge type or types to be excluded. Can be &#x60;one_time&#x60;,&#x60;recurring&#x60;, or &#x60;usage&#x60;..</param>
        /// <param name="creditMemoReasonCode">A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code..</param>
        /// <param name="documentDate">The date when the credit memo is applied.</param>
        /// <param name="subscriptionIds">The IDs of the subscriptions that you want to create the billing documents for. Each value must be the unique identifier of the latest version of an active subscription..</param>
        /// <param name="targetDate">All unbilled items on or before this date are included..</param>
        public GenerateBillingDocumentsAccountRequest(bool post = default(bool), bool renew = default(bool), string chargesExcluded = default(string), string creditMemoReasonCode = default(string), DateTime documentDate = default(DateTime), List<string> subscriptionIds = default(List<string>), DateTime targetDate = default(DateTime))
        {
            this.post = post;
            this.renew = renew;
            this.charges_excluded = chargesExcluded;
            this.credit_memo_reason_code = creditMemoReasonCode;
            this.document_date = documentDate;
            this.subscription_ids = subscriptionIds;
            this.target_date = targetDate;
        }

        /// <summary>
        /// If true, invoices will be automatically posted.
        /// </summary>
        /// <value>If true, invoices will be automatically posted.</value>
        [DataMember(Name="post", EmitDefaultValue=false)]
        public bool post { get; set; }

        /// <summary>
        /// If true, subscriptions will be automatically renewed.
        /// </summary>
        /// <value>If true, subscriptions will be automatically renewed.</value>
        [DataMember(Name="renew", EmitDefaultValue=false)]
        public bool renew { get; set; }

        /// <summary>
        /// Charge type or types to be excluded. Can be &#x60;one_time&#x60;,&#x60;recurring&#x60;, or &#x60;usage&#x60;.
        /// </summary>
        /// <value>Charge type or types to be excluded. Can be &#x60;one_time&#x60;,&#x60;recurring&#x60;, or &#x60;usage&#x60;.</value>
        [DataMember(Name="charges_excluded", EmitDefaultValue=false)]
        public string charges_excluded { get; set; }

        /// <summary>
        /// A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.
        /// </summary>
        /// <value>A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.</value>
        [DataMember(Name="credit_memo_reason_code", EmitDefaultValue=false)]
        public string credit_memo_reason_code { get; set; }

        /// <summary>
        /// The date when the credit memo is applied
        /// </summary>
        /// <value>The date when the credit memo is applied</value>
        [DataMember(Name="document_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime document_date { get; set; }

        /// <summary>
        /// The IDs of the subscriptions that you want to create the billing documents for. Each value must be the unique identifier of the latest version of an active subscription.
        /// </summary>
        /// <value>The IDs of the subscriptions that you want to create the billing documents for. Each value must be the unique identifier of the latest version of an active subscription.</value>
        [DataMember(Name="subscription_ids", EmitDefaultValue=false)]
        public List<string> subscription_ids { get; set; }

        /// <summary>
        /// All unbilled items on or before this date are included.
        /// </summary>
        /// <value>All unbilled items on or before this date are included.</value>
        [DataMember(Name="target_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime target_date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenerateBillingDocumentsAccountRequest {\n");
            sb.Append("  post: ").Append(post).Append("\n");
            sb.Append("  renew: ").Append(renew).Append("\n");
            sb.Append("  charges_excluded: ").Append(charges_excluded).Append("\n");
            sb.Append("  credit_memo_reason_code: ").Append(credit_memo_reason_code).Append("\n");
            sb.Append("  document_date: ").Append(document_date).Append("\n");
            sb.Append("  subscription_ids: ").Append(subscription_ids).Append("\n");
            sb.Append("  target_date: ").Append(target_date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GenerateBillingDocumentsAccountRequest);
        }

        /// <summary>
        /// Returns true if GenerateBillingDocumentsAccountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GenerateBillingDocumentsAccountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenerateBillingDocumentsAccountRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.post == input.post ||
                    (this.post != null &&
                    this.post.Equals(input.post))
                ) && 
                (
                    this.renew == input.renew ||
                    (this.renew != null &&
                    this.renew.Equals(input.renew))
                ) && 
                (
                    this.charges_excluded == input.charges_excluded ||
                    (this.charges_excluded != null &&
                    this.charges_excluded.Equals(input.charges_excluded))
                ) && 
                (
                    this.credit_memo_reason_code == input.credit_memo_reason_code ||
                    (this.credit_memo_reason_code != null &&
                    this.credit_memo_reason_code.Equals(input.credit_memo_reason_code))
                ) && 
                (
                    this.document_date == input.document_date ||
                    (this.document_date != null &&
                    this.document_date.Equals(input.document_date))
                ) && 
                (
                    this.subscription_ids == input.subscription_ids ||
                    this.subscription_ids != null &&
                    input.subscription_ids != null &&
                    this.subscription_ids.SequenceEqual(input.subscription_ids)
                ) && 
                (
                    this.target_date == input.target_date ||
                    (this.target_date != null &&
                    this.target_date.Equals(input.target_date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.post != null)
                    hashCode = hashCode * 59 + this.post.GetHashCode();
                if (this.renew != null)
                    hashCode = hashCode * 59 + this.renew.GetHashCode();
                if (this.charges_excluded != null)
                    hashCode = hashCode * 59 + this.charges_excluded.GetHashCode();
                if (this.credit_memo_reason_code != null)
                    hashCode = hashCode * 59 + this.credit_memo_reason_code.GetHashCode();
                if (this.document_date != null)
                    hashCode = hashCode * 59 + this.document_date.GetHashCode();
                if (this.subscription_ids != null)
                    hashCode = hashCode * 59 + this.subscription_ids.GetHashCode();
                if (this.target_date != null)
                    hashCode = hashCode * 59 + this.target_date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
