/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// SubscriptionPreviewBillingDocumentTaxationItemResponse
    /// </summary>
    [DataContract]
    public partial class SubscriptionPreviewBillingDocumentTaxationItemResponse :  IEquatable<SubscriptionPreviewBillingDocumentTaxationItemResponse>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether the tax rate is an amount or a percentage.
        /// </summary>
        /// <value>Indicates whether the tax rate is an amount or a percentage.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxRateTypeEnum
        {
            /// <summary>
            /// Enum Percent for value: percent
            /// </summary>
            [EnumMember(Value = "percent")]
            Percent = 1,

            /// <summary>
            /// Enum Amount for value: amount
            /// </summary>
            [EnumMember(Value = "amount")]
            Amount = 2

        }

        /// <summary>
        /// Indicates whether the tax rate is an amount or a percentage.
        /// </summary>
        /// <value>Indicates whether the tax rate is an amount or a percentage.</value>
        [DataMember(Name="tax_rate_type", EmitDefaultValue=false)]
        public TaxRateTypeEnum? tax_rate_type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPreviewBillingDocumentTaxationItemResponse" /> class.
        /// </summary>
        /// <param name="amountExempt">The calculated tax amount excluded due to the exemption..</param>
        /// <param name="id">Identifier of the taxation item related to the invoice. Only applicable for credit memos created from invoices..</param>
        /// <param name="jurisdiction">The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city..</param>
        /// <param name="locationCode">The identifier for the location based on the value of the &#x60;tax_code&#x60; field..</param>
        /// <param name="name">The name of the taxation item..</param>
        /// <param name="amount">The amount of the tax applied to the total price..</param>
        /// <param name="taxCode">A tax code identifier. If a &#x60;tax_code&#x60; of a price is not provided when you create or update a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly..</param>
        /// <param name="taxCodeName">The amount of the tax applied to the total price..</param>
        /// <param name="date">The date on which the tax is applied..</param>
        /// <param name="taxRate">The amount of the tax applied to the total price..</param>
        /// <param name="taxRateName">The name of the tax rate, such as sales tax or GST. This name is displayed on billing documents..</param>
        /// <param name="taxRateType">Indicates whether the tax rate is an amount or a percentage..</param>
        public SubscriptionPreviewBillingDocumentTaxationItemResponse(decimal amountExempt = default(decimal), string id = default(string), string jurisdiction = default(string), string locationCode = default(string), string name = default(string), decimal amount = default(decimal), string taxCode = default(string), string taxCodeName = default(string), DateTime date = default(DateTime), decimal taxRate = default(decimal), string taxRateName = default(string), TaxRateTypeEnum? taxRateType = default(TaxRateTypeEnum?))
        {
            this.amount_exempt = amountExempt;
            this.id = id;
            this.jurisdiction = jurisdiction;
            this.location_code = locationCode;
            this.name = name;
            this.amount = amount;
            this.tax_code = taxCode;
            this.tax_code_name = taxCodeName;
            this.date = date;
            this.tax_rate = taxRate;
            this.tax_rate_name = taxRateName;
            this.tax_rate_type = taxRateType;
        }

        /// <summary>
        /// The calculated tax amount excluded due to the exemption.
        /// </summary>
        /// <value>The calculated tax amount excluded due to the exemption.</value>
        [DataMember(Name="amount_exempt", EmitDefaultValue=false)]
        public decimal amount_exempt { get; set; }

        /// <summary>
        /// Identifier of the taxation item related to the invoice. Only applicable for credit memos created from invoices.
        /// </summary>
        /// <value>Identifier of the taxation item related to the invoice. Only applicable for credit memos created from invoices.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; set; }

        /// <summary>
        /// The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
        /// </summary>
        /// <value>The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.</value>
        [DataMember(Name="jurisdiction", EmitDefaultValue=false)]
        public string jurisdiction { get; set; }

        /// <summary>
        /// The identifier for the location based on the value of the &#x60;tax_code&#x60; field.
        /// </summary>
        /// <value>The identifier for the location based on the value of the &#x60;tax_code&#x60; field.</value>
        [DataMember(Name="location_code", EmitDefaultValue=false)]
        public string location_code { get; set; }

        /// <summary>
        /// The name of the taxation item.
        /// </summary>
        /// <value>The name of the taxation item.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string name { get; set; }

        /// <summary>
        /// The amount of the tax applied to the total price.
        /// </summary>
        /// <value>The amount of the tax applied to the total price.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal amount { get; set; }

        /// <summary>
        /// A tax code identifier. If a &#x60;tax_code&#x60; of a price is not provided when you create or update a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly.
        /// </summary>
        /// <value>A tax code identifier. If a &#x60;tax_code&#x60; of a price is not provided when you create or update a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly.</value>
        [DataMember(Name="tax_code", EmitDefaultValue=false)]
        public string tax_code { get; set; }

        /// <summary>
        /// The amount of the tax applied to the total price.
        /// </summary>
        /// <value>The amount of the tax applied to the total price.</value>
        [DataMember(Name="tax_code_name", EmitDefaultValue=false)]
        public string tax_code_name { get; set; }

        /// <summary>
        /// The date on which the tax is applied.
        /// </summary>
        /// <value>The date on which the tax is applied.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime date { get; set; }

        /// <summary>
        /// The amount of the tax applied to the total price.
        /// </summary>
        /// <value>The amount of the tax applied to the total price.</value>
        [DataMember(Name="tax_rate", EmitDefaultValue=false)]
        public decimal tax_rate { get; set; }

        /// <summary>
        /// The name of the tax rate, such as sales tax or GST. This name is displayed on billing documents.
        /// </summary>
        /// <value>The name of the tax rate, such as sales tax or GST. This name is displayed on billing documents.</value>
        [DataMember(Name="tax_rate_name", EmitDefaultValue=false)]
        public string tax_rate_name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPreviewBillingDocumentTaxationItemResponse {\n");
            sb.Append("  amount_exempt: ").Append(amount_exempt).Append("\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  jurisdiction: ").Append(jurisdiction).Append("\n");
            sb.Append("  location_code: ").Append(location_code).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  tax_code: ").Append(tax_code).Append("\n");
            sb.Append("  tax_code_name: ").Append(tax_code_name).Append("\n");
            sb.Append("  date: ").Append(date).Append("\n");
            sb.Append("  tax_rate: ").Append(tax_rate).Append("\n");
            sb.Append("  tax_rate_name: ").Append(tax_rate_name).Append("\n");
            sb.Append("  tax_rate_type: ").Append(tax_rate_type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionPreviewBillingDocumentTaxationItemResponse);
        }

        /// <summary>
        /// Returns true if SubscriptionPreviewBillingDocumentTaxationItemResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionPreviewBillingDocumentTaxationItemResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPreviewBillingDocumentTaxationItemResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.amount_exempt == input.amount_exempt ||
                    (this.amount_exempt != null &&
                    this.amount_exempt.Equals(input.amount_exempt))
                ) && 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.jurisdiction == input.jurisdiction ||
                    (this.jurisdiction != null &&
                    this.jurisdiction.Equals(input.jurisdiction))
                ) && 
                (
                    this.location_code == input.location_code ||
                    (this.location_code != null &&
                    this.location_code.Equals(input.location_code))
                ) && 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.tax_code == input.tax_code ||
                    (this.tax_code != null &&
                    this.tax_code.Equals(input.tax_code))
                ) && 
                (
                    this.tax_code_name == input.tax_code_name ||
                    (this.tax_code_name != null &&
                    this.tax_code_name.Equals(input.tax_code_name))
                ) && 
                (
                    this.date == input.date ||
                    (this.date != null &&
                    this.date.Equals(input.date))
                ) && 
                (
                    this.tax_rate == input.tax_rate ||
                    (this.tax_rate != null &&
                    this.tax_rate.Equals(input.tax_rate))
                ) && 
                (
                    this.tax_rate_name == input.tax_rate_name ||
                    (this.tax_rate_name != null &&
                    this.tax_rate_name.Equals(input.tax_rate_name))
                ) && 
                (
                    this.tax_rate_type == input.tax_rate_type ||
                    (this.tax_rate_type != null &&
                    this.tax_rate_type.Equals(input.tax_rate_type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.amount_exempt != null)
                    hashCode = hashCode * 59 + this.amount_exempt.GetHashCode();
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.jurisdiction != null)
                    hashCode = hashCode * 59 + this.jurisdiction.GetHashCode();
                if (this.location_code != null)
                    hashCode = hashCode * 59 + this.location_code.GetHashCode();
                if (this.name != null)
                    hashCode = hashCode * 59 + this.name.GetHashCode();
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.tax_code != null)
                    hashCode = hashCode * 59 + this.tax_code.GetHashCode();
                if (this.tax_code_name != null)
                    hashCode = hashCode * 59 + this.tax_code_name.GetHashCode();
                if (this.date != null)
                    hashCode = hashCode * 59 + this.date.GetHashCode();
                if (this.tax_rate != null)
                    hashCode = hashCode * 59 + this.tax_rate.GetHashCode();
                if (this.tax_rate_name != null)
                    hashCode = hashCode * 59 + this.tax_rate_name.GetHashCode();
                if (this.tax_rate_type != null)
                    hashCode = hashCode * 59 + this.tax_rate_type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // jurisdiction (string) maxLength
            if(this.jurisdiction != null && this.jurisdiction.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for jurisdiction, length must be less than 32.", new [] { "jurisdiction" });
            }


            // location_code (string) maxLength
            if(this.location_code != null && this.location_code.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for location_code, length must be less than 32.", new [] { "location_code" });
            }


            // name (string) maxLength
            if(this.name != null && this.name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for name, length must be less than 128.", new [] { "name" });
            }


            yield break;
        }
    }

}
