/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Processing options for the invoice or payment.
    /// </summary>
    [DataContract]
    public partial class OrdersProcessingOption :  IEquatable<OrdersProcessingOption>, IValidatableObject
    {
        /// <summary>
        /// Specifies whether to just create an invoice, or to create an invoice and collect payment.
        /// </summary>
        /// <value>Specifies whether to just create an invoice, or to create an invoice and collect payment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CollectionMethodEnum
        {
            /// <summary>
            /// Enum Collectpayment for value: collect_payment
            /// </summary>
            [EnumMember(Value = "collect_payment")]
            Collectpayment = 1,

            /// <summary>
            /// Enum Createinvoice for value: create_invoice
            /// </summary>
            [EnumMember(Value = "create_invoice")]
            Createinvoice = 2

        }

        /// <summary>
        /// Specifies whether to just create an invoice, or to create an invoice and collect payment.
        /// </summary>
        /// <value>Specifies whether to just create an invoice, or to create an invoice and collect payment.</value>
        [DataMember(Name="collection_method", EmitDefaultValue=false)]
        public CollectionMethodEnum? collection_method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersProcessingOption" /> class.
        /// </summary>
        /// <param name="documentDate">The date printed on billing documents..</param>
        /// <param name="targetDate">The target date for the order to be picked up by bill run for billing..</param>
        /// <param name="collectionMethod">Specifies whether to just create an invoice, or to create an invoice and collect payment..</param>
        /// <param name="paymentMethodId">Payment method Id used to pay billing documents..</param>
        /// <param name="paymentGatewayId">Identifier of the payment gateway Zuora will use to authorize the payments that are made with this payment method..</param>
        public OrdersProcessingOption(DateTime documentDate = default(DateTime), DateTime targetDate = default(DateTime), CollectionMethodEnum? collectionMethod = default(CollectionMethodEnum?), string paymentMethodId = default(string), string paymentGatewayId = default(string))
        {
            this.document_date = documentDate;
            this.target_date = targetDate;
            this.collection_method = collectionMethod;
            this.payment_method_id = paymentMethodId;
            this.payment_gateway_id = paymentGatewayId;
        }

        /// <summary>
        /// The date printed on billing documents.
        /// </summary>
        /// <value>The date printed on billing documents.</value>
        [DataMember(Name="document_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime document_date { get; set; }

        /// <summary>
        /// The target date for the order to be picked up by bill run for billing.
        /// </summary>
        /// <value>The target date for the order to be picked up by bill run for billing.</value>
        [DataMember(Name="target_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime target_date { get; set; }


        /// <summary>
        /// Payment method Id used to pay billing documents.
        /// </summary>
        /// <value>Payment method Id used to pay billing documents.</value>
        [DataMember(Name="payment_method_id", EmitDefaultValue=false)]
        public string payment_method_id { get; set; }

        /// <summary>
        /// Identifier of the payment gateway Zuora will use to authorize the payments that are made with this payment method.
        /// </summary>
        /// <value>Identifier of the payment gateway Zuora will use to authorize the payments that are made with this payment method.</value>
        [DataMember(Name="payment_gateway_id", EmitDefaultValue=false)]
        public string payment_gateway_id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrdersProcessingOption {\n");
            sb.Append("  document_date: ").Append(document_date).Append("\n");
            sb.Append("  target_date: ").Append(target_date).Append("\n");
            sb.Append("  collection_method: ").Append(collection_method).Append("\n");
            sb.Append("  payment_method_id: ").Append(payment_method_id).Append("\n");
            sb.Append("  payment_gateway_id: ").Append(payment_gateway_id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrdersProcessingOption);
        }

        /// <summary>
        /// Returns true if OrdersProcessingOption instances are equal
        /// </summary>
        /// <param name="input">Instance of OrdersProcessingOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrdersProcessingOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.document_date == input.document_date ||
                    (this.document_date != null &&
                    this.document_date.Equals(input.document_date))
                ) && 
                (
                    this.target_date == input.target_date ||
                    (this.target_date != null &&
                    this.target_date.Equals(input.target_date))
                ) && 
                (
                    this.collection_method == input.collection_method ||
                    (this.collection_method != null &&
                    this.collection_method.Equals(input.collection_method))
                ) && 
                (
                    this.payment_method_id == input.payment_method_id ||
                    (this.payment_method_id != null &&
                    this.payment_method_id.Equals(input.payment_method_id))
                ) && 
                (
                    this.payment_gateway_id == input.payment_gateway_id ||
                    (this.payment_gateway_id != null &&
                    this.payment_gateway_id.Equals(input.payment_gateway_id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.document_date != null)
                    hashCode = hashCode * 59 + this.document_date.GetHashCode();
                if (this.target_date != null)
                    hashCode = hashCode * 59 + this.target_date.GetHashCode();
                if (this.collection_method != null)
                    hashCode = hashCode * 59 + this.collection_method.GetHashCode();
                if (this.payment_method_id != null)
                    hashCode = hashCode * 59 + this.payment_method_id.GetHashCode();
                if (this.payment_gateway_id != null)
                    hashCode = hashCode * 59 + this.payment_gateway_id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
