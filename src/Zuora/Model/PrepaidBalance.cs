/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// PrepaidBalance
    /// </summary>
    [DataContract]
    public partial class PrepaidBalance :  IEquatable<PrepaidBalance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepaidBalance" /> class.
        /// </summary>
        /// <param name="prepaidUom">Unit of measure for the prepaid balance..</param>
        /// <param name="startDate">Start date of the fund effective period..</param>
        /// <param name="endDate">End date of the fund effective period..</param>
        /// <param name="totalBalance">The funded balance, which is the total units of the fund. .</param>
        /// <param name="remainingBalance">Remaining balance on the fund, which is the remaining units of the fund. .</param>
        public PrepaidBalance(string prepaidUom = default(string), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), decimal totalBalance = default(decimal), decimal remainingBalance = default(decimal))
        {
            this.prepaid_uom = prepaidUom;
            this.start_date = startDate;
            this.end_date = endDate;
            this.total_balance = totalBalance;
            this.remaining_balance = remainingBalance;
        }

        /// <summary>
        /// Unit of measure for the prepaid balance.
        /// </summary>
        /// <value>Unit of measure for the prepaid balance.</value>
        [DataMember(Name="prepaid_UOM", EmitDefaultValue=false)]
        public string prepaid_uom { get; set; }

        /// <summary>
        /// Start date of the fund effective period.
        /// </summary>
        /// <value>Start date of the fund effective period.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime start_date { get; set; }

        /// <summary>
        /// End date of the fund effective period.
        /// </summary>
        /// <value>End date of the fund effective period.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime end_date { get; set; }

        /// <summary>
        /// The funded balance, which is the total units of the fund. 
        /// </summary>
        /// <value>The funded balance, which is the total units of the fund. </value>
        [DataMember(Name="total_balance", EmitDefaultValue=false)]
        public decimal total_balance { get; set; }

        /// <summary>
        /// Remaining balance on the fund, which is the remaining units of the fund. 
        /// </summary>
        /// <value>Remaining balance on the fund, which is the remaining units of the fund. </value>
        [DataMember(Name="remaining_balance", EmitDefaultValue=false)]
        public decimal remaining_balance { get; set; }

        /// <summary>
        /// An array of prepaid balance transactions
        /// </summary>
        /// <value>An array of prepaid balance transactions</value>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<PrepaidBalanceTransaction> transactions { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrepaidBalance {\n");
            sb.Append("  prepaid_uom: ").Append(prepaid_uom).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  total_balance: ").Append(total_balance).Append("\n");
            sb.Append("  remaining_balance: ").Append(remaining_balance).Append("\n");
            sb.Append("  transactions: ").Append(transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepaidBalance);
        }

        /// <summary>
        /// Returns true if PrepaidBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepaidBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepaidBalance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.prepaid_uom == input.prepaid_uom ||
                    (this.prepaid_uom != null &&
                    this.prepaid_uom.Equals(input.prepaid_uom))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.total_balance == input.total_balance ||
                    (this.total_balance != null &&
                    this.total_balance.Equals(input.total_balance))
                ) && 
                (
                    this.remaining_balance == input.remaining_balance ||
                    (this.remaining_balance != null &&
                    this.remaining_balance.Equals(input.remaining_balance))
                ) && 
                (
                    this.transactions == input.transactions ||
                    this.transactions != null &&
                    input.transactions != null &&
                    this.transactions.SequenceEqual(input.transactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.prepaid_uom != null)
                    hashCode = hashCode * 59 + this.prepaid_uom.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.total_balance != null)
                    hashCode = hashCode * 59 + this.total_balance.GetHashCode();
                if (this.remaining_balance != null)
                    hashCode = hashCode * 59 + this.remaining_balance.GetHashCode();
                if (this.transactions != null)
                    hashCode = hashCode * 59 + this.transactions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
