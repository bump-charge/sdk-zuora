/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// PriceCreateRequest
    /// </summary>
    [DataContract]
    public partial class PriceCreateRequest :  IEquatable<PriceCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Specifies when to start billing your customer.
        /// </summary>
        /// <value>Specifies when to start billing your customer.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StartEventEnum
        {
            /// <summary>
            /// Enum Contracteffective for value: contract_effective
            /// </summary>
            [EnumMember(Value = "contract_effective")]
            Contracteffective = 1,

            /// <summary>
            /// Enum Serviceactivation for value: service_activation
            /// </summary>
            [EnumMember(Value = "service_activation")]
            Serviceactivation = 2,

            /// <summary>
            /// Enum Customeracceptance for value: customer_acceptance
            /// </summary>
            [EnumMember(Value = "customer_acceptance")]
            Customeracceptance = 3,

            /// <summary>
            /// Enum Specificdate for value: specific_date
            /// </summary>
            [EnumMember(Value = "specific_date")]
            Specificdate = 4

        }

        /// <summary>
        /// Specifies when to start billing your customer.
        /// </summary>
        /// <value>Specifies when to start billing your customer.</value>
        [DataMember(Name="start_event", EmitDefaultValue=false)]
        public StartEventEnum? start_event { get; set; }
        /// <summary>
        /// Specifies the mode for tiered prices.
        /// </summary>
        /// <value>Specifies the mode for tiered prices.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TiersModeEnum
        {
            /// <summary>
            /// Enum Graduated for value: graduated
            /// </summary>
            [EnumMember(Value = "graduated")]
            Graduated = 1,

            /// <summary>
            /// Enum Volume for value: volume
            /// </summary>
            [EnumMember(Value = "volume")]
            Volume = 2,

            /// <summary>
            /// Enum Highwatermarkvolume for value: high_watermark_volume
            /// </summary>
            [EnumMember(Value = "high_watermark_volume")]
            Highwatermarkvolume = 3,

            /// <summary>
            /// Enum Highwatermarkgraduated for value: high_watermark_graduated
            /// </summary>
            [EnumMember(Value = "high_watermark_graduated")]
            Highwatermarkgraduated = 4,

            /// <summary>
            /// Enum Graduatedwithoverage for value: graduated_with_overage
            /// </summary>
            [EnumMember(Value = "graduated_with_overage")]
            Graduatedwithoverage = 5

        }

        /// <summary>
        /// Specifies the mode for tiered prices.
        /// </summary>
        /// <value>Specifies the mode for tiered prices.</value>
        [DataMember(Name="tiers_mode", EmitDefaultValue=false)]
        [Obsolete]
        public TiersModeEnum? tiers_mode { get; set; }
        /// <summary>
        /// Defines apply_discount_to
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplyDiscountToEnum
        {
            /// <summary>
            /// Enum Onetime for value: one_time
            /// </summary>
            [EnumMember(Value = "one_time")]
            Onetime = 1,

            /// <summary>
            /// Enum Recurring for value: recurring
            /// </summary>
            [EnumMember(Value = "recurring")]
            Recurring = 2,

            /// <summary>
            /// Enum Usage for value: usage
            /// </summary>
            [EnumMember(Value = "usage")]
            Usage = 3

        }


        /// <summary>
        /// Any combination of one_time, recurring and plan.
        /// </summary>
        /// <value>Any combination of one_time, recurring and plan.</value>
        [DataMember(Name="apply_discount_to", EmitDefaultValue=false)]
        public List<ApplyDiscountToEnum> apply_discount_to { get; set; }
        /// <summary>
        /// Specifies at what level a discount should be applied: account, subscription, or plan.
        /// </summary>
        /// <value>Specifies at what level a discount should be applied: account, subscription, or plan.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiscountLevelEnum
        {
            /// <summary>
            /// Enum Account for value: account
            /// </summary>
            [EnumMember(Value = "account")]
            Account = 1,

            /// <summary>
            /// Enum Subscription for value: subscription
            /// </summary>
            [EnumMember(Value = "subscription")]
            Subscription = 2,

            /// <summary>
            /// Enum Plan for value: plan
            /// </summary>
            [EnumMember(Value = "plan")]
            Plan = 3

        }

        /// <summary>
        /// Specifies at what level a discount should be applied: account, subscription, or plan.
        /// </summary>
        /// <value>Specifies at what level a discount should be applied: account, subscription, or plan.</value>
        [DataMember(Name="discount_level", EmitDefaultValue=false)]
        public DiscountLevelEnum? discount_level { get; set; }
        /// <summary>
        /// Determines when to recognize the revenue for this charge. You can choose to recognize upon invoicing or daily over time.
        /// </summary>
        /// <value>Determines when to recognize the revenue for this charge. You can choose to recognize upon invoicing or daily over time.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RevenueRecognitionRuleEnum
        {
            /// <summary>
            /// Enum Oninvoice for value: on_invoice
            /// </summary>
            [EnumMember(Value = "on_invoice")]
            Oninvoice = 1,

            /// <summary>
            /// Enum Dailyovertime for value: daily_over_time
            /// </summary>
            [EnumMember(Value = "daily_over_time")]
            Dailyovertime = 2

        }

        /// <summary>
        /// Determines when to recognize the revenue for this charge. You can choose to recognize upon invoicing or daily over time.
        /// </summary>
        /// <value>Determines when to recognize the revenue for this charge. You can choose to recognize upon invoicing or daily over time.</value>
        [DataMember(Name="revenue_recognition_rule", EmitDefaultValue=false)]
        public RevenueRecognitionRuleEnum? revenue_recognition_rule { get; set; }
        /// <summary>
        /// Specifies the base interval of a price. If not provided, this field defaults to &#x60;billing_period&#x60;.
        /// </summary>
        /// <value>Specifies the base interval of a price. If not provided, this field defaults to &#x60;billing_period&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriceBaseIntervalEnum
        {
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 1,

            /// <summary>
            /// Enum Billingperiod for value: billing_period
            /// </summary>
            [EnumMember(Value = "billing_period")]
            Billingperiod = 2,

            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 3

        }

        /// <summary>
        /// Specifies the base interval of a price. If not provided, this field defaults to &#x60;billing_period&#x60;.
        /// </summary>
        /// <value>Specifies the base interval of a price. If not provided, this field defaults to &#x60;billing_period&#x60;.</value>
        [DataMember(Name="price_base_interval", EmitDefaultValue=false)]
        public PriceBaseIntervalEnum? price_base_interval { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PriceCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceCreateRequest" /> class.
        /// </summary>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="name">The name of the price. (required).</param>
        /// <param name="description">An arbitrary string attached to the object. Often useful for displaying to users..</param>
        /// <param name="recognizedRevenueAccountingCode">An active accounting code in your Zuora chart of accounts..</param>
        /// <param name="deferredRevenueAccountingCode">An active accounting code in your Zuora chart of accounts..</param>
        /// <param name="recurring">recurring.</param>
        /// <param name="startEvent">Specifies when to start billing your customer. (default to StartEventEnum.Contracteffective).</param>
        /// <param name="tiersMode">Specifies the mode for tiered prices..</param>
        /// <param name="applyDiscountTo">Any combination of one_time, recurring and plan..</param>
        /// <param name="tiers">Price information for different tiers. When creating or updating tiered prices, you must specify this field and the &#x60;tiers_mode&#x60; field..</param>
        /// <param name="taxCode">A tax code identifier. If a &#x60;tax_code&#x60; of a price is not provided when you create or update a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly..</param>
        /// <param name="taxInclusive">If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax..</param>
        /// <param name="unitOfMeasure">A configured unit of measure. This field is required for per-unit prices..</param>
        /// <param name="quantity">Quantity of the product to which your customers subscribe..</param>
        /// <param name="minQuantity">The minimum quantity for a price. Specify this field and the &#x60;max_quantity&#x60; field to create a range of quantities allowed in a price..</param>
        /// <param name="maxQuantity">The maximum quantity for a price. Specify this field and the &#x60;min_quantity&#x60; field to create a range of quantities allowed in a price..</param>
        /// <param name="discountLevel">Specifies at what level a discount should be applied: account, subscription, or plan..</param>
        /// <param name="revenueRecognitionRule">Determines when to recognize the revenue for this charge. You can choose to recognize upon invoicing or daily over time..</param>
        /// <param name="stackedDiscount">This field is only applicable for the Percentage Discount price. This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:        &lt;ul&gt;       &lt;li&gt;&#x60;true&#x60;: This is a stacked discount, which should be calculated by stacking with other discounts.&lt;/li&gt;       &lt;li&gt; &#x60;false&#x60;: This is not a stacked discount, which should be calculated in sequence with other discounts.&lt;/li&gt;&lt;/ul&gt; For more information, see &lt;a href&#x3D;&#39;https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models&#39; target&#x3D;&#39;_blank&#39;&gt;Stacked discounts&lt;/a&gt;.</param>
        /// <param name="amounts">amounts.</param>
        /// <param name="unitAmounts">unitAmounts.</param>
        /// <param name="discountAmounts">discountAmounts.</param>
        /// <param name="discountPercent">Discount percent. Specify this field if you offer a percentage-based discount..</param>
        /// <param name="priceBaseInterval">Specifies the base interval of a price. If not provided, this field defaults to &#x60;billing_period&#x60;. (default to PriceBaseIntervalEnum.Billingperiod).</param>
        /// <param name="overage">overage.</param>
        /// <param name="revenue">revenue.</param>
        /// <param name="accountingCode">An active accounting code defined in **Finance Settings &gt; Configure Accounting Codes** in your Zuora tenant..</param>
        /// <param name="prepayment">prepayment.</param>
        /// <param name="drawdown">drawdown.</param>
        /// <param name="taxable">taxable.</param>
        /// <param name="planId">Specify the ID of a plan to which this price is associated..</param>
        /// <param name="planNumber">Specify the number of a plan to which this price is associated. This field is required if plan_id is not supplied.</param>
        public PriceCreateRequest(Dictionary<string, Object> customFields = default(Dictionary<string, Object>), string name = default(string), string description = default(string), string recognizedRevenueAccountingCode = default(string), string deferredRevenueAccountingCode = default(string), Recurring recurring = default(Recurring), StartEventEnum? startEvent = StartEventEnum.Contracteffective, TiersModeEnum? tiersMode = default(TiersModeEnum?), List<ApplyDiscountToEnum> applyDiscountTo = default(List<ApplyDiscountToEnum>), List<Tier> tiers = default(List<Tier>), string taxCode = default(string), bool taxInclusive = default(bool), string unitOfMeasure = default(string), decimal quantity = default(decimal), decimal minQuantity = default(decimal), decimal maxQuantity = default(decimal), DiscountLevelEnum? discountLevel = default(DiscountLevelEnum?), RevenueRecognitionRuleEnum? revenueRecognitionRule = default(RevenueRecognitionRuleEnum?), bool stackedDiscount = default(bool), Dictionary<string, decimal> amounts = default(Dictionary<string, decimal>), Dictionary<string, decimal> unitAmounts = default(Dictionary<string, decimal>), Dictionary<string, decimal> discountAmounts = default(Dictionary<string, decimal>), decimal discountPercent = default(decimal), PriceBaseIntervalEnum? priceBaseInterval = PriceBaseIntervalEnum.Billingperiod, Overage overage = default(Overage), Revenue revenue = default(Revenue), string accountingCode = default(string), Prepayment prepayment = default(Prepayment), Drawdown drawdown = default(Drawdown), bool taxable = default(bool), string planId = default(string), string planNumber = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for PriceCreateRequest and cannot be null");
            }
            else
            {
                this.name = name;
            }

            this.overage = overage;
            this.revenue = revenue;
            this.custom_fields = customFields;
            this.description = description;
            this.recognized_revenue_accounting_code = recognizedRevenueAccountingCode;
            this.deferred_revenue_accounting_code = deferredRevenueAccountingCode;
            this.recurring = recurring;
            // use default value if no "startEvent" provided
            if (startEvent == null)
            {
                this.start_event = StartEventEnum.Contracteffective;
            }
            else
            {
                this.start_event = startEvent;
            }
            this.tiers_mode = tiersMode;
            this.apply_discount_to = applyDiscountTo;
            this.tiers = tiers;
            this.tax_code = taxCode;
            this.tax_inclusive = taxInclusive;
            this.unit_of_measure = unitOfMeasure;
            this.quantity = quantity;
            this.min_quantity = minQuantity;
            this.max_quantity = maxQuantity;
            this.discount_level = discountLevel;
            this.revenue_recognition_rule = revenueRecognitionRule;
            this.stacked_discount = stackedDiscount;
            this.amounts = amounts;
            this.unit_amounts = unitAmounts;
            this.discount_amounts = discountAmounts;
            this.discount_percent = discountPercent;
            // use default value if no "priceBaseInterval" provided
            if (priceBaseInterval == null)
            {
                this.price_base_interval = PriceBaseIntervalEnum.Billingperiod;
            }
            else
            {
                this.price_base_interval = priceBaseInterval;
            }
            this.overage = overage;
            this.revenue = revenue;
            this.accounting_code = accountingCode;
            this.prepayment = prepayment;
            this.drawdown = drawdown;
            this.taxable = taxable;
            this.plan_id = planId;
            this.plan_number = planNumber;
        }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>
        [DataMember(Name="updated_by_id", EmitDefaultValue=false)]
        public string updated_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public DateTime updated_time { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>
        [DataMember(Name="created_by_id", EmitDefaultValue=false)]
        public string created_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public DateTime created_time { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).
        /// </summary>
        /// <value>The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).</value>
        [DataMember(Name="custom_objects", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_objects { get; private set; }

        /// <summary>
        /// The name of the price.
        /// </summary>
        /// <value>The name of the price.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string name { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>
        [DataMember(Name="recognized_revenue_accounting_code", EmitDefaultValue=false)]
        [Obsolete]
        public string recognized_revenue_accounting_code { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>
        [DataMember(Name="deferred_revenue_accounting_code", EmitDefaultValue=false)]
        [Obsolete]
        public string deferred_revenue_accounting_code { get; set; }

        /// <summary>
        /// Gets or Sets recurring
        /// </summary>
        [DataMember(Name="recurring", EmitDefaultValue=false)]
        public Recurring recurring { get; set; }




        /// <summary>
        /// Price information for different tiers. When creating or updating tiered prices, you must specify this field and the &#x60;tiers_mode&#x60; field.
        /// </summary>
        /// <value>Price information for different tiers. When creating or updating tiered prices, you must specify this field and the &#x60;tiers_mode&#x60; field.</value>
        [DataMember(Name="tiers", EmitDefaultValue=false)]
        public List<Tier> tiers { get; set; }

        /// <summary>
        /// A tax code identifier. If a &#x60;tax_code&#x60; of a price is not provided when you create or update a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly.
        /// </summary>
        /// <value>A tax code identifier. If a &#x60;tax_code&#x60; of a price is not provided when you create or update a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly.</value>
        [DataMember(Name="tax_code", EmitDefaultValue=false)]
        public string tax_code { get; set; }

        /// <summary>
        /// If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax.
        /// </summary>
        /// <value>If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax.</value>
        [DataMember(Name="tax_inclusive", EmitDefaultValue=false)]
        public bool tax_inclusive { get; set; }

        /// <summary>
        /// A configured unit of measure. This field is required for per-unit prices.
        /// </summary>
        /// <value>A configured unit of measure. This field is required for per-unit prices.</value>
        [DataMember(Name="unit_of_measure", EmitDefaultValue=false)]
        public string unit_of_measure { get; set; }

        /// <summary>
        /// Quantity of the product to which your customers subscribe.
        /// </summary>
        /// <value>Quantity of the product to which your customers subscribe.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal quantity { get; set; }

        /// <summary>
        /// The minimum quantity for a price. Specify this field and the &#x60;max_quantity&#x60; field to create a range of quantities allowed in a price.
        /// </summary>
        /// <value>The minimum quantity for a price. Specify this field and the &#x60;max_quantity&#x60; field to create a range of quantities allowed in a price.</value>
        [DataMember(Name="min_quantity", EmitDefaultValue=false)]
        public decimal min_quantity { get; set; }

        /// <summary>
        /// The maximum quantity for a price. Specify this field and the &#x60;min_quantity&#x60; field to create a range of quantities allowed in a price.
        /// </summary>
        /// <value>The maximum quantity for a price. Specify this field and the &#x60;min_quantity&#x60; field to create a range of quantities allowed in a price.</value>
        [DataMember(Name="max_quantity", EmitDefaultValue=false)]
        public decimal max_quantity { get; set; }



        /// <summary>
        /// This field is only applicable for the Percentage Discount price. This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:        &lt;ul&gt;       &lt;li&gt;&#x60;true&#x60;: This is a stacked discount, which should be calculated by stacking with other discounts.&lt;/li&gt;       &lt;li&gt; &#x60;false&#x60;: This is not a stacked discount, which should be calculated in sequence with other discounts.&lt;/li&gt;&lt;/ul&gt; For more information, see &lt;a href&#x3D;&#39;https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models&#39; target&#x3D;&#39;_blank&#39;&gt;Stacked discounts&lt;/a&gt;
        /// </summary>
        /// <value>This field is only applicable for the Percentage Discount price. This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:        &lt;ul&gt;       &lt;li&gt;&#x60;true&#x60;: This is a stacked discount, which should be calculated by stacking with other discounts.&lt;/li&gt;       &lt;li&gt; &#x60;false&#x60;: This is not a stacked discount, which should be calculated in sequence with other discounts.&lt;/li&gt;&lt;/ul&gt; For more information, see &lt;a href&#x3D;&#39;https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models&#39; target&#x3D;&#39;_blank&#39;&gt;Stacked discounts&lt;/a&gt;</value>
        [DataMember(Name="stacked_discount", EmitDefaultValue=false)]
        public bool stacked_discount { get; set; }

        /// <summary>
        /// Gets or Sets amounts
        /// </summary>
        [DataMember(Name="amounts", EmitDefaultValue=false)]
        public Dictionary<string, decimal> amounts { get; set; }

        /// <summary>
        /// Gets or Sets unit_amounts
        /// </summary>
        [DataMember(Name="unit_amounts", EmitDefaultValue=false)]
        public Dictionary<string, decimal> unit_amounts { get; set; }

        /// <summary>
        /// Gets or Sets discount_amounts
        /// </summary>
        [DataMember(Name="discount_amounts", EmitDefaultValue=false)]
        public Dictionary<string, decimal> discount_amounts { get; set; }

        /// <summary>
        /// Discount percent. Specify this field if you offer a percentage-based discount.
        /// </summary>
        /// <value>Discount percent. Specify this field if you offer a percentage-based discount.</value>
        [DataMember(Name="discount_percent", EmitDefaultValue=false)]
        public decimal discount_percent { get; set; }


        /// <summary>
        /// Gets or Sets overage
        /// </summary>
        [DataMember(Name="overage", EmitDefaultValue=true)]
        [Obsolete]
        public Overage overage { get; set; }

        /// <summary>
        /// Gets or Sets revenue
        /// </summary>
        [DataMember(Name="revenue", EmitDefaultValue=true)]
        public Revenue revenue { get; set; }

        /// <summary>
        /// An active accounting code defined in **Finance Settings &gt; Configure Accounting Codes** in your Zuora tenant.
        /// </summary>
        /// <value>An active accounting code defined in **Finance Settings &gt; Configure Accounting Codes** in your Zuora tenant.</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string accounting_code { get; set; }

        /// <summary>
        /// Gets or Sets prepayment
        /// </summary>
        [DataMember(Name="prepayment", EmitDefaultValue=false)]
        public Prepayment prepayment { get; set; }

        /// <summary>
        /// Gets or Sets drawdown
        /// </summary>
        [DataMember(Name="drawdown", EmitDefaultValue=false)]
        public Drawdown drawdown { get; set; }

        /// <summary>
        /// Gets or Sets taxable
        /// </summary>
        [DataMember(Name="taxable", EmitDefaultValue=false)]
        public bool taxable { get; set; }

        /// <summary>
        /// Specify the ID of a plan to which this price is associated.
        /// </summary>
        /// <value>Specify the ID of a plan to which this price is associated.</value>
        [DataMember(Name="plan_id", EmitDefaultValue=false)]
        public string plan_id { get; set; }

        /// <summary>
        /// Specify the number of a plan to which this price is associated. This field is required if plan_id is not supplied
        /// </summary>
        /// <value>Specify the number of a plan to which this price is associated. This field is required if plan_id is not supplied</value>
        [DataMember(Name="plan_number", EmitDefaultValue=false)]
        public string plan_number { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceCreateRequest {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  updated_by_id: ").Append(updated_by_id).Append("\n");
            sb.Append("  updated_time: ").Append(updated_time).Append("\n");
            sb.Append("  created_by_id: ").Append(created_by_id).Append("\n");
            sb.Append("  created_time: ").Append(created_time).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  custom_objects: ").Append(custom_objects).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  recognized_revenue_accounting_code: ").Append(recognized_revenue_accounting_code).Append("\n");
            sb.Append("  deferred_revenue_accounting_code: ").Append(deferred_revenue_accounting_code).Append("\n");
            sb.Append("  recurring: ").Append(recurring).Append("\n");
            sb.Append("  start_event: ").Append(start_event).Append("\n");
            sb.Append("  tiers_mode: ").Append(tiers_mode).Append("\n");
            sb.Append("  apply_discount_to: ").Append(apply_discount_to).Append("\n");
            sb.Append("  tiers: ").Append(tiers).Append("\n");
            sb.Append("  tax_code: ").Append(tax_code).Append("\n");
            sb.Append("  tax_inclusive: ").Append(tax_inclusive).Append("\n");
            sb.Append("  unit_of_measure: ").Append(unit_of_measure).Append("\n");
            sb.Append("  quantity: ").Append(quantity).Append("\n");
            sb.Append("  min_quantity: ").Append(min_quantity).Append("\n");
            sb.Append("  max_quantity: ").Append(max_quantity).Append("\n");
            sb.Append("  discount_level: ").Append(discount_level).Append("\n");
            sb.Append("  revenue_recognition_rule: ").Append(revenue_recognition_rule).Append("\n");
            sb.Append("  stacked_discount: ").Append(stacked_discount).Append("\n");
            sb.Append("  amounts: ").Append(amounts).Append("\n");
            sb.Append("  unit_amounts: ").Append(unit_amounts).Append("\n");
            sb.Append("  discount_amounts: ").Append(discount_amounts).Append("\n");
            sb.Append("  discount_percent: ").Append(discount_percent).Append("\n");
            sb.Append("  price_base_interval: ").Append(price_base_interval).Append("\n");
            sb.Append("  overage: ").Append(overage).Append("\n");
            sb.Append("  revenue: ").Append(revenue).Append("\n");
            sb.Append("  accounting_code: ").Append(accounting_code).Append("\n");
            sb.Append("  prepayment: ").Append(prepayment).Append("\n");
            sb.Append("  drawdown: ").Append(drawdown).Append("\n");
            sb.Append("  taxable: ").Append(taxable).Append("\n");
            sb.Append("  plan_id: ").Append(plan_id).Append("\n");
            sb.Append("  plan_number: ").Append(plan_number).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceCreateRequest);
        }

        /// <summary>
        /// Returns true if PriceCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.updated_by_id == input.updated_by_id ||
                    (this.updated_by_id != null &&
                    this.updated_by_id.Equals(input.updated_by_id))
                ) && 
                (
                    this.updated_time == input.updated_time ||
                    (this.updated_time != null &&
                    this.updated_time.Equals(input.updated_time))
                ) && 
                (
                    this.created_by_id == input.created_by_id ||
                    (this.created_by_id != null &&
                    this.created_by_id.Equals(input.created_by_id))
                ) && 
                (
                    this.created_time == input.created_time ||
                    (this.created_time != null &&
                    this.created_time.Equals(input.created_time))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.custom_objects == input.custom_objects ||
                    this.custom_objects != null &&
                    input.custom_objects != null &&
                    this.custom_objects.SequenceEqual(input.custom_objects)
                ) && 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.recognized_revenue_accounting_code == input.recognized_revenue_accounting_code ||
                    (this.recognized_revenue_accounting_code != null &&
                    this.recognized_revenue_accounting_code.Equals(input.recognized_revenue_accounting_code))
                ) && 
                (
                    this.deferred_revenue_accounting_code == input.deferred_revenue_accounting_code ||
                    (this.deferred_revenue_accounting_code != null &&
                    this.deferred_revenue_accounting_code.Equals(input.deferred_revenue_accounting_code))
                ) && 
                (
                    this.recurring == input.recurring ||
                    (this.recurring != null &&
                    this.recurring.Equals(input.recurring))
                ) && 
                (
                    this.start_event == input.start_event ||
                    (this.start_event != null &&
                    this.start_event.Equals(input.start_event))
                ) && 
                (
                    this.tiers_mode == input.tiers_mode ||
                    (this.tiers_mode != null &&
                    this.tiers_mode.Equals(input.tiers_mode))
                ) && 
                (
                    this.apply_discount_to == input.apply_discount_to ||
                    this.apply_discount_to != null &&
                    input.apply_discount_to != null &&
                    this.apply_discount_to.SequenceEqual(input.apply_discount_to)
                ) && 
                (
                    this.tiers == input.tiers ||
                    this.tiers != null &&
                    input.tiers != null &&
                    this.tiers.SequenceEqual(input.tiers)
                ) && 
                (
                    this.tax_code == input.tax_code ||
                    (this.tax_code != null &&
                    this.tax_code.Equals(input.tax_code))
                ) && 
                (
                    this.tax_inclusive == input.tax_inclusive ||
                    (this.tax_inclusive != null &&
                    this.tax_inclusive.Equals(input.tax_inclusive))
                ) && 
                (
                    this.unit_of_measure == input.unit_of_measure ||
                    (this.unit_of_measure != null &&
                    this.unit_of_measure.Equals(input.unit_of_measure))
                ) && 
                (
                    this.quantity == input.quantity ||
                    (this.quantity != null &&
                    this.quantity.Equals(input.quantity))
                ) && 
                (
                    this.min_quantity == input.min_quantity ||
                    (this.min_quantity != null &&
                    this.min_quantity.Equals(input.min_quantity))
                ) && 
                (
                    this.max_quantity == input.max_quantity ||
                    (this.max_quantity != null &&
                    this.max_quantity.Equals(input.max_quantity))
                ) && 
                (
                    this.discount_level == input.discount_level ||
                    (this.discount_level != null &&
                    this.discount_level.Equals(input.discount_level))
                ) && 
                (
                    this.revenue_recognition_rule == input.revenue_recognition_rule ||
                    (this.revenue_recognition_rule != null &&
                    this.revenue_recognition_rule.Equals(input.revenue_recognition_rule))
                ) && 
                (
                    this.stacked_discount == input.stacked_discount ||
                    (this.stacked_discount != null &&
                    this.stacked_discount.Equals(input.stacked_discount))
                ) && 
                (
                    this.amounts == input.amounts ||
                    this.amounts != null &&
                    input.amounts != null &&
                    this.amounts.SequenceEqual(input.amounts)
                ) && 
                (
                    this.unit_amounts == input.unit_amounts ||
                    this.unit_amounts != null &&
                    input.unit_amounts != null &&
                    this.unit_amounts.SequenceEqual(input.unit_amounts)
                ) && 
                (
                    this.discount_amounts == input.discount_amounts ||
                    this.discount_amounts != null &&
                    input.discount_amounts != null &&
                    this.discount_amounts.SequenceEqual(input.discount_amounts)
                ) && 
                (
                    this.discount_percent == input.discount_percent ||
                    (this.discount_percent != null &&
                    this.discount_percent.Equals(input.discount_percent))
                ) && 
                (
                    this.price_base_interval == input.price_base_interval ||
                    (this.price_base_interval != null &&
                    this.price_base_interval.Equals(input.price_base_interval))
                ) && 
                (
                    this.overage == input.overage ||
                    (this.overage != null &&
                    this.overage.Equals(input.overage))
                ) && 
                (
                    this.revenue == input.revenue ||
                    (this.revenue != null &&
                    this.revenue.Equals(input.revenue))
                ) && 
                (
                    this.accounting_code == input.accounting_code ||
                    (this.accounting_code != null &&
                    this.accounting_code.Equals(input.accounting_code))
                ) && 
                (
                    this.prepayment == input.prepayment ||
                    (this.prepayment != null &&
                    this.prepayment.Equals(input.prepayment))
                ) && 
                (
                    this.drawdown == input.drawdown ||
                    (this.drawdown != null &&
                    this.drawdown.Equals(input.drawdown))
                ) && 
                (
                    this.taxable == input.taxable ||
                    (this.taxable != null &&
                    this.taxable.Equals(input.taxable))
                ) && 
                (
                    this.plan_id == input.plan_id ||
                    (this.plan_id != null &&
                    this.plan_id.Equals(input.plan_id))
                ) && 
                (
                    this.plan_number == input.plan_number ||
                    (this.plan_number != null &&
                    this.plan_number.Equals(input.plan_number))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.updated_by_id != null)
                    hashCode = hashCode * 59 + this.updated_by_id.GetHashCode();
                if (this.updated_time != null)
                    hashCode = hashCode * 59 + this.updated_time.GetHashCode();
                if (this.created_by_id != null)
                    hashCode = hashCode * 59 + this.created_by_id.GetHashCode();
                if (this.created_time != null)
                    hashCode = hashCode * 59 + this.created_time.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.custom_objects != null)
                    hashCode = hashCode * 59 + this.custom_objects.GetHashCode();
                if (this.name != null)
                    hashCode = hashCode * 59 + this.name.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.recognized_revenue_accounting_code != null)
                    hashCode = hashCode * 59 + this.recognized_revenue_accounting_code.GetHashCode();
                if (this.deferred_revenue_accounting_code != null)
                    hashCode = hashCode * 59 + this.deferred_revenue_accounting_code.GetHashCode();
                if (this.recurring != null)
                    hashCode = hashCode * 59 + this.recurring.GetHashCode();
                if (this.start_event != null)
                    hashCode = hashCode * 59 + this.start_event.GetHashCode();
                if (this.tiers_mode != null)
                    hashCode = hashCode * 59 + this.tiers_mode.GetHashCode();
                if (this.apply_discount_to != null)
                    hashCode = hashCode * 59 + this.apply_discount_to.GetHashCode();
                if (this.tiers != null)
                    hashCode = hashCode * 59 + this.tiers.GetHashCode();
                if (this.tax_code != null)
                    hashCode = hashCode * 59 + this.tax_code.GetHashCode();
                if (this.tax_inclusive != null)
                    hashCode = hashCode * 59 + this.tax_inclusive.GetHashCode();
                if (this.unit_of_measure != null)
                    hashCode = hashCode * 59 + this.unit_of_measure.GetHashCode();
                if (this.quantity != null)
                    hashCode = hashCode * 59 + this.quantity.GetHashCode();
                if (this.min_quantity != null)
                    hashCode = hashCode * 59 + this.min_quantity.GetHashCode();
                if (this.max_quantity != null)
                    hashCode = hashCode * 59 + this.max_quantity.GetHashCode();
                if (this.discount_level != null)
                    hashCode = hashCode * 59 + this.discount_level.GetHashCode();
                if (this.revenue_recognition_rule != null)
                    hashCode = hashCode * 59 + this.revenue_recognition_rule.GetHashCode();
                if (this.stacked_discount != null)
                    hashCode = hashCode * 59 + this.stacked_discount.GetHashCode();
                if (this.amounts != null)
                    hashCode = hashCode * 59 + this.amounts.GetHashCode();
                if (this.unit_amounts != null)
                    hashCode = hashCode * 59 + this.unit_amounts.GetHashCode();
                if (this.discount_amounts != null)
                    hashCode = hashCode * 59 + this.discount_amounts.GetHashCode();
                if (this.discount_percent != null)
                    hashCode = hashCode * 59 + this.discount_percent.GetHashCode();
                if (this.price_base_interval != null)
                    hashCode = hashCode * 59 + this.price_base_interval.GetHashCode();
                if (this.overage != null)
                    hashCode = hashCode * 59 + this.overage.GetHashCode();
                if (this.revenue != null)
                    hashCode = hashCode * 59 + this.revenue.GetHashCode();
                if (this.accounting_code != null)
                    hashCode = hashCode * 59 + this.accounting_code.GetHashCode();
                if (this.prepayment != null)
                    hashCode = hashCode * 59 + this.prepayment.GetHashCode();
                if (this.drawdown != null)
                    hashCode = hashCode * 59 + this.drawdown.GetHashCode();
                if (this.taxable != null)
                    hashCode = hashCode * 59 + this.taxable.GetHashCode();
                if (this.plan_id != null)
                    hashCode = hashCode * 59 + this.plan_id.GetHashCode();
                if (this.plan_number != null)
                    hashCode = hashCode * 59 + this.plan_number.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // recognized_revenue_accounting_code (string) maxLength
            if(this.recognized_revenue_accounting_code != null && this.recognized_revenue_accounting_code.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for recognized_revenue_accounting_code, length must be less than 100.", new [] { "recognized_revenue_accounting_code" });
            }


            // deferred_revenue_accounting_code (string) maxLength
            if(this.deferred_revenue_accounting_code != null && this.deferred_revenue_accounting_code.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for deferred_revenue_accounting_code, length must be less than 100.", new [] { "deferred_revenue_accounting_code" });
            }


            yield break;
        }
    }

}
