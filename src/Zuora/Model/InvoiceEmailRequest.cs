/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// InvoiceEmailRequest
    /// </summary>
    [DataContract]
    public partial class InvoiceEmailRequest :  IEquatable<InvoiceEmailRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceEmailRequest" /> class.
        /// </summary>
        /// <param name="email">An arbitrary list of comma-separated email addresses. Note: this parameter will be ignored if use_email_template is true..</param>
        /// <param name="useEmailTemplate">Indicates whether to email an invoice based on your email template settings. If you set this field to true, the invoice is sent to the email addresses specified in the To Email field of the email template..</param>
        public InvoiceEmailRequest(string email = default(string), bool useEmailTemplate = default(bool))
        {
            this.email = email;
            this.use_email_template = useEmailTemplate;
        }

        /// <summary>
        /// An arbitrary list of comma-separated email addresses. Note: this parameter will be ignored if use_email_template is true.
        /// </summary>
        /// <value>An arbitrary list of comma-separated email addresses. Note: this parameter will be ignored if use_email_template is true.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string email { get; set; }

        /// <summary>
        /// Indicates whether to email an invoice based on your email template settings. If you set this field to true, the invoice is sent to the email addresses specified in the To Email field of the email template.
        /// </summary>
        /// <value>Indicates whether to email an invoice based on your email template settings. If you set this field to true, the invoice is sent to the email addresses specified in the To Email field of the email template.</value>
        [DataMember(Name="use_email_template", EmitDefaultValue=false)]
        public bool use_email_template { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceEmailRequest {\n");
            sb.Append("  email: ").Append(email).Append("\n");
            sb.Append("  use_email_template: ").Append(use_email_template).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceEmailRequest);
        }

        /// <summary>
        /// Returns true if InvoiceEmailRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceEmailRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceEmailRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.email == input.email ||
                    (this.email != null &&
                    this.email.Equals(input.email))
                ) && 
                (
                    this.use_email_template == input.use_email_template ||
                    (this.use_email_template != null &&
                    this.use_email_template.Equals(input.use_email_template))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.email != null)
                    hashCode = hashCode * 59 + this.email.GetHashCode();
                if (this.use_email_template != null)
                    hashCode = hashCode * 59 + this.use_email_template.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
