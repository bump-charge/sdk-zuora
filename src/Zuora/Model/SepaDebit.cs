/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// If the &#x60;type&#x60; of the payment method is &#x60;sepa_debit&#x60;, this hash contains details about the SEPA bank account.
    /// </summary>
    [DataContract]
    public partial class SepaDebit :  IEquatable<SepaDebit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SepaDebit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SepaDebit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SepaDebit" /> class.
        /// </summary>
        /// <param name="iBAN">International Bank Account Number used to create the SEPA Debit payment method. (required).</param>
        /// <param name="mandate">mandate.</param>
        /// <param name="businessIdentificationCode">The BIC code used with the Sepa Debit payment method..</param>
        public SepaDebit(string iBAN = default(string), Mandate mandate = default(Mandate), string businessIdentificationCode = default(string))
        {
            // to ensure "iBAN" is required (not null)
            if (iBAN == null)
            {
                throw new InvalidDataException("iBAN is a required property for SepaDebit and cannot be null");
            }
            else
            {
                this.IBAN = iBAN;
            }

            this.mandate = mandate;
            this.business_identification_code = businessIdentificationCode;
        }

        /// <summary>
        /// International Bank Account Number used to create the SEPA Debit payment method.
        /// </summary>
        /// <value>International Bank Account Number used to create the SEPA Debit payment method.</value>
        [DataMember(Name="IBAN", EmitDefaultValue=true)]
        public string IBAN { get; set; }

        /// <summary>
        /// Gets or Sets mandate
        /// </summary>
        [DataMember(Name="mandate", EmitDefaultValue=false)]
        public Mandate mandate { get; set; }

        /// <summary>
        /// The BIC code used with the Sepa Debit payment method.
        /// </summary>
        /// <value>The BIC code used with the Sepa Debit payment method.</value>
        [DataMember(Name="business_identification_code", EmitDefaultValue=false)]
        public string business_identification_code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SepaDebit {\n");
            sb.Append("  IBAN: ").Append(IBAN).Append("\n");
            sb.Append("  mandate: ").Append(mandate).Append("\n");
            sb.Append("  business_identification_code: ").Append(business_identification_code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SepaDebit);
        }

        /// <summary>
        /// Returns true if SepaDebit instances are equal
        /// </summary>
        /// <param name="input">Instance of SepaDebit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SepaDebit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IBAN == input.IBAN ||
                    (this.IBAN != null &&
                    this.IBAN.Equals(input.IBAN))
                ) && 
                (
                    this.mandate == input.mandate ||
                    (this.mandate != null &&
                    this.mandate.Equals(input.mandate))
                ) && 
                (
                    this.business_identification_code == input.business_identification_code ||
                    (this.business_identification_code != null &&
                    this.business_identification_code.Equals(input.business_identification_code))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IBAN != null)
                    hashCode = hashCode * 59 + this.IBAN.GetHashCode();
                if (this.mandate != null)
                    hashCode = hashCode * 59 + this.mandate.GetHashCode();
                if (this.business_identification_code != null)
                    hashCode = hashCode * 59 + this.business_identification_code.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
