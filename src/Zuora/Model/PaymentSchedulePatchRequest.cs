/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// PaymentSchedulePatchRequest
    /// </summary>
    [DataContract]
    public partial class PaymentSchedulePatchRequest :  IEquatable<PaymentSchedulePatchRequest>, IValidatableObject
    {
        /// <summary>
        /// Unit in which term duration is defined. One of week or month.
        /// </summary>
        /// <value>Unit in which term duration is defined. One of week or month.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodEnum
        {
            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 1,

            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 2,

            /// <summary>
            /// Enum Biweekly for value: biweekly
            /// </summary>
            [EnumMember(Value = "biweekly")]
            Biweekly = 3

        }

        /// <summary>
        /// Unit in which term duration is defined. One of week or month.
        /// </summary>
        /// <value>Unit in which term duration is defined. One of week or month.</value>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public PeriodEnum? period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentSchedulePatchRequest" /> class.
        /// </summary>
        /// <param name="currency">Currency of the payment schedule. Note: This field is optional. The default value is the account&#39;s default currency. This field will be ignored when items is specified..</param>
        /// <param name="numberOfPayments">The number of payment schedule items to be created for this payment schedule..</param>
        /// <param name="paymentGatewayId">ID of the payment gateway used to collect payments. Note: This field is optional. The default value is the account&#39;s default payment gateway ID. If no payment gateway ID is found on the customer account level, the default value will be the tenant&#39;s default payment gateway ID. This field will be ignored when items is specified..</param>
        /// <param name="paymentMethodId">ID of the payment method. Note: This field is optional. The default value is the account&#39;s default payment method ID. This field will be ignored when items is specified..</param>
        /// <param name="paymentMethodNumber">The payment method number of the payment method to be used to collect payments..</param>
        /// <param name="runHour">At which hour in the day in the tenant&#39;s timezone this payment will be collected. Available values:[0,1,2,~,22,23]. If the time difference between your tenantâ€™s timezone and the timezone where Zuora servers are located is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half an hour later than your scheduled time.       The default value is &#x60;0&#x60;. If the payment &#x60;run_hour&#x60; and &#x60;scheduled_date&#x60; are backdated, the system will collect the payment when the next &#x60;run_hour&#x60; occurs..</param>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="paymentOptions">Container for the payment options, which describe the transactional level rules for processing payments. Currently, only the gateway_options type is supported. Payment schedule payment_options take precedence over payment schedule item payment_options..</param>
        /// <param name="startDate">The date of the first scheduled payment collection. Note: This parameter is required when &#x60;items&#x60; is not specified. This parameter will be ignored when &#x60;items&#x60; is specified..</param>
        /// <param name="amount">The amount of each payment schedule item in the payment schedule..</param>
        /// <param name="period">Unit in which term duration is defined. One of week or month..</param>
        public PaymentSchedulePatchRequest(string currency = default(string), int numberOfPayments = default(int), string paymentGatewayId = default(string), string paymentMethodId = default(string), string paymentMethodNumber = default(string), int runHour = default(int), Dictionary<string, Object> customFields = default(Dictionary<string, Object>), List<PaymentSchedulePaymentOptionRequest> paymentOptions = default(List<PaymentSchedulePaymentOptionRequest>), DateTime startDate = default(DateTime), decimal amount = default(decimal), PeriodEnum? period = default(PeriodEnum?))
        {
            this.currency = currency;
            this.number_of_payments = numberOfPayments;
            this.payment_gateway_id = paymentGatewayId;
            this.payment_method_id = paymentMethodId;
            this.payment_method_number = paymentMethodNumber;
            this.run_hour = runHour;
            this.custom_fields = customFields;
            this.payment_options = paymentOptions;
            this.start_date = startDate;
            this.amount = amount;
            this.period = period;
        }

        /// <summary>
        /// Currency of the payment schedule. Note: This field is optional. The default value is the account&#39;s default currency. This field will be ignored when items is specified.
        /// </summary>
        /// <value>Currency of the payment schedule. Note: This field is optional. The default value is the account&#39;s default currency. This field will be ignored when items is specified.</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string currency { get; set; }

        /// <summary>
        /// The number of payment schedule items to be created for this payment schedule.
        /// </summary>
        /// <value>The number of payment schedule items to be created for this payment schedule.</value>
        [DataMember(Name="number_of_payments", EmitDefaultValue=false)]
        public int number_of_payments { get; set; }

        /// <summary>
        /// ID of the payment gateway used to collect payments. Note: This field is optional. The default value is the account&#39;s default payment gateway ID. If no payment gateway ID is found on the customer account level, the default value will be the tenant&#39;s default payment gateway ID. This field will be ignored when items is specified.
        /// </summary>
        /// <value>ID of the payment gateway used to collect payments. Note: This field is optional. The default value is the account&#39;s default payment gateway ID. If no payment gateway ID is found on the customer account level, the default value will be the tenant&#39;s default payment gateway ID. This field will be ignored when items is specified.</value>
        [DataMember(Name="payment_gateway_id", EmitDefaultValue=false)]
        public string payment_gateway_id { get; set; }

        /// <summary>
        /// ID of the payment method. Note: This field is optional. The default value is the account&#39;s default payment method ID. This field will be ignored when items is specified.
        /// </summary>
        /// <value>ID of the payment method. Note: This field is optional. The default value is the account&#39;s default payment method ID. This field will be ignored when items is specified.</value>
        [DataMember(Name="payment_method_id", EmitDefaultValue=false)]
        public string payment_method_id { get; set; }

        /// <summary>
        /// The payment method number of the payment method to be used to collect payments.
        /// </summary>
        /// <value>The payment method number of the payment method to be used to collect payments.</value>
        [DataMember(Name="payment_method_number", EmitDefaultValue=false)]
        public string payment_method_number { get; set; }

        /// <summary>
        /// At which hour in the day in the tenant&#39;s timezone this payment will be collected. Available values:[0,1,2,~,22,23]. If the time difference between your tenantâ€™s timezone and the timezone where Zuora servers are located is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half an hour later than your scheduled time.       The default value is &#x60;0&#x60;. If the payment &#x60;run_hour&#x60; and &#x60;scheduled_date&#x60; are backdated, the system will collect the payment when the next &#x60;run_hour&#x60; occurs.
        /// </summary>
        /// <value>At which hour in the day in the tenant&#39;s timezone this payment will be collected. Available values:[0,1,2,~,22,23]. If the time difference between your tenantâ€™s timezone and the timezone where Zuora servers are located is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half an hour later than your scheduled time.       The default value is &#x60;0&#x60;. If the payment &#x60;run_hour&#x60; and &#x60;scheduled_date&#x60; are backdated, the system will collect the payment when the next &#x60;run_hour&#x60; occurs.</value>
        [DataMember(Name="run_hour", EmitDefaultValue=false)]
        public int run_hour { get; set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// Container for the payment options, which describe the transactional level rules for processing payments. Currently, only the gateway_options type is supported. Payment schedule payment_options take precedence over payment schedule item payment_options.
        /// </summary>
        /// <value>Container for the payment options, which describe the transactional level rules for processing payments. Currently, only the gateway_options type is supported. Payment schedule payment_options take precedence over payment schedule item payment_options.</value>
        [DataMember(Name="payment_options", EmitDefaultValue=false)]
        public List<PaymentSchedulePaymentOptionRequest> payment_options { get; set; }

        /// <summary>
        /// The date of the first scheduled payment collection. Note: This parameter is required when &#x60;items&#x60; is not specified. This parameter will be ignored when &#x60;items&#x60; is specified.
        /// </summary>
        /// <value>The date of the first scheduled payment collection. Note: This parameter is required when &#x60;items&#x60; is not specified. This parameter will be ignored when &#x60;items&#x60; is specified.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime start_date { get; set; }

        /// <summary>
        /// The amount of each payment schedule item in the payment schedule.
        /// </summary>
        /// <value>The amount of each payment schedule item in the payment schedule.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal amount { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentSchedulePatchRequest {\n");
            sb.Append("  currency: ").Append(currency).Append("\n");
            sb.Append("  number_of_payments: ").Append(number_of_payments).Append("\n");
            sb.Append("  payment_gateway_id: ").Append(payment_gateway_id).Append("\n");
            sb.Append("  payment_method_id: ").Append(payment_method_id).Append("\n");
            sb.Append("  payment_method_number: ").Append(payment_method_number).Append("\n");
            sb.Append("  run_hour: ").Append(run_hour).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  payment_options: ").Append(payment_options).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  period: ").Append(period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentSchedulePatchRequest);
        }

        /// <summary>
        /// Returns true if PaymentSchedulePatchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentSchedulePatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentSchedulePatchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.currency == input.currency ||
                    (this.currency != null &&
                    this.currency.Equals(input.currency))
                ) && 
                (
                    this.number_of_payments == input.number_of_payments ||
                    (this.number_of_payments != null &&
                    this.number_of_payments.Equals(input.number_of_payments))
                ) && 
                (
                    this.payment_gateway_id == input.payment_gateway_id ||
                    (this.payment_gateway_id != null &&
                    this.payment_gateway_id.Equals(input.payment_gateway_id))
                ) && 
                (
                    this.payment_method_id == input.payment_method_id ||
                    (this.payment_method_id != null &&
                    this.payment_method_id.Equals(input.payment_method_id))
                ) && 
                (
                    this.payment_method_number == input.payment_method_number ||
                    (this.payment_method_number != null &&
                    this.payment_method_number.Equals(input.payment_method_number))
                ) && 
                (
                    this.run_hour == input.run_hour ||
                    (this.run_hour != null &&
                    this.run_hour.Equals(input.run_hour))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.payment_options == input.payment_options ||
                    this.payment_options != null &&
                    input.payment_options != null &&
                    this.payment_options.SequenceEqual(input.payment_options)
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.period == input.period ||
                    (this.period != null &&
                    this.period.Equals(input.period))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.currency != null)
                    hashCode = hashCode * 59 + this.currency.GetHashCode();
                if (this.number_of_payments != null)
                    hashCode = hashCode * 59 + this.number_of_payments.GetHashCode();
                if (this.payment_gateway_id != null)
                    hashCode = hashCode * 59 + this.payment_gateway_id.GetHashCode();
                if (this.payment_method_id != null)
                    hashCode = hashCode * 59 + this.payment_method_id.GetHashCode();
                if (this.payment_method_number != null)
                    hashCode = hashCode * 59 + this.payment_method_number.GetHashCode();
                if (this.run_hour != null)
                    hashCode = hashCode * 59 + this.run_hour.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.payment_options != null)
                    hashCode = hashCode * 59 + this.payment_options.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.period != null)
                    hashCode = hashCode * 59 + this.period.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // run_hour (int) maximum
            if(this.run_hour > (int)23)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for run_hour, must be a value less than or equal to 23.", new [] { "run_hour" });
            }

            // run_hour (int) minimum
            if(this.run_hour < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for run_hour, must be a value greater than or equal to 0.", new [] { "run_hour" });
            }

            yield break;
        }
    }

}
