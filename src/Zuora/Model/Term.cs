/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Term information of the subscription.
    /// </summary>
    [DataContract]
    public partial class Term :  IEquatable<Term>, IValidatableObject
    {
        /// <summary>
        /// Unit in which term duration is defined. One of day, week, month or year.
        /// </summary>
        /// <value>Unit in which term duration is defined. One of day, week, month or year.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntervalEnum
        {
            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 1,

            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 2,

            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 3,

            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 4

        }

        /// <summary>
        /// Unit in which term duration is defined. One of day, week, month or year.
        /// </summary>
        /// <value>Unit in which term duration is defined. One of day, week, month or year.</value>
        [DataMember(Name="interval", EmitDefaultValue=false)]
        public IntervalEnum? interval { get; set; }
        /// <summary>
        /// Type of the subscription. Can be either &#x60;termed&#x60; or &#x60;evergreen&#x60;.
        /// </summary>
        /// <value>Type of the subscription. Can be either &#x60;termed&#x60; or &#x60;evergreen&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Evergreen for value: evergreen
            /// </summary>
            [EnumMember(Value = "evergreen")]
            Evergreen = 1,

            /// <summary>
            /// Enum Termed for value: termed
            /// </summary>
            [EnumMember(Value = "termed")]
            Termed = 2

        }

        /// <summary>
        /// Type of the subscription. Can be either &#x60;termed&#x60; or &#x60;evergreen&#x60;.
        /// </summary>
        /// <value>Type of the subscription. Can be either &#x60;termed&#x60; or &#x60;evergreen&#x60;.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Term" /> class.
        /// </summary>
        /// <param name="intervalCount">The number of intervals in a term. For example, interval&#x3D;year and interval_count&#x3D;1 represents a 1 year term..</param>
        /// <param name="interval">Unit in which term duration is defined. One of day, week, month or year..</param>
        /// <param name="startDate">Date when the subscription term starts..</param>
        /// <param name="type">Type of the subscription. Can be either &#x60;termed&#x60; or &#x60;evergreen&#x60;..</param>
        /// <param name="endDate">Date when the subscription term ends..</param>
        public Term(int intervalCount = default(int), IntervalEnum? interval = default(IntervalEnum?), DateTime startDate = default(DateTime), TypeEnum? type = default(TypeEnum?), DateTime endDate = default(DateTime))
        {
            this.interval_count = intervalCount;
            this.interval = interval;
            this.start_date = startDate;
            this.type = type;
            this.end_date = endDate;
        }

        /// <summary>
        /// The number of intervals in a term. For example, interval&#x3D;year and interval_count&#x3D;1 represents a 1 year term.
        /// </summary>
        /// <value>The number of intervals in a term. For example, interval&#x3D;year and interval_count&#x3D;1 represents a 1 year term.</value>
        [DataMember(Name="interval_count", EmitDefaultValue=false)]
        public int interval_count { get; set; }


        /// <summary>
        /// Date when the subscription term starts.
        /// </summary>
        /// <value>Date when the subscription term starts.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime start_date { get; set; }


        /// <summary>
        /// Date when the subscription term ends.
        /// </summary>
        /// <value>Date when the subscription term ends.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime end_date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Term {\n");
            sb.Append("  interval_count: ").Append(interval_count).Append("\n");
            sb.Append("  interval: ").Append(interval).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  type: ").Append(type).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Term);
        }

        /// <summary>
        /// Returns true if Term instances are equal
        /// </summary>
        /// <param name="input">Instance of Term to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Term input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.interval_count == input.interval_count ||
                    (this.interval_count != null &&
                    this.interval_count.Equals(input.interval_count))
                ) && 
                (
                    this.interval == input.interval ||
                    (this.interval != null &&
                    this.interval.Equals(input.interval))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.type == input.type ||
                    (this.type != null &&
                    this.type.Equals(input.type))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.interval_count != null)
                    hashCode = hashCode * 59 + this.interval_count.GetHashCode();
                if (this.interval != null)
                    hashCode = hashCode * 59 + this.interval.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.type != null)
                    hashCode = hashCode * 59 + this.type.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // interval_count (int) minimum
            if(this.interval_count < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for interval_count, must be a value greater than or equal to 1.", new [] { "interval_count" });
            }

            yield break;
        }
    }

}
