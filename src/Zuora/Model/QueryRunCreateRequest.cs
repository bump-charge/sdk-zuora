/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// QueryRunCreateRequest
    /// </summary>
    [DataContract]
    public partial class QueryRunCreateRequest :  IEquatable<QueryRunCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// If supplied, Zuora with compress the output file using the specified compression algorithm.
        /// </summary>
        /// <value>If supplied, Zuora with compress the output file using the specified compression algorithm.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentEncodingEnum
        {
            /// <summary>
            /// Enum Gzip for value: gzip
            /// </summary>
            [EnumMember(Value = "gzip")]
            Gzip = 1,

            /// <summary>
            /// Enum Zip for value: zip
            /// </summary>
            [EnumMember(Value = "zip")]
            Zip = 2,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 3

        }

        /// <summary>
        /// If supplied, Zuora with compress the output file using the specified compression algorithm.
        /// </summary>
        /// <value>If supplied, Zuora with compress the output file using the specified compression algorithm.</value>
        [DataMember(Name="content_encoding", EmitDefaultValue=false)]
        public ContentEncodingEnum? content_encoding { get; set; }
        /// <summary>
        /// The type of the file returned.
        /// </summary>
        /// <value>The type of the file returned.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentTypeEnum
        {
            /// <summary>
            /// Enum Json for value: json
            /// </summary>
            [EnumMember(Value = "json")]
            Json = 1,

            /// <summary>
            /// Enum Csv for value: csv
            /// </summary>
            [EnumMember(Value = "csv")]
            Csv = 2,

            /// <summary>
            /// Enum Tsv for value: tsv
            /// </summary>
            [EnumMember(Value = "tsv")]
            Tsv = 3,

            /// <summary>
            /// Enum Dsv for value: dsv
            /// </summary>
            [EnumMember(Value = "dsv")]
            Dsv = 4

        }

        /// <summary>
        /// The type of the file returned.
        /// </summary>
        /// <value>The type of the file returned.</value>
        [DataMember(Name="content_type", EmitDefaultValue=true)]
        public ContentTypeEnum content_type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryRunCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QueryRunCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryRunCreateRequest" /> class.
        /// </summary>
        /// <param name="columnSeparator">The character used as delimiter to separate values in the output file..</param>
        /// <param name="contentEncoding">If supplied, Zuora with compress the output file using the specified compression algorithm..</param>
        /// <param name="encryptionKey">Base64-encoded public key of a 1024-bit RSA key-pair. If you set this field, Zuora will encrypt the query results using the provided public key. You must use the corresponding private key to decrypt the query results..</param>
        /// <param name="contentType">The type of the file returned. (required).</param>
        /// <param name="sql">The SQL statement of the query. (required).</param>
        /// <param name="readDeleted">If set to &#x60;true&#x60;, any deleted records are included in the response..</param>
        public QueryRunCreateRequest(string columnSeparator = default(string), ContentEncodingEnum? contentEncoding = default(ContentEncodingEnum?), string encryptionKey = default(string), ContentTypeEnum contentType = default(ContentTypeEnum), string sql = default(string), bool readDeleted = default(bool))
        {
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new InvalidDataException("contentType is a required property for QueryRunCreateRequest and cannot be null");
            }
            else
            {
                this.content_type = contentType;
            }

            // to ensure "sql" is required (not null)
            if (sql == null)
            {
                throw new InvalidDataException("sql is a required property for QueryRunCreateRequest and cannot be null");
            }
            else
            {
                this.sql = sql;
            }

            this.column_separator = columnSeparator;
            this.content_encoding = contentEncoding;
            this.encryption_key = encryptionKey;
            this.read_deleted = readDeleted;
        }

        /// <summary>
        /// The character used as delimiter to separate values in the output file.
        /// </summary>
        /// <value>The character used as delimiter to separate values in the output file.</value>
        [DataMember(Name="column_separator", EmitDefaultValue=false)]
        public string column_separator { get; set; }


        /// <summary>
        /// Base64-encoded public key of a 1024-bit RSA key-pair. If you set this field, Zuora will encrypt the query results using the provided public key. You must use the corresponding private key to decrypt the query results.
        /// </summary>
        /// <value>Base64-encoded public key of a 1024-bit RSA key-pair. If you set this field, Zuora will encrypt the query results using the provided public key. You must use the corresponding private key to decrypt the query results.</value>
        [DataMember(Name="encryption_key", EmitDefaultValue=false)]
        public string encryption_key { get; set; }


        /// <summary>
        /// The SQL statement of the query.
        /// </summary>
        /// <value>The SQL statement of the query.</value>
        [DataMember(Name="sql", EmitDefaultValue=true)]
        public string sql { get; set; }

        /// <summary>
        /// If set to &#x60;true&#x60;, any deleted records are included in the response.
        /// </summary>
        /// <value>If set to &#x60;true&#x60;, any deleted records are included in the response.</value>
        [DataMember(Name="read_deleted", EmitDefaultValue=false)]
        public bool read_deleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryRunCreateRequest {\n");
            sb.Append("  column_separator: ").Append(column_separator).Append("\n");
            sb.Append("  content_encoding: ").Append(content_encoding).Append("\n");
            sb.Append("  encryption_key: ").Append(encryption_key).Append("\n");
            sb.Append("  content_type: ").Append(content_type).Append("\n");
            sb.Append("  sql: ").Append(sql).Append("\n");
            sb.Append("  read_deleted: ").Append(read_deleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryRunCreateRequest);
        }

        /// <summary>
        /// Returns true if QueryRunCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryRunCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryRunCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.column_separator == input.column_separator ||
                    (this.column_separator != null &&
                    this.column_separator.Equals(input.column_separator))
                ) && 
                (
                    this.content_encoding == input.content_encoding ||
                    (this.content_encoding != null &&
                    this.content_encoding.Equals(input.content_encoding))
                ) && 
                (
                    this.encryption_key == input.encryption_key ||
                    (this.encryption_key != null &&
                    this.encryption_key.Equals(input.encryption_key))
                ) && 
                (
                    this.content_type == input.content_type ||
                    (this.content_type != null &&
                    this.content_type.Equals(input.content_type))
                ) && 
                (
                    this.sql == input.sql ||
                    (this.sql != null &&
                    this.sql.Equals(input.sql))
                ) && 
                (
                    this.read_deleted == input.read_deleted ||
                    (this.read_deleted != null &&
                    this.read_deleted.Equals(input.read_deleted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.column_separator != null)
                    hashCode = hashCode * 59 + this.column_separator.GetHashCode();
                if (this.content_encoding != null)
                    hashCode = hashCode * 59 + this.content_encoding.GetHashCode();
                if (this.encryption_key != null)
                    hashCode = hashCode * 59 + this.encryption_key.GetHashCode();
                if (this.content_type != null)
                    hashCode = hashCode * 59 + this.content_type.GetHashCode();
                if (this.sql != null)
                    hashCode = hashCode * 59 + this.sql.GetHashCode();
                if (this.read_deleted != null)
                    hashCode = hashCode * 59 + this.read_deleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
