/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Subscription item information.
    /// </summary>
    [DataContract]
    public partial class SubscriptionItem :  IEquatable<SubscriptionItem>, IValidatableObject
    {
        /// <summary>
        /// Based on the current date to populate a state field with the enumeration: [inactive, active, expired] where inactive would represent charge segments with a start_date in the future and expired charge segments with an end_date in the past.
        /// </summary>
        /// <value>Based on the current date to populate a state field with the enumeration: [inactive, active, expired] where inactive would represent charge segments with a start_date in the future and expired charge segments with an end_date in the past.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Inactive for value: inactive
            /// </summary>
            [EnumMember(Value = "inactive")]
            Inactive = 1,

            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 2,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 3

        }

        /// <summary>
        /// Based on the current date to populate a state field with the enumeration: [inactive, active, expired] where inactive would represent charge segments with a start_date in the future and expired charge segments with an end_date in the past.
        /// </summary>
        /// <value>Based on the current date to populate a state field with the enumeration: [inactive, active, expired] where inactive would represent charge segments with a start_date in the future and expired charge segments with an end_date in the past.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? state { get; set; }
        /// <summary>
        /// Specifies when to start billing your customer.
        /// </summary>
        /// <value>Specifies when to start billing your customer.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StartEventEnum
        {
            /// <summary>
            /// Enum Contracteffective for value: contract_effective
            /// </summary>
            [EnumMember(Value = "contract_effective")]
            Contracteffective = 1,

            /// <summary>
            /// Enum Serviceactivation for value: service_activation
            /// </summary>
            [EnumMember(Value = "service_activation")]
            Serviceactivation = 2,

            /// <summary>
            /// Enum Customeracceptance for value: customer_acceptance
            /// </summary>
            [EnumMember(Value = "customer_acceptance")]
            Customeracceptance = 3,

            /// <summary>
            /// Enum Specificdate for value: specific_date
            /// </summary>
            [EnumMember(Value = "specific_date")]
            Specificdate = 4

        }

        /// <summary>
        /// Specifies when to start billing your customer.
        /// </summary>
        /// <value>Specifies when to start billing your customer.</value>
        [DataMember(Name="start_event", EmitDefaultValue=false)]
        public StartEventEnum? start_event { get; set; }
        /// <summary>
        /// Specifies the kind of tiering.
        /// </summary>
        /// <value>Specifies the kind of tiering.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TiersModeEnum
        {
            /// <summary>
            /// Enum Graduated for value: graduated
            /// </summary>
            [EnumMember(Value = "graduated")]
            Graduated = 1,

            /// <summary>
            /// Enum Volume for value: volume
            /// </summary>
            [EnumMember(Value = "volume")]
            Volume = 2,

            /// <summary>
            /// Enum Highwatermarkvolume for value: high_watermark_volume
            /// </summary>
            [EnumMember(Value = "high_watermark_volume")]
            Highwatermarkvolume = 3,

            /// <summary>
            /// Enum Highwatermarkgraduated for value: high_watermark_graduated
            /// </summary>
            [EnumMember(Value = "high_watermark_graduated")]
            Highwatermarkgraduated = 4,

            /// <summary>
            /// Enum Graduatedwithoverage for value: graduated_with_overage
            /// </summary>
            [EnumMember(Value = "graduated_with_overage")]
            Graduatedwithoverage = 5

        }

        /// <summary>
        /// Specifies the kind of tiering.
        /// </summary>
        /// <value>Specifies the kind of tiering.</value>
        [DataMember(Name="tiers_mode", EmitDefaultValue=false)]
        public TiersModeEnum? tiers_mode { get; set; }
        /// <summary>
        /// Defines apply_discount_to
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplyDiscountToEnum
        {
            /// <summary>
            /// Enum Onetime for value: one_time
            /// </summary>
            [EnumMember(Value = "one_time")]
            Onetime = 1,

            /// <summary>
            /// Enum Recurring for value: recurring
            /// </summary>
            [EnumMember(Value = "recurring")]
            Recurring = 2,

            /// <summary>
            /// Enum Usage for value: usage
            /// </summary>
            [EnumMember(Value = "usage")]
            Usage = 3

        }


        /// <summary>
        /// Any combination of one_time, recurring and plan.
        /// </summary>
        /// <value>Any combination of one_time, recurring and plan.</value>
        [DataMember(Name="apply_discount_to", EmitDefaultValue=false)]
        public List<ApplyDiscountToEnum> apply_discount_to { get; set; }
        /// <summary>
        /// Specifies at what level a discount should be applied: one of account, subscription or plan.
        /// </summary>
        /// <value>Specifies at what level a discount should be applied: one of account, subscription or plan.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiscountLevelEnum
        {
            /// <summary>
            /// Enum Account for value: account
            /// </summary>
            [EnumMember(Value = "account")]
            Account = 1,

            /// <summary>
            /// Enum Subscription for value: subscription
            /// </summary>
            [EnumMember(Value = "subscription")]
            Subscription = 2,

            /// <summary>
            /// Enum Plan for value: plan
            /// </summary>
            [EnumMember(Value = "plan")]
            Plan = 3

        }

        /// <summary>
        /// Specifies at what level a discount should be applied: one of account, subscription or plan.
        /// </summary>
        /// <value>Specifies at what level a discount should be applied: one of account, subscription or plan.</value>
        [DataMember(Name="discount_level", EmitDefaultValue=false)]
        public DiscountLevelEnum? discount_level { get; set; }
        /// <summary>
        /// Specifies the base interval of the price the subscriber is subscribed to. If not provided, this field defaults to &#x60;billing_period&#x60;.
        /// </summary>
        /// <value>Specifies the base interval of the price the subscriber is subscribed to. If not provided, this field defaults to &#x60;billing_period&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriceBaseIntervalEnum
        {
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 1,

            /// <summary>
            /// Enum Billingperiod for value: billing_period
            /// </summary>
            [EnumMember(Value = "billing_period")]
            Billingperiod = 2,

            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 3

        }

        /// <summary>
        /// Specifies the base interval of the price the subscriber is subscribed to. If not provided, this field defaults to &#x60;billing_period&#x60;.
        /// </summary>
        /// <value>Specifies the base interval of the price the subscriber is subscribed to. If not provided, this field defaults to &#x60;billing_period&#x60;.</value>
        [DataMember(Name="price_base_interval", EmitDefaultValue=false)]
        public PriceBaseIntervalEnum? price_base_interval { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionItem" /> class.
        /// </summary>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="subscriptionItemNumber">Human-readable identifier of the subscription item. It can be user-supplied..</param>
        /// <param name="name">The name of the subscription item..</param>
        /// <param name="description">An arbitrary string attached to the object. Often useful for displaying to users..</param>
        /// <param name="productId">Identifier of the product with which this subscription is associated..</param>
        /// <param name="chargedThroughDate">The date through which a customer has been billed for the subscription item..</param>
        /// <param name="recurring">recurring.</param>
        /// <param name="active">Indicates whether the price is active and can be used for new purchases..</param>
        /// <param name="state">Based on the current date to populate a state field with the enumeration: [inactive, active, expired] where inactive would represent charge segments with a start_date in the future and expired charge segments with an end_date in the past..</param>
        /// <param name="startEvent">Specifies when to start billing your customer..</param>
        /// <param name="tiersMode">Specifies the kind of tiering..</param>
        /// <param name="tiers">tiers.</param>
        /// <param name="taxCode">A tax code identifier. If the &#x60;tax_code&#x60; of a price is not provided when you create or override a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly..</param>
        /// <param name="taxInclusive">If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax..</param>
        /// <param name="unitOfMeasure">A configured unit of measure. This field is required for per-unit prices..</param>
        /// <param name="quantity">Quantity of the product to which your customers subscribe..</param>
        /// <param name="amount">The amount of the price. Specify this field if you want to override the original price with a flat-fee price.</param>
        /// <param name="unitAmount">The unit amount of the price. Specify this field if you want to override the original price with a per-unit price..</param>
        /// <param name="discountAmount">Discount amount. Specify this field if you offer an amount-based discount..</param>
        /// <param name="discountPercent">Discount percent. Specify this field if you offer a percentage-based discount..</param>
        /// <param name="applyDiscountTo">Any combination of one_time, recurring and plan..</param>
        /// <param name="discountLevel">Specifies at what level a discount should be applied: one of account, subscription or plan..</param>
        /// <param name="priceBaseInterval">Specifies the base interval of the price the subscriber is subscribed to. If not provided, this field defaults to &#x60;billing_period&#x60;..</param>
        /// <param name="overage">overage.</param>
        /// <param name="chargeModel">Charge model of the price. See [Charge models](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models) for more information..</param>
        /// <param name="chargeType">Type of the charge. It can be one of the following types: one-time, recurring, or usage..</param>
        /// <param name="priceId">Identifier of the price..</param>
        /// <param name="price">price.</param>
        /// <param name="subscriptionPlanId">Identifier of the subscription plan this subscription item belongs to..</param>
        /// <param name="subscriptionPlan">subscriptionPlan.</param>
        public SubscriptionItem(Dictionary<string, Object> customFields = default(Dictionary<string, Object>), string subscriptionItemNumber = default(string), string name = default(string), string description = default(string), string productId = default(string), DateTime chargedThroughDate = default(DateTime), Recurring recurring = default(Recurring), bool active = default(bool), StateEnum? state = default(StateEnum?), StartEventEnum? startEvent = default(StartEventEnum?), TiersModeEnum? tiersMode = default(TiersModeEnum?), List<ItemTier> tiers = default(List<ItemTier>), string taxCode = default(string), bool taxInclusive = default(bool), string unitOfMeasure = default(string), decimal quantity = default(decimal), decimal amount = default(decimal), decimal unitAmount = default(decimal), decimal discountAmount = default(decimal), decimal discountPercent = default(decimal), List<ApplyDiscountToEnum> applyDiscountTo = default(List<ApplyDiscountToEnum>), DiscountLevelEnum? discountLevel = default(DiscountLevelEnum?), PriceBaseIntervalEnum? priceBaseInterval = default(PriceBaseIntervalEnum?), Overage overage = default(Overage), string chargeModel = default(string), string chargeType = default(string), string priceId = default(string), Price price = default(Price), string subscriptionPlanId = default(string), SubscriptionPlan subscriptionPlan = default(SubscriptionPlan))
        {
            this.custom_fields = customFields;
            this.subscription_item_number = subscriptionItemNumber;
            this.name = name;
            this.description = description;
            this.product_id = productId;
            this.charged_through_date = chargedThroughDate;
            this.recurring = recurring;
            this.active = active;
            this.state = state;
            this.start_event = startEvent;
            this.tiers_mode = tiersMode;
            this.tiers = tiers;
            this.tax_code = taxCode;
            this.tax_inclusive = taxInclusive;
            this.unit_of_measure = unitOfMeasure;
            this.quantity = quantity;
            this.amount = amount;
            this.unit_amount = unitAmount;
            this.discount_amount = discountAmount;
            this.discount_percent = discountPercent;
            this.apply_discount_to = applyDiscountTo;
            this.discount_level = discountLevel;
            this.price_base_interval = priceBaseInterval;
            this.overage = overage;
            this.charge_model = chargeModel;
            this.charge_type = chargeType;
            this.price_id = priceId;
            this.price = price;
            this.subscription_plan_id = subscriptionPlanId;
            this.subscription_plan = subscriptionPlan;
        }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>
        [DataMember(Name="updated_by_id", EmitDefaultValue=false)]
        public string updated_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public DateTime updated_time { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>
        [DataMember(Name="created_by_id", EmitDefaultValue=false)]
        public string created_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public DateTime created_time { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).
        /// </summary>
        /// <value>The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).</value>
        [DataMember(Name="custom_objects", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_objects { get; private set; }

        /// <summary>
        /// Human-readable identifier of the subscription item. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the subscription item. It can be user-supplied.</value>
        [DataMember(Name="subscription_item_number", EmitDefaultValue=false)]
        public string subscription_item_number { get; set; }

        /// <summary>
        /// The name of the subscription item.
        /// </summary>
        /// <value>The name of the subscription item.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string name { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Identifier of the product with which this subscription is associated.
        /// </summary>
        /// <value>Identifier of the product with which this subscription is associated.</value>
        [DataMember(Name="product_id", EmitDefaultValue=false)]
        public string product_id { get; set; }

        /// <summary>
        /// The date through which a customer has been billed for the subscription item.
        /// </summary>
        /// <value>The date through which a customer has been billed for the subscription item.</value>
        [DataMember(Name="charged_through_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime charged_through_date { get; set; }

        /// <summary>
        /// Gets or Sets recurring
        /// </summary>
        [DataMember(Name="recurring", EmitDefaultValue=false)]
        public Recurring recurring { get; set; }

        /// <summary>
        /// Indicates whether the price is active and can be used for new purchases.
        /// </summary>
        /// <value>Indicates whether the price is active and can be used for new purchases.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool active { get; set; }




        /// <summary>
        /// Gets or Sets tiers
        /// </summary>
        [DataMember(Name="tiers", EmitDefaultValue=false)]
        public List<ItemTier> tiers { get; set; }

        /// <summary>
        /// A tax code identifier. If the &#x60;tax_code&#x60; of a price is not provided when you create or override a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly.
        /// </summary>
        /// <value>A tax code identifier. If the &#x60;tax_code&#x60; of a price is not provided when you create or override a price, Zuora will treat the charged amount as non-taxable. If this code is provide, Zuora considers that this price is taxable and the charged amount will be handled accordingly.</value>
        [DataMember(Name="tax_code", EmitDefaultValue=false)]
        public string tax_code { get; set; }

        /// <summary>
        /// If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax.
        /// </summary>
        /// <value>If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax.</value>
        [DataMember(Name="tax_inclusive", EmitDefaultValue=false)]
        public bool tax_inclusive { get; set; }

        /// <summary>
        /// A configured unit of measure. This field is required for per-unit prices.
        /// </summary>
        /// <value>A configured unit of measure. This field is required for per-unit prices.</value>
        [DataMember(Name="unit_of_measure", EmitDefaultValue=false)]
        public string unit_of_measure { get; set; }

        /// <summary>
        /// Quantity of the product to which your customers subscribe.
        /// </summary>
        /// <value>Quantity of the product to which your customers subscribe.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal quantity { get; set; }

        /// <summary>
        /// The amount of the price. Specify this field if you want to override the original price with a flat-fee price
        /// </summary>
        /// <value>The amount of the price. Specify this field if you want to override the original price with a flat-fee price</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal amount { get; set; }

        /// <summary>
        /// The unit amount of the price. Specify this field if you want to override the original price with a per-unit price.
        /// </summary>
        /// <value>The unit amount of the price. Specify this field if you want to override the original price with a per-unit price.</value>
        [DataMember(Name="unit_amount", EmitDefaultValue=false)]
        public decimal unit_amount { get; set; }

        /// <summary>
        /// Discount amount. Specify this field if you offer an amount-based discount.
        /// </summary>
        /// <value>Discount amount. Specify this field if you offer an amount-based discount.</value>
        [DataMember(Name="discount_amount", EmitDefaultValue=false)]
        public decimal discount_amount { get; set; }

        /// <summary>
        /// Discount percent. Specify this field if you offer a percentage-based discount.
        /// </summary>
        /// <value>Discount percent. Specify this field if you offer a percentage-based discount.</value>
        [DataMember(Name="discount_percent", EmitDefaultValue=false)]
        public decimal discount_percent { get; set; }




        /// <summary>
        /// Gets or Sets overage
        /// </summary>
        [DataMember(Name="overage", EmitDefaultValue=false)]
        public Overage overage { get; set; }

        /// <summary>
        /// Charge model of the price. See [Charge models](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models) for more information.
        /// </summary>
        /// <value>Charge model of the price. See [Charge models](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models) for more information.</value>
        [DataMember(Name="charge_model", EmitDefaultValue=false)]
        public string charge_model { get; set; }

        /// <summary>
        /// Type of the charge. It can be one of the following types: one-time, recurring, or usage.
        /// </summary>
        /// <value>Type of the charge. It can be one of the following types: one-time, recurring, or usage.</value>
        [DataMember(Name="charge_type", EmitDefaultValue=false)]
        public string charge_type { get; set; }

        /// <summary>
        /// Identifier of the price.
        /// </summary>
        /// <value>Identifier of the price.</value>
        [DataMember(Name="price_id", EmitDefaultValue=false)]
        public string price_id { get; set; }

        /// <summary>
        /// Gets or Sets price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public Price price { get; set; }

        /// <summary>
        /// Identifier of the subscription plan this subscription item belongs to.
        /// </summary>
        /// <value>Identifier of the subscription plan this subscription item belongs to.</value>
        [DataMember(Name="subscription_plan_id", EmitDefaultValue=false)]
        public string subscription_plan_id { get; set; }

        /// <summary>
        /// Gets or Sets subscription_plan
        /// </summary>
        [DataMember(Name="subscription_plan", EmitDefaultValue=false)]
        public SubscriptionPlan subscription_plan { get; set; }

        /// <summary>
        /// The date when the subscription item starts.
        /// </summary>
        /// <value>The date when the subscription item starts.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime start_date { get; private set; }

        /// <summary>
        /// The date when the subscription item ends.
        /// </summary>
        /// <value>The date when the subscription item ends.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime end_date { get; private set; }

        /// <summary>
        /// The date until when charges are processed. When billing takes place in arrears, such as usage-based prices, this field value is the the same as the &#x60;ChargedThroughDate&#x60; value. This date is the earliest date when a charge can be amended.
        /// </summary>
        /// <value>The date until when charges are processed. When billing takes place in arrears, such as usage-based prices, this field value is the the same as the &#x60;ChargedThroughDate&#x60; value. This date is the earliest date when a charge can be amended.</value>
        [DataMember(Name="processed_through_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime processed_through_date { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionItem {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  updated_by_id: ").Append(updated_by_id).Append("\n");
            sb.Append("  updated_time: ").Append(updated_time).Append("\n");
            sb.Append("  created_by_id: ").Append(created_by_id).Append("\n");
            sb.Append("  created_time: ").Append(created_time).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  custom_objects: ").Append(custom_objects).Append("\n");
            sb.Append("  subscription_item_number: ").Append(subscription_item_number).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  product_id: ").Append(product_id).Append("\n");
            sb.Append("  charged_through_date: ").Append(charged_through_date).Append("\n");
            sb.Append("  recurring: ").Append(recurring).Append("\n");
            sb.Append("  active: ").Append(active).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  start_event: ").Append(start_event).Append("\n");
            sb.Append("  tiers_mode: ").Append(tiers_mode).Append("\n");
            sb.Append("  tiers: ").Append(tiers).Append("\n");
            sb.Append("  tax_code: ").Append(tax_code).Append("\n");
            sb.Append("  tax_inclusive: ").Append(tax_inclusive).Append("\n");
            sb.Append("  unit_of_measure: ").Append(unit_of_measure).Append("\n");
            sb.Append("  quantity: ").Append(quantity).Append("\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  unit_amount: ").Append(unit_amount).Append("\n");
            sb.Append("  discount_amount: ").Append(discount_amount).Append("\n");
            sb.Append("  discount_percent: ").Append(discount_percent).Append("\n");
            sb.Append("  apply_discount_to: ").Append(apply_discount_to).Append("\n");
            sb.Append("  discount_level: ").Append(discount_level).Append("\n");
            sb.Append("  price_base_interval: ").Append(price_base_interval).Append("\n");
            sb.Append("  overage: ").Append(overage).Append("\n");
            sb.Append("  charge_model: ").Append(charge_model).Append("\n");
            sb.Append("  charge_type: ").Append(charge_type).Append("\n");
            sb.Append("  price_id: ").Append(price_id).Append("\n");
            sb.Append("  price: ").Append(price).Append("\n");
            sb.Append("  subscription_plan_id: ").Append(subscription_plan_id).Append("\n");
            sb.Append("  subscription_plan: ").Append(subscription_plan).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  processed_through_date: ").Append(processed_through_date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionItem);
        }

        /// <summary>
        /// Returns true if SubscriptionItem instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.updated_by_id == input.updated_by_id ||
                    (this.updated_by_id != null &&
                    this.updated_by_id.Equals(input.updated_by_id))
                ) && 
                (
                    this.updated_time == input.updated_time ||
                    (this.updated_time != null &&
                    this.updated_time.Equals(input.updated_time))
                ) && 
                (
                    this.created_by_id == input.created_by_id ||
                    (this.created_by_id != null &&
                    this.created_by_id.Equals(input.created_by_id))
                ) && 
                (
                    this.created_time == input.created_time ||
                    (this.created_time != null &&
                    this.created_time.Equals(input.created_time))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.custom_objects == input.custom_objects ||
                    this.custom_objects != null &&
                    input.custom_objects != null &&
                    this.custom_objects.SequenceEqual(input.custom_objects)
                ) && 
                (
                    this.subscription_item_number == input.subscription_item_number ||
                    (this.subscription_item_number != null &&
                    this.subscription_item_number.Equals(input.subscription_item_number))
                ) && 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.product_id == input.product_id ||
                    (this.product_id != null &&
                    this.product_id.Equals(input.product_id))
                ) && 
                (
                    this.charged_through_date == input.charged_through_date ||
                    (this.charged_through_date != null &&
                    this.charged_through_date.Equals(input.charged_through_date))
                ) && 
                (
                    this.recurring == input.recurring ||
                    (this.recurring != null &&
                    this.recurring.Equals(input.recurring))
                ) && 
                (
                    this.active == input.active ||
                    (this.active != null &&
                    this.active.Equals(input.active))
                ) && 
                (
                    this.state == input.state ||
                    (this.state != null &&
                    this.state.Equals(input.state))
                ) && 
                (
                    this.start_event == input.start_event ||
                    (this.start_event != null &&
                    this.start_event.Equals(input.start_event))
                ) && 
                (
                    this.tiers_mode == input.tiers_mode ||
                    (this.tiers_mode != null &&
                    this.tiers_mode.Equals(input.tiers_mode))
                ) && 
                (
                    this.tiers == input.tiers ||
                    this.tiers != null &&
                    input.tiers != null &&
                    this.tiers.SequenceEqual(input.tiers)
                ) && 
                (
                    this.tax_code == input.tax_code ||
                    (this.tax_code != null &&
                    this.tax_code.Equals(input.tax_code))
                ) && 
                (
                    this.tax_inclusive == input.tax_inclusive ||
                    (this.tax_inclusive != null &&
                    this.tax_inclusive.Equals(input.tax_inclusive))
                ) && 
                (
                    this.unit_of_measure == input.unit_of_measure ||
                    (this.unit_of_measure != null &&
                    this.unit_of_measure.Equals(input.unit_of_measure))
                ) && 
                (
                    this.quantity == input.quantity ||
                    (this.quantity != null &&
                    this.quantity.Equals(input.quantity))
                ) && 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.unit_amount == input.unit_amount ||
                    (this.unit_amount != null &&
                    this.unit_amount.Equals(input.unit_amount))
                ) && 
                (
                    this.discount_amount == input.discount_amount ||
                    (this.discount_amount != null &&
                    this.discount_amount.Equals(input.discount_amount))
                ) && 
                (
                    this.discount_percent == input.discount_percent ||
                    (this.discount_percent != null &&
                    this.discount_percent.Equals(input.discount_percent))
                ) && 
                (
                    this.apply_discount_to == input.apply_discount_to ||
                    this.apply_discount_to != null &&
                    input.apply_discount_to != null &&
                    this.apply_discount_to.SequenceEqual(input.apply_discount_to)
                ) && 
                (
                    this.discount_level == input.discount_level ||
                    (this.discount_level != null &&
                    this.discount_level.Equals(input.discount_level))
                ) && 
                (
                    this.price_base_interval == input.price_base_interval ||
                    (this.price_base_interval != null &&
                    this.price_base_interval.Equals(input.price_base_interval))
                ) && 
                (
                    this.overage == input.overage ||
                    (this.overage != null &&
                    this.overage.Equals(input.overage))
                ) && 
                (
                    this.charge_model == input.charge_model ||
                    (this.charge_model != null &&
                    this.charge_model.Equals(input.charge_model))
                ) && 
                (
                    this.charge_type == input.charge_type ||
                    (this.charge_type != null &&
                    this.charge_type.Equals(input.charge_type))
                ) && 
                (
                    this.price_id == input.price_id ||
                    (this.price_id != null &&
                    this.price_id.Equals(input.price_id))
                ) && 
                (
                    this.price == input.price ||
                    (this.price != null &&
                    this.price.Equals(input.price))
                ) && 
                (
                    this.subscription_plan_id == input.subscription_plan_id ||
                    (this.subscription_plan_id != null &&
                    this.subscription_plan_id.Equals(input.subscription_plan_id))
                ) && 
                (
                    this.subscription_plan == input.subscription_plan ||
                    (this.subscription_plan != null &&
                    this.subscription_plan.Equals(input.subscription_plan))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.processed_through_date == input.processed_through_date ||
                    (this.processed_through_date != null &&
                    this.processed_through_date.Equals(input.processed_through_date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.updated_by_id != null)
                    hashCode = hashCode * 59 + this.updated_by_id.GetHashCode();
                if (this.updated_time != null)
                    hashCode = hashCode * 59 + this.updated_time.GetHashCode();
                if (this.created_by_id != null)
                    hashCode = hashCode * 59 + this.created_by_id.GetHashCode();
                if (this.created_time != null)
                    hashCode = hashCode * 59 + this.created_time.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.custom_objects != null)
                    hashCode = hashCode * 59 + this.custom_objects.GetHashCode();
                if (this.subscription_item_number != null)
                    hashCode = hashCode * 59 + this.subscription_item_number.GetHashCode();
                if (this.name != null)
                    hashCode = hashCode * 59 + this.name.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.product_id != null)
                    hashCode = hashCode * 59 + this.product_id.GetHashCode();
                if (this.charged_through_date != null)
                    hashCode = hashCode * 59 + this.charged_through_date.GetHashCode();
                if (this.recurring != null)
                    hashCode = hashCode * 59 + this.recurring.GetHashCode();
                if (this.active != null)
                    hashCode = hashCode * 59 + this.active.GetHashCode();
                if (this.state != null)
                    hashCode = hashCode * 59 + this.state.GetHashCode();
                if (this.start_event != null)
                    hashCode = hashCode * 59 + this.start_event.GetHashCode();
                if (this.tiers_mode != null)
                    hashCode = hashCode * 59 + this.tiers_mode.GetHashCode();
                if (this.tiers != null)
                    hashCode = hashCode * 59 + this.tiers.GetHashCode();
                if (this.tax_code != null)
                    hashCode = hashCode * 59 + this.tax_code.GetHashCode();
                if (this.tax_inclusive != null)
                    hashCode = hashCode * 59 + this.tax_inclusive.GetHashCode();
                if (this.unit_of_measure != null)
                    hashCode = hashCode * 59 + this.unit_of_measure.GetHashCode();
                if (this.quantity != null)
                    hashCode = hashCode * 59 + this.quantity.GetHashCode();
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.unit_amount != null)
                    hashCode = hashCode * 59 + this.unit_amount.GetHashCode();
                if (this.discount_amount != null)
                    hashCode = hashCode * 59 + this.discount_amount.GetHashCode();
                if (this.discount_percent != null)
                    hashCode = hashCode * 59 + this.discount_percent.GetHashCode();
                if (this.apply_discount_to != null)
                    hashCode = hashCode * 59 + this.apply_discount_to.GetHashCode();
                if (this.discount_level != null)
                    hashCode = hashCode * 59 + this.discount_level.GetHashCode();
                if (this.price_base_interval != null)
                    hashCode = hashCode * 59 + this.price_base_interval.GetHashCode();
                if (this.overage != null)
                    hashCode = hashCode * 59 + this.overage.GetHashCode();
                if (this.charge_model != null)
                    hashCode = hashCode * 59 + this.charge_model.GetHashCode();
                if (this.charge_type != null)
                    hashCode = hashCode * 59 + this.charge_type.GetHashCode();
                if (this.price_id != null)
                    hashCode = hashCode * 59 + this.price_id.GetHashCode();
                if (this.price != null)
                    hashCode = hashCode * 59 + this.price.GetHashCode();
                if (this.subscription_plan_id != null)
                    hashCode = hashCode * 59 + this.subscription_plan_id.GetHashCode();
                if (this.subscription_plan != null)
                    hashCode = hashCode * 59 + this.subscription_plan.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.processed_through_date != null)
                    hashCode = hashCode * 59 + this.processed_through_date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
