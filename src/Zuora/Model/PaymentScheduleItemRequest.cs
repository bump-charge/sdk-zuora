/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// PaymentScheduleItemRequest
    /// </summary>
    [DataContract]
    public partial class PaymentScheduleItemRequest :  IEquatable<PaymentScheduleItemRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentScheduleItemRequest" /> class.
        /// </summary>
        /// <param name="amount">The amount to be collected by this payment schedule item..</param>
        /// <param name="currency">Three-letter ISO currency code. Once the currency is set for an account, it cannot be updated..</param>
        /// <param name="description">An arbitrary string attached to the object. Often useful for displaying to users..</param>
        /// <param name="gatewayId">gatewayId.</param>
        /// <param name="paymentMethodId">Identifier of the payment method on the customer account..</param>
        /// <param name="runHour">At which hour in the day in the tenant&#39;s timezone this payment will be collected. Available values:[0,1,2,~,22,23]. If the time difference between your tenantâ€™s timezone and the timezone where Zuora servers are located is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half an hour later than your scheduled time.       The default value is &#x60;0&#x60;. If the payment &#x60;run_hour&#x60; and &#x60;scheduled_date&#x60; are backdated, the system will collect the payment when the next &#x60;run_hour&#x60; occurs..</param>
        /// <param name="scheduledDate">The scheduled date of the payment collection..</param>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        public PaymentScheduleItemRequest(decimal amount = default(decimal), string currency = default(string), string description = default(string), string gatewayId = default(string), string paymentMethodId = default(string), int runHour = default(int), DateTime scheduledDate = default(DateTime), Dictionary<string, Object> customFields = default(Dictionary<string, Object>))
        {
            this.amount = amount;
            this.currency = currency;
            this.description = description;
            this.gateway_id = gatewayId;
            this.payment_method_id = paymentMethodId;
            this.run_hour = runHour;
            this.scheduled_date = scheduledDate;
            this.custom_fields = customFields;
        }

        /// <summary>
        /// The amount to be collected by this payment schedule item.
        /// </summary>
        /// <value>The amount to be collected by this payment schedule item.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal amount { get; set; }

        /// <summary>
        /// Three-letter ISO currency code. Once the currency is set for an account, it cannot be updated.
        /// </summary>
        /// <value>Three-letter ISO currency code. Once the currency is set for an account, it cannot be updated.</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string currency { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Gets or Sets gateway_id
        /// </summary>
        [DataMember(Name="gateway_id", EmitDefaultValue=false)]
        public string gateway_id { get; set; }

        /// <summary>
        /// Identifier of the payment method on the customer account.
        /// </summary>
        /// <value>Identifier of the payment method on the customer account.</value>
        [DataMember(Name="payment_method_id", EmitDefaultValue=false)]
        public string payment_method_id { get; set; }

        /// <summary>
        /// At which hour in the day in the tenant&#39;s timezone this payment will be collected. Available values:[0,1,2,~,22,23]. If the time difference between your tenantâ€™s timezone and the timezone where Zuora servers are located is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half an hour later than your scheduled time.       The default value is &#x60;0&#x60;. If the payment &#x60;run_hour&#x60; and &#x60;scheduled_date&#x60; are backdated, the system will collect the payment when the next &#x60;run_hour&#x60; occurs.
        /// </summary>
        /// <value>At which hour in the day in the tenant&#39;s timezone this payment will be collected. Available values:[0,1,2,~,22,23]. If the time difference between your tenantâ€™s timezone and the timezone where Zuora servers are located is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half an hour later than your scheduled time.       The default value is &#x60;0&#x60;. If the payment &#x60;run_hour&#x60; and &#x60;scheduled_date&#x60; are backdated, the system will collect the payment when the next &#x60;run_hour&#x60; occurs.</value>
        [DataMember(Name="run_hour", EmitDefaultValue=false)]
        public int run_hour { get; set; }

        /// <summary>
        /// The scheduled date of the payment collection.
        /// </summary>
        /// <value>The scheduled date of the payment collection.</value>
        [DataMember(Name="scheduled_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime scheduled_date { get; set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentScheduleItemRequest {\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  currency: ").Append(currency).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  gateway_id: ").Append(gateway_id).Append("\n");
            sb.Append("  payment_method_id: ").Append(payment_method_id).Append("\n");
            sb.Append("  run_hour: ").Append(run_hour).Append("\n");
            sb.Append("  scheduled_date: ").Append(scheduled_date).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentScheduleItemRequest);
        }

        /// <summary>
        /// Returns true if PaymentScheduleItemRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentScheduleItemRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentScheduleItemRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.currency == input.currency ||
                    (this.currency != null &&
                    this.currency.Equals(input.currency))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.gateway_id == input.gateway_id ||
                    (this.gateway_id != null &&
                    this.gateway_id.Equals(input.gateway_id))
                ) && 
                (
                    this.payment_method_id == input.payment_method_id ||
                    (this.payment_method_id != null &&
                    this.payment_method_id.Equals(input.payment_method_id))
                ) && 
                (
                    this.run_hour == input.run_hour ||
                    (this.run_hour != null &&
                    this.run_hour.Equals(input.run_hour))
                ) && 
                (
                    this.scheduled_date == input.scheduled_date ||
                    (this.scheduled_date != null &&
                    this.scheduled_date.Equals(input.scheduled_date))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.currency != null)
                    hashCode = hashCode * 59 + this.currency.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.gateway_id != null)
                    hashCode = hashCode * 59 + this.gateway_id.GetHashCode();
                if (this.payment_method_id != null)
                    hashCode = hashCode * 59 + this.payment_method_id.GetHashCode();
                if (this.run_hour != null)
                    hashCode = hashCode * 59 + this.run_hour.GetHashCode();
                if (this.scheduled_date != null)
                    hashCode = hashCode * 59 + this.scheduled_date.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // run_hour (int) maximum
            if(this.run_hour > (int)23)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for run_hour, must be a value less than or equal to 23.", new [] { "run_hour" });
            }

            // run_hour (int) minimum
            if(this.run_hour < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for run_hour, must be a value greater than or equal to 0.", new [] { "run_hour" });
            }

            yield break;
        }
    }

}
