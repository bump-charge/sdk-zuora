/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// The tax certificate information.
    /// </summary>
    [DataContract]
    public partial class TaxCertificate :  IEquatable<TaxCertificate>, IValidatableObject
    {
        /// <summary>
        /// Status of the tax exemption certificate, indication whether the certificate has been verified.
        /// </summary>
        /// <value>Status of the tax exemption certificate, indication whether the certificate has been verified.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Verified for value: verified
            /// </summary>
            [EnumMember(Value = "verified")]
            Verified = 2,

            /// <summary>
            /// Enum Notvalid for value: not_valid
            /// </summary>
            [EnumMember(Value = "not_valid")]
            Notvalid = 3

        }

        /// <summary>
        /// Status of the tax exemption certificate, indication whether the certificate has been verified.
        /// </summary>
        /// <value>Status of the tax exemption certificate, indication whether the certificate has been verified.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? state { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxCertificate" /> class.
        /// </summary>
        /// <param name="companyCode">Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on country of origin and sold-to addresses in Avalara..</param>
        /// <param name="id">Identifier of the tax exemption certificate..</param>
        /// <param name="startDate">The tax certificate start date..</param>
        /// <param name="description">Description of the tax exemption certificate..</param>
        /// <param name="entityUseCode">A unique entity use code used by Avalara to apply exemptions. This field is required only when you choose Avalara as your tax engine. See [Exempt Transactions](https://developer.avalara.com/avatax/handling-tax-exempt-customers/) for more information..</param>
        /// <param name="endDate">The tax certificate end date..</param>
        /// <param name="issuingJurisdiction">Typically, this is a state or government agency.</param>
        /// <param name="state">Status of the tax exemption certificate, indication whether the certificate has been verified..</param>
        /// <param name="taxIdentifier">Value Added Tax (VAT) ID. Each VAT ID must begin with the code of the country code and followed by a block of digits or characters..</param>
        public TaxCertificate(string companyCode = default(string), string id = default(string), DateTime startDate = default(DateTime), string description = default(string), string entityUseCode = default(string), DateTime endDate = default(DateTime), string issuingJurisdiction = default(string), StateEnum? state = default(StateEnum?), string taxIdentifier = default(string))
        {
            this.company_code = companyCode;
            this.id = id;
            this.start_date = startDate;
            this.description = description;
            this.entity_use_code = entityUseCode;
            this.end_date = endDate;
            this.issuing_jurisdiction = issuingJurisdiction;
            this.state = state;
            this.tax_identifier = taxIdentifier;
        }

        /// <summary>
        /// Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on country of origin and sold-to addresses in Avalara.
        /// </summary>
        /// <value>Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on country of origin and sold-to addresses in Avalara.</value>
        [DataMember(Name="company_code", EmitDefaultValue=false)]
        public string company_code { get; set; }

        /// <summary>
        /// Identifier of the tax exemption certificate.
        /// </summary>
        /// <value>Identifier of the tax exemption certificate.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; set; }

        /// <summary>
        /// The tax certificate start date.
        /// </summary>
        /// <value>The tax certificate start date.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime start_date { get; set; }

        /// <summary>
        /// Description of the tax exemption certificate.
        /// </summary>
        /// <value>Description of the tax exemption certificate.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// A unique entity use code used by Avalara to apply exemptions. This field is required only when you choose Avalara as your tax engine. See [Exempt Transactions](https://developer.avalara.com/avatax/handling-tax-exempt-customers/) for more information.
        /// </summary>
        /// <value>A unique entity use code used by Avalara to apply exemptions. This field is required only when you choose Avalara as your tax engine. See [Exempt Transactions](https://developer.avalara.com/avatax/handling-tax-exempt-customers/) for more information.</value>
        [DataMember(Name="entity_use_code", EmitDefaultValue=false)]
        public string entity_use_code { get; set; }

        /// <summary>
        /// The tax certificate end date.
        /// </summary>
        /// <value>The tax certificate end date.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime end_date { get; set; }

        /// <summary>
        /// Typically, this is a state or government agency
        /// </summary>
        /// <value>Typically, this is a state or government agency</value>
        [DataMember(Name="issuing_jurisdiction", EmitDefaultValue=false)]
        public string issuing_jurisdiction { get; set; }


        /// <summary>
        /// Value Added Tax (VAT) ID. Each VAT ID must begin with the code of the country code and followed by a block of digits or characters.
        /// </summary>
        /// <value>Value Added Tax (VAT) ID. Each VAT ID must begin with the code of the country code and followed by a block of digits or characters.</value>
        [DataMember(Name="tax_identifier", EmitDefaultValue=false)]
        [Obsolete]
        public string tax_identifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxCertificate {\n");
            sb.Append("  company_code: ").Append(company_code).Append("\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  entity_use_code: ").Append(entity_use_code).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  issuing_jurisdiction: ").Append(issuing_jurisdiction).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  tax_identifier: ").Append(tax_identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxCertificate);
        }

        /// <summary>
        /// Returns true if TaxCertificate instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxCertificate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxCertificate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.company_code == input.company_code ||
                    (this.company_code != null &&
                    this.company_code.Equals(input.company_code))
                ) && 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.entity_use_code == input.entity_use_code ||
                    (this.entity_use_code != null &&
                    this.entity_use_code.Equals(input.entity_use_code))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.issuing_jurisdiction == input.issuing_jurisdiction ||
                    (this.issuing_jurisdiction != null &&
                    this.issuing_jurisdiction.Equals(input.issuing_jurisdiction))
                ) && 
                (
                    this.state == input.state ||
                    (this.state != null &&
                    this.state.Equals(input.state))
                ) && 
                (
                    this.tax_identifier == input.tax_identifier ||
                    (this.tax_identifier != null &&
                    this.tax_identifier.Equals(input.tax_identifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.company_code != null)
                    hashCode = hashCode * 59 + this.company_code.GetHashCode();
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.entity_use_code != null)
                    hashCode = hashCode * 59 + this.entity_use_code.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.issuing_jurisdiction != null)
                    hashCode = hashCode * 59 + this.issuing_jurisdiction.GetHashCode();
                if (this.state != null)
                    hashCode = hashCode * 59 + this.state.GetHashCode();
                if (this.tax_identifier != null)
                    hashCode = hashCode * 59 + this.tax_identifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
