/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Plan information.
    /// </summary>
    [DataContract]
    public partial class Plan :  IEquatable<Plan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Plan" /> class.
        /// </summary>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="startDate">The date from which the plan can be used for new purchases..</param>
        /// <param name="endDate">The date on which the plan can no longer be used for new purchases..</param>
        /// <param name="name">The name of the plan..</param>
        /// <param name="planNumber">Human-readable identifier of the plan. It can be user-supplied..</param>
        /// <param name="description">An arbitrary string attached to the object. Often useful for displaying to users..</param>
        /// <param name="activeCurrencies">A list of 3-letter ISO-standard currency codes representing active currencies for the plan..</param>
        /// <param name="productId">Identifier of the product associated with this plan..</param>
        /// <param name="active">Whether the plan can be used for new purchases..</param>
        /// <param name="product">The product associated with this plan..</param>
        /// <param name="sku">The product sku. This field is only availble for customers using high speed cache..</param>
        public Plan(Dictionary<string, Object> customFields = default(Dictionary<string, Object>), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), string name = default(string), string planNumber = default(string), string description = default(string), List<string> activeCurrencies = default(List<string>), string productId = default(string), bool active = default(bool), Product product = default(Product), string sku = default(string))
        {
            this.product = product;
            this.custom_fields = customFields;
            this.start_date = startDate;
            this.end_date = endDate;
            this.name = name;
            this.plan_number = planNumber;
            this.description = description;
            this.active_currencies = activeCurrencies;
            this.product_id = productId;
            this.active = active;
            this.product = product;
            this.sku = sku;
        }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>
        [DataMember(Name="updated_by_id", EmitDefaultValue=false)]
        public string updated_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public DateTime updated_time { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>
        [DataMember(Name="created_by_id", EmitDefaultValue=false)]
        public string created_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public DateTime created_time { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).
        /// </summary>
        /// <value>The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).</value>
        [DataMember(Name="custom_objects", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_objects { get; private set; }

        /// <summary>
        /// The date from which the plan can be used for new purchases.
        /// </summary>
        /// <value>The date from which the plan can be used for new purchases.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime start_date { get; set; }

        /// <summary>
        /// The date on which the plan can no longer be used for new purchases.
        /// </summary>
        /// <value>The date on which the plan can no longer be used for new purchases.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime end_date { get; set; }

        /// <summary>
        /// The name of the plan.
        /// </summary>
        /// <value>The name of the plan.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string name { get; set; }

        /// <summary>
        /// Human-readable identifier of the plan. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the plan. It can be user-supplied.</value>
        [DataMember(Name="plan_number", EmitDefaultValue=false)]
        public string plan_number { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// A list of 3-letter ISO-standard currency codes representing active currencies for the plan.
        /// </summary>
        /// <value>A list of 3-letter ISO-standard currency codes representing active currencies for the plan.</value>
        [DataMember(Name="active_currencies", EmitDefaultValue=false)]
        public List<string> active_currencies { get; set; }

        /// <summary>
        /// Identifier of the product associated with this plan.
        /// </summary>
        /// <value>Identifier of the product associated with this plan.</value>
        [DataMember(Name="product_id", EmitDefaultValue=false)]
        public string product_id { get; set; }

        /// <summary>
        /// Whether the plan can be used for new purchases.
        /// </summary>
        /// <value>Whether the plan can be used for new purchases.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool active { get; set; }

        /// <summary>
        /// The product associated with this plan.
        /// </summary>
        /// <value>The product associated with this plan.</value>
        [DataMember(Name="product", EmitDefaultValue=true)]
        public Product product { get; set; }

        /// <summary>
        /// The product sku. This field is only availble for customers using high speed cache.
        /// </summary>
        /// <value>The product sku. This field is only availble for customers using high speed cache.</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string sku { get; set; }

        /// <summary>
        /// A list of prices.
        /// </summary>
        /// <value>A list of prices.</value>
        [DataMember(Name="prices", EmitDefaultValue=true)]
        public PriceListResponse prices { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Plan {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  updated_by_id: ").Append(updated_by_id).Append("\n");
            sb.Append("  updated_time: ").Append(updated_time).Append("\n");
            sb.Append("  created_by_id: ").Append(created_by_id).Append("\n");
            sb.Append("  created_time: ").Append(created_time).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  custom_objects: ").Append(custom_objects).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  plan_number: ").Append(plan_number).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  active_currencies: ").Append(active_currencies).Append("\n");
            sb.Append("  product_id: ").Append(product_id).Append("\n");
            sb.Append("  active: ").Append(active).Append("\n");
            sb.Append("  product: ").Append(product).Append("\n");
            sb.Append("  sku: ").Append(sku).Append("\n");
            sb.Append("  prices: ").Append(prices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Plan);
        }

        /// <summary>
        /// Returns true if Plan instances are equal
        /// </summary>
        /// <param name="input">Instance of Plan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Plan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.updated_by_id == input.updated_by_id ||
                    (this.updated_by_id != null &&
                    this.updated_by_id.Equals(input.updated_by_id))
                ) && 
                (
                    this.updated_time == input.updated_time ||
                    (this.updated_time != null &&
                    this.updated_time.Equals(input.updated_time))
                ) && 
                (
                    this.created_by_id == input.created_by_id ||
                    (this.created_by_id != null &&
                    this.created_by_id.Equals(input.created_by_id))
                ) && 
                (
                    this.created_time == input.created_time ||
                    (this.created_time != null &&
                    this.created_time.Equals(input.created_time))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.custom_objects == input.custom_objects ||
                    this.custom_objects != null &&
                    input.custom_objects != null &&
                    this.custom_objects.SequenceEqual(input.custom_objects)
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.plan_number == input.plan_number ||
                    (this.plan_number != null &&
                    this.plan_number.Equals(input.plan_number))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.active_currencies == input.active_currencies ||
                    this.active_currencies != null &&
                    input.active_currencies != null &&
                    this.active_currencies.SequenceEqual(input.active_currencies)
                ) && 
                (
                    this.product_id == input.product_id ||
                    (this.product_id != null &&
                    this.product_id.Equals(input.product_id))
                ) && 
                (
                    this.active == input.active ||
                    (this.active != null &&
                    this.active.Equals(input.active))
                ) && 
                (
                    this.product == input.product ||
                    (this.product != null &&
                    this.product.Equals(input.product))
                ) && 
                (
                    this.sku == input.sku ||
                    (this.sku != null &&
                    this.sku.Equals(input.sku))
                ) && 
                (
                    this.prices == input.prices ||
                    (this.prices != null &&
                    this.prices.Equals(input.prices))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.updated_by_id != null)
                    hashCode = hashCode * 59 + this.updated_by_id.GetHashCode();
                if (this.updated_time != null)
                    hashCode = hashCode * 59 + this.updated_time.GetHashCode();
                if (this.created_by_id != null)
                    hashCode = hashCode * 59 + this.created_by_id.GetHashCode();
                if (this.created_time != null)
                    hashCode = hashCode * 59 + this.created_time.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.custom_objects != null)
                    hashCode = hashCode * 59 + this.custom_objects.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.name != null)
                    hashCode = hashCode * 59 + this.name.GetHashCode();
                if (this.plan_number != null)
                    hashCode = hashCode * 59 + this.plan_number.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.active_currencies != null)
                    hashCode = hashCode * 59 + this.active_currencies.GetHashCode();
                if (this.product_id != null)
                    hashCode = hashCode * 59 + this.product_id.GetHashCode();
                if (this.active != null)
                    hashCode = hashCode * 59 + this.active.GetHashCode();
                if (this.product != null)
                    hashCode = hashCode * 59 + this.product.GetHashCode();
                if (this.sku != null)
                    hashCode = hashCode * 59 + this.sku.GetHashCode();
                if (this.prices != null)
                    hashCode = hashCode * 59 + this.prices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
