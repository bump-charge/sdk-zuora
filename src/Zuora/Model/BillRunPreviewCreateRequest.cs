/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// BillRunPreviewCreateRequest
    /// </summary>
    [DataContract]
    public partial class BillRunPreviewCreateRequest :  IEquatable<BillRunPreviewCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed. **all**: The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#39;s next billing period to the target date. **auto_renew_only**: The assumption is applied to the subscriptions that have auto_renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#39;s next billing period to the target date.
        /// </summary>
        /// <value>Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed. **all**: The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#39;s next billing period to the target date. **auto_renew_only**: The assumption is applied to the subscriptions that have auto_renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#39;s next billing period to the target date.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssumeRenewalEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,

            /// <summary>
            /// Enum Autorenewonly for value: auto_renew_only
            /// </summary>
            [EnumMember(Value = "auto_renew_only")]
            Autorenewonly = 2,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 3

        }

        /// <summary>
        /// Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed. **all**: The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#39;s next billing period to the target date. **auto_renew_only**: The assumption is applied to the subscriptions that have auto_renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#39;s next billing period to the target date.
        /// </summary>
        /// <value>Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed. **all**: The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#39;s next billing period to the target date. **auto_renew_only**: The assumption is applied to the subscriptions that have auto_renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#39;s next billing period to the target date.</value>
        [DataMember(Name="assume_renewal", EmitDefaultValue=false)]
        public AssumeRenewalEnum? assume_renewal { get; set; }
        /// <summary>
        /// Defines charges_excluded
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChargesExcludedEnum
        {
            /// <summary>
            /// Enum Onetime for value: one_time
            /// </summary>
            [EnumMember(Value = "one_time")]
            Onetime = 1,

            /// <summary>
            /// Enum Recurring for value: recurring
            /// </summary>
            [EnumMember(Value = "recurring")]
            Recurring = 2,

            /// <summary>
            /// Enum Usage for value: usage
            /// </summary>
            [EnumMember(Value = "usage")]
            Usage = 3

        }


        /// <summary>
        /// Charge type or types to be excluded from this bill run preview.
        /// </summary>
        /// <value>Charge type or types to be excluded from this bill run preview.</value>
        [DataMember(Name="charges_excluded", EmitDefaultValue=false)]
        public List<ChargesExcludedEnum> charges_excluded { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillRunPreviewCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BillRunPreviewCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillRunPreviewCreateRequest" /> class.
        /// </summary>
        /// <param name="assumeRenewal">Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed. **all**: The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#39;s next billing period to the target date. **auto_renew_only**: The assumption is applied to the subscriptions that have auto_renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer&#39;s next billing period to the target date..</param>
        /// <param name="batches">Identifiers of the customer account batches to be included in this bill run preview..</param>
        /// <param name="chargesExcluded">Charge type or types to be excluded from this bill run preview..</param>
        /// <param name="includeDraftItems">If true, draft items will be included in this bill run preview..</param>
        /// <param name="includeEvergreenSubscriptions">If true, evergreen subscriptions will be included in this bill run preview..</param>
        /// <param name="targetDate">All unbilled items on or before this date are included in this bill run. (required).</param>
        public BillRunPreviewCreateRequest(AssumeRenewalEnum? assumeRenewal = default(AssumeRenewalEnum?), List<string> batches = default(List<string>), List<ChargesExcludedEnum> chargesExcluded = default(List<ChargesExcludedEnum>), bool includeDraftItems = default(bool), bool includeEvergreenSubscriptions = default(bool), DateTime targetDate = default(DateTime))
        {
            // to ensure "targetDate" is required (not null)
            if (targetDate == null)
            {
                throw new InvalidDataException("targetDate is a required property for BillRunPreviewCreateRequest and cannot be null");
            }
            else
            {
                this.target_date = targetDate;
            }

            this.assume_renewal = assumeRenewal;
            this.batches = batches;
            this.charges_excluded = chargesExcluded;
            this.include_draft_items = includeDraftItems;
            this.include_evergreen_subscriptions = includeEvergreenSubscriptions;
        }


        /// <summary>
        /// Identifiers of the customer account batches to be included in this bill run preview.
        /// </summary>
        /// <value>Identifiers of the customer account batches to be included in this bill run preview.</value>
        [DataMember(Name="batches", EmitDefaultValue=false)]
        public List<string> batches { get; set; }


        /// <summary>
        /// If true, draft items will be included in this bill run preview.
        /// </summary>
        /// <value>If true, draft items will be included in this bill run preview.</value>
        [DataMember(Name="include_draft_items", EmitDefaultValue=false)]
        public bool include_draft_items { get; set; }

        /// <summary>
        /// If true, evergreen subscriptions will be included in this bill run preview.
        /// </summary>
        /// <value>If true, evergreen subscriptions will be included in this bill run preview.</value>
        [DataMember(Name="include_evergreen_subscriptions", EmitDefaultValue=false)]
        public bool include_evergreen_subscriptions { get; set; }

        /// <summary>
        /// All unbilled items on or before this date are included in this bill run.
        /// </summary>
        /// <value>All unbilled items on or before this date are included in this bill run.</value>
        [DataMember(Name="target_date", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime target_date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillRunPreviewCreateRequest {\n");
            sb.Append("  assume_renewal: ").Append(assume_renewal).Append("\n");
            sb.Append("  batches: ").Append(batches).Append("\n");
            sb.Append("  charges_excluded: ").Append(charges_excluded).Append("\n");
            sb.Append("  include_draft_items: ").Append(include_draft_items).Append("\n");
            sb.Append("  include_evergreen_subscriptions: ").Append(include_evergreen_subscriptions).Append("\n");
            sb.Append("  target_date: ").Append(target_date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillRunPreviewCreateRequest);
        }

        /// <summary>
        /// Returns true if BillRunPreviewCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BillRunPreviewCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillRunPreviewCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.assume_renewal == input.assume_renewal ||
                    (this.assume_renewal != null &&
                    this.assume_renewal.Equals(input.assume_renewal))
                ) && 
                (
                    this.batches == input.batches ||
                    this.batches != null &&
                    input.batches != null &&
                    this.batches.SequenceEqual(input.batches)
                ) && 
                (
                    this.charges_excluded == input.charges_excluded ||
                    this.charges_excluded != null &&
                    input.charges_excluded != null &&
                    this.charges_excluded.SequenceEqual(input.charges_excluded)
                ) && 
                (
                    this.include_draft_items == input.include_draft_items ||
                    (this.include_draft_items != null &&
                    this.include_draft_items.Equals(input.include_draft_items))
                ) && 
                (
                    this.include_evergreen_subscriptions == input.include_evergreen_subscriptions ||
                    (this.include_evergreen_subscriptions != null &&
                    this.include_evergreen_subscriptions.Equals(input.include_evergreen_subscriptions))
                ) && 
                (
                    this.target_date == input.target_date ||
                    (this.target_date != null &&
                    this.target_date.Equals(input.target_date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.assume_renewal != null)
                    hashCode = hashCode * 59 + this.assume_renewal.GetHashCode();
                if (this.batches != null)
                    hashCode = hashCode * 59 + this.batches.GetHashCode();
                if (this.charges_excluded != null)
                    hashCode = hashCode * 59 + this.charges_excluded.GetHashCode();
                if (this.include_draft_items != null)
                    hashCode = hashCode * 59 + this.include_draft_items.GetHashCode();
                if (this.include_evergreen_subscriptions != null)
                    hashCode = hashCode * 59 + this.include_evergreen_subscriptions.GetHashCode();
                if (this.target_date != null)
                    hashCode = hashCode * 59 + this.target_date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
