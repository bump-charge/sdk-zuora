/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// OrderPreviewCreateRequest
    /// </summary>
    [DataContract]
    public partial class OrderPreviewCreateRequest :  IEquatable<OrderPreviewCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Category of the order to indicate a product sale or return. Default value is &#x60;sale&#x60;.
        /// </summary>
        /// <value>Category of the order to indicate a product sale or return. Default value is &#x60;sale&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum Sale for value: sale
            /// </summary>
            [EnumMember(Value = "sale")]
            Sale = 1,

            /// <summary>
            /// Enum Return for value: return
            /// </summary>
            [EnumMember(Value = "return")]
            Return = 2

        }

        /// <summary>
        /// Category of the order to indicate a product sale or return. Default value is &#x60;sale&#x60;.
        /// </summary>
        /// <value>Category of the order to indicate a product sale or return. Default value is &#x60;sale&#x60;.</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum? category { get; set; }
        /// <summary>
        /// Defines metrics
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MetricsEnum
        {
            /// <summary>
            /// Enum Billingdocuments for value: billing_documents
            /// </summary>
            [EnumMember(Value = "billing_documents")]
            Billingdocuments = 1,

            /// <summary>
            /// Enum Deltametrics for value: delta_metrics
            /// </summary>
            [EnumMember(Value = "delta_metrics")]
            Deltametrics = 2

        }


        /// <summary>
        /// Specifies the metrics you want to preview.    You can preview metrics of billing documents, the order delta metrics, or both.
        /// </summary>
        /// <value>Specifies the metrics you want to preview.    You can preview metrics of billing documents, the order delta metrics, or both.</value>
        [DataMember(Name="metrics", EmitDefaultValue=false)]
        public List<MetricsEnum> metrics { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderPreviewCreateRequest" /> class.
        /// </summary>
        /// <param name="category">Category of the order to indicate a product sale or return. Default value is &#x60;sale&#x60;..</param>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="description">An arbitrary string attached to the object. Often useful for displaying to users..</param>
        /// <param name="accountNumber">Human-readable identifier of the account. It can be user-supplied..</param>
        /// <param name="accountId">Identifier of the account..</param>
        /// <param name="orderDate">The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if the contract effective date field is skipped or its value is left as null..</param>
        /// <param name="orderNumber">The order number of the new order. If not provided, system will auto-generate a number for this order.     Note: Ensure that the order number does not contain a slash..</param>
        /// <param name="lineItems">Order line items are non-subscription-based items created by an order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services.    By specifying this field, you can launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models..</param>
        /// <param name="subscriptions">Based on the intended order action, each item should include specific fields.     For example, to preview a new subscription for a new account, you must specify the &#x60;account_data&#x60; and &#x60;subscription_plans&#x60; fields at a minimum..</param>
        /// <param name="accountData">accountData.</param>
        /// <param name="numberOfPeriods">Specifies how many billing periods you want to preview..</param>
        /// <param name="termEnd">Indicates whether to preview the subscription till the end of the current term..</param>
        /// <param name="metrics">Specifies the metrics you want to preview.    You can preview metrics of billing documents, the order delta metrics, or both..</param>
        /// <param name="endDate">End date of the period for which you want to preview the subscription.</param>
        public OrderPreviewCreateRequest(CategoryEnum? category = default(CategoryEnum?), Dictionary<string, Object> customFields = default(Dictionary<string, Object>), string description = default(string), string accountNumber = default(string), string accountId = default(string), DateTime orderDate = default(DateTime), string orderNumber = default(string), List<LineItemCreateRequest> lineItems = default(List<LineItemCreateRequest>), List<PostSubscriptionOrderRequest> subscriptions = default(List<PostSubscriptionOrderRequest>), SubscriptionPreviewAccountRequest accountData = default(SubscriptionPreviewAccountRequest), int numberOfPeriods = default(int), bool termEnd = default(bool), List<MetricsEnum> metrics = default(List<MetricsEnum>), DateTime endDate = default(DateTime))
        {
            this.category = category;
            this.custom_fields = customFields;
            this.description = description;
            this.account_number = accountNumber;
            this.account_id = accountId;
            this.order_date = orderDate;
            this.order_number = orderNumber;
            this.line_items = lineItems;
            this.subscriptions = subscriptions;
            this.account_data = accountData;
            this.number_of_periods = numberOfPeriods;
            this.term_end = termEnd;
            this.metrics = metrics;
            this.end_date = endDate;
        }


        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Human-readable identifier of the account. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the account. It can be user-supplied.</value>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string account_number { get; set; }

        /// <summary>
        /// Identifier of the account.
        /// </summary>
        /// <value>Identifier of the account.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string account_id { get; set; }

        /// <summary>
        /// The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if the contract effective date field is skipped or its value is left as null.
        /// </summary>
        /// <value>The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if the contract effective date field is skipped or its value is left as null.</value>
        [DataMember(Name="order_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime order_date { get; set; }

        /// <summary>
        /// The order number of the new order. If not provided, system will auto-generate a number for this order.     Note: Ensure that the order number does not contain a slash.
        /// </summary>
        /// <value>The order number of the new order. If not provided, system will auto-generate a number for this order.     Note: Ensure that the order number does not contain a slash.</value>
        [DataMember(Name="order_number", EmitDefaultValue=false)]
        public string order_number { get; set; }

        /// <summary>
        /// Order line items are non-subscription-based items created by an order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services.    By specifying this field, you can launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.
        /// </summary>
        /// <value>Order line items are non-subscription-based items created by an order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services.    By specifying this field, you can launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.</value>
        [DataMember(Name="line_items", EmitDefaultValue=false)]
        public List<LineItemCreateRequest> line_items { get; set; }

        /// <summary>
        /// Based on the intended order action, each item should include specific fields.     For example, to preview a new subscription for a new account, you must specify the &#x60;account_data&#x60; and &#x60;subscription_plans&#x60; fields at a minimum.
        /// </summary>
        /// <value>Based on the intended order action, each item should include specific fields.     For example, to preview a new subscription for a new account, you must specify the &#x60;account_data&#x60; and &#x60;subscription_plans&#x60; fields at a minimum.</value>
        [DataMember(Name="subscriptions", EmitDefaultValue=false)]
        public List<PostSubscriptionOrderRequest> subscriptions { get; set; }

        /// <summary>
        /// Gets or Sets account_data
        /// </summary>
        [DataMember(Name="account_data", EmitDefaultValue=false)]
        public SubscriptionPreviewAccountRequest account_data { get; set; }

        /// <summary>
        /// Specifies how many billing periods you want to preview.
        /// </summary>
        /// <value>Specifies how many billing periods you want to preview.</value>
        [DataMember(Name="number_of_periods", EmitDefaultValue=false)]
        public int number_of_periods { get; set; }

        /// <summary>
        /// Indicates whether to preview the subscription till the end of the current term.
        /// </summary>
        /// <value>Indicates whether to preview the subscription till the end of the current term.</value>
        [DataMember(Name="term_end", EmitDefaultValue=false)]
        public bool term_end { get; set; }


        /// <summary>
        /// End date of the period for which you want to preview the subscription
        /// </summary>
        /// <value>End date of the period for which you want to preview the subscription</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime end_date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderPreviewCreateRequest {\n");
            sb.Append("  category: ").Append(category).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  account_number: ").Append(account_number).Append("\n");
            sb.Append("  account_id: ").Append(account_id).Append("\n");
            sb.Append("  order_date: ").Append(order_date).Append("\n");
            sb.Append("  order_number: ").Append(order_number).Append("\n");
            sb.Append("  line_items: ").Append(line_items).Append("\n");
            sb.Append("  subscriptions: ").Append(subscriptions).Append("\n");
            sb.Append("  account_data: ").Append(account_data).Append("\n");
            sb.Append("  number_of_periods: ").Append(number_of_periods).Append("\n");
            sb.Append("  term_end: ").Append(term_end).Append("\n");
            sb.Append("  metrics: ").Append(metrics).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderPreviewCreateRequest);
        }

        /// <summary>
        /// Returns true if OrderPreviewCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderPreviewCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderPreviewCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.category == input.category ||
                    (this.category != null &&
                    this.category.Equals(input.category))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.account_number == input.account_number ||
                    (this.account_number != null &&
                    this.account_number.Equals(input.account_number))
                ) && 
                (
                    this.account_id == input.account_id ||
                    (this.account_id != null &&
                    this.account_id.Equals(input.account_id))
                ) && 
                (
                    this.order_date == input.order_date ||
                    (this.order_date != null &&
                    this.order_date.Equals(input.order_date))
                ) && 
                (
                    this.order_number == input.order_number ||
                    (this.order_number != null &&
                    this.order_number.Equals(input.order_number))
                ) && 
                (
                    this.line_items == input.line_items ||
                    this.line_items != null &&
                    input.line_items != null &&
                    this.line_items.SequenceEqual(input.line_items)
                ) && 
                (
                    this.subscriptions == input.subscriptions ||
                    this.subscriptions != null &&
                    input.subscriptions != null &&
                    this.subscriptions.SequenceEqual(input.subscriptions)
                ) && 
                (
                    this.account_data == input.account_data ||
                    (this.account_data != null &&
                    this.account_data.Equals(input.account_data))
                ) && 
                (
                    this.number_of_periods == input.number_of_periods ||
                    (this.number_of_periods != null &&
                    this.number_of_periods.Equals(input.number_of_periods))
                ) && 
                (
                    this.term_end == input.term_end ||
                    (this.term_end != null &&
                    this.term_end.Equals(input.term_end))
                ) && 
                (
                    this.metrics == input.metrics ||
                    this.metrics != null &&
                    input.metrics != null &&
                    this.metrics.SequenceEqual(input.metrics)
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.category != null)
                    hashCode = hashCode * 59 + this.category.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.account_number != null)
                    hashCode = hashCode * 59 + this.account_number.GetHashCode();
                if (this.account_id != null)
                    hashCode = hashCode * 59 + this.account_id.GetHashCode();
                if (this.order_date != null)
                    hashCode = hashCode * 59 + this.order_date.GetHashCode();
                if (this.order_number != null)
                    hashCode = hashCode * 59 + this.order_number.GetHashCode();
                if (this.line_items != null)
                    hashCode = hashCode * 59 + this.line_items.GetHashCode();
                if (this.subscriptions != null)
                    hashCode = hashCode * 59 + this.subscriptions.GetHashCode();
                if (this.account_data != null)
                    hashCode = hashCode * 59 + this.account_data.GetHashCode();
                if (this.number_of_periods != null)
                    hashCode = hashCode * 59 + this.number_of_periods.GetHashCode();
                if (this.term_end != null)
                    hashCode = hashCode * 59 + this.term_end.GetHashCode();
                if (this.metrics != null)
                    hashCode = hashCode * 59 + this.metrics.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
