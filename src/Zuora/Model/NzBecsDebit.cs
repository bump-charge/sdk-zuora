/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// If the &#x60;type&#x60; of the payment method is &#x60;nz_becs_debit&#x60;, this hash contains details about the BECS-NZ bank account.
    /// </summary>
    [DataContract]
    public partial class NzBecsDebit :  IEquatable<NzBecsDebit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NzBecsDebit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NzBecsDebit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NzBecsDebit" /> class.
        /// </summary>
        /// <param name="accountNumber">The bank account number of the account holder. (required).</param>
        /// <param name="branchCode">Identifier of the bank branch associated with this bank account. (required).</param>
        /// <param name="bankCode">Identifier of the bank associated with this bank account. (required).</param>
        /// <param name="mandate">mandate.</param>
        public NzBecsDebit(string accountNumber = default(string), string branchCode = default(string), string bankCode = default(string), Mandate mandate = default(Mandate))
        {
            // to ensure "accountNumber" is required (not null)
            if (accountNumber == null)
            {
                throw new InvalidDataException("accountNumber is a required property for NzBecsDebit and cannot be null");
            }
            else
            {
                this.account_number = accountNumber;
            }

            // to ensure "branchCode" is required (not null)
            if (branchCode == null)
            {
                throw new InvalidDataException("branchCode is a required property for NzBecsDebit and cannot be null");
            }
            else
            {
                this.branch_code = branchCode;
            }

            // to ensure "bankCode" is required (not null)
            if (bankCode == null)
            {
                throw new InvalidDataException("bankCode is a required property for NzBecsDebit and cannot be null");
            }
            else
            {
                this.bank_code = bankCode;
            }

            this.mandate = mandate;
        }

        /// <summary>
        /// The bank account number of the account holder.
        /// </summary>
        /// <value>The bank account number of the account holder.</value>
        [DataMember(Name="account_number", EmitDefaultValue=true)]
        public string account_number { get; set; }

        /// <summary>
        /// Identifier of the bank branch associated with this bank account.
        /// </summary>
        /// <value>Identifier of the bank branch associated with this bank account.</value>
        [DataMember(Name="branch_code", EmitDefaultValue=true)]
        public string branch_code { get; set; }

        /// <summary>
        /// Identifier of the bank associated with this bank account.
        /// </summary>
        /// <value>Identifier of the bank associated with this bank account.</value>
        [DataMember(Name="bank_code", EmitDefaultValue=true)]
        public string bank_code { get; set; }

        /// <summary>
        /// Gets or Sets mandate
        /// </summary>
        [DataMember(Name="mandate", EmitDefaultValue=false)]
        public Mandate mandate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NzBecsDebit {\n");
            sb.Append("  account_number: ").Append(account_number).Append("\n");
            sb.Append("  branch_code: ").Append(branch_code).Append("\n");
            sb.Append("  bank_code: ").Append(bank_code).Append("\n");
            sb.Append("  mandate: ").Append(mandate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NzBecsDebit);
        }

        /// <summary>
        /// Returns true if NzBecsDebit instances are equal
        /// </summary>
        /// <param name="input">Instance of NzBecsDebit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NzBecsDebit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.account_number == input.account_number ||
                    (this.account_number != null &&
                    this.account_number.Equals(input.account_number))
                ) && 
                (
                    this.branch_code == input.branch_code ||
                    (this.branch_code != null &&
                    this.branch_code.Equals(input.branch_code))
                ) && 
                (
                    this.bank_code == input.bank_code ||
                    (this.bank_code != null &&
                    this.bank_code.Equals(input.bank_code))
                ) && 
                (
                    this.mandate == input.mandate ||
                    (this.mandate != null &&
                    this.mandate.Equals(input.mandate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.account_number != null)
                    hashCode = hashCode * 59 + this.account_number.GetHashCode();
                if (this.branch_code != null)
                    hashCode = hashCode * 59 + this.branch_code.GetHashCode();
                if (this.bank_code != null)
                    hashCode = hashCode * 59 + this.bank_code.GetHashCode();
                if (this.mandate != null)
                    hashCode = hashCode * 59 + this.mandate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
