/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// RefundCreateRequest
    /// </summary>
    [DataContract]
    public partial class RefundCreateRequest :  IEquatable<RefundCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines refund_method_type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RefundMethodTypeEnum
        {
            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 1,

            /// <summary>
            /// Enum Check for value: check
            /// </summary>
            [EnumMember(Value = "check")]
            Check = 2,

            /// <summary>
            /// Enum Wiretransfer for value: wire_transfer
            /// </summary>
            [EnumMember(Value = "wire_transfer")]
            Wiretransfer = 3,

            /// <summary>
            /// Enum Paypal for value: pay_pal
            /// </summary>
            [EnumMember(Value = "pay_pal")]
            Paypal = 4,

            /// <summary>
            /// Enum Creditcard for value: credit_card
            /// </summary>
            [EnumMember(Value = "credit_card")]
            Creditcard = 5,

            /// <summary>
            /// Enum Ccref for value: cc_ref
            /// </summary>
            [EnumMember(Value = "cc_ref")]
            Ccref = 6,

            /// <summary>
            /// Enum Achdebit for value: ach_debit
            /// </summary>
            [EnumMember(Value = "ach_debit")]
            Achdebit = 7,

            /// <summary>
            /// Enum Debitcard for value: debit_card
            /// </summary>
            [EnumMember(Value = "debit_card")]
            Debitcard = 8,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 9

        }

        /// <summary>
        /// Gets or Sets refund_method_type
        /// </summary>
        [DataMember(Name="refund_method_type", EmitDefaultValue=false)]
        public RefundMethodTypeEnum? refund_method_type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RefundCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundCreateRequest" /> class.
        /// </summary>
        /// <param name="amount">Refund amount. (required).</param>
        /// <param name="description">An arbitrary string attached to the object. Often useful for displaying to users..</param>
        /// <param name="gatewayOptions">gatewayOptions.</param>
        /// <param name="refundDate">The date when the refund takes effect..</param>
        /// <param name="refundMethodType">refundMethodType.</param>
        /// <param name="reasonCode">User-provided reason for the refund..</param>
        /// <param name="statementDescriptor">A payment gateway-specific field used by Orbital, Vantiv and Verifi..</param>
        /// <param name="statementDescriptorPhone">A payment gateway-specific field used by Orbital, Vantiv and Verifi..</param>
        /// <param name="external">If true, indicates that this refund is not handled by Zuora..</param>
        /// <param name="referenceId">Transaction identifier returned by the payment gateway. You may use this field to reconcile refunds between your payment gateway and Zuora Payments..</param>
        /// <param name="secondReferenceId">A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments..</param>
        /// <param name="bankAccountAccount">An active account in your Zuora Chart of Accounts..</param>
        /// <param name="onAccountAccount">An active account in your Zuora Chart of Accounts..</param>
        /// <param name="unappliedPaymentAccount">An active account in your Zuora Chart of Accounts..</param>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="creditMemo">The related credit memo..</param>
        /// <param name="billingDocuments">Indicates to which billing documents (invoices or debit memos) is the refund applied..</param>
        public RefundCreateRequest(decimal amount = default(decimal), string description = default(string), Dictionary<string, string> gatewayOptions = default(Dictionary<string, string>), DateTime refundDate = default(DateTime), RefundMethodTypeEnum? refundMethodType = default(RefundMethodTypeEnum?), string reasonCode = default(string), string statementDescriptor = default(string), string statementDescriptorPhone = default(string), bool external = default(bool), string referenceId = default(string), string secondReferenceId = default(string), string bankAccountAccount = default(string), string onAccountAccount = default(string), string unappliedPaymentAccount = default(string), Dictionary<string, Object> customFields = default(Dictionary<string, Object>), RefundCreditMemoRequest creditMemo = default(RefundCreditMemoRequest), List<BillingDocumentPaymentApplicationRequest> billingDocuments = default(List<BillingDocumentPaymentApplicationRequest>))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for RefundCreateRequest and cannot be null");
            }
            else
            {
                this.amount = amount;
            }

            this.credit_memo = creditMemo;
            this.description = description;
            this.gateway_options = gatewayOptions;
            this.refund_date = refundDate;
            this.refund_method_type = refundMethodType;
            this.reason_code = reasonCode;
            this.statement_descriptor = statementDescriptor;
            this.statement_descriptor_phone = statementDescriptorPhone;
            this.external = external;
            this.reference_id = referenceId;
            this.second_reference_id = secondReferenceId;
            this.bank_account_account = bankAccountAccount;
            this.on_account_account = onAccountAccount;
            this.unapplied_payment_account = unappliedPaymentAccount;
            this.custom_fields = customFields;
            this.credit_memo = creditMemo;
            this.billing_documents = billingDocuments;
        }

        /// <summary>
        /// Refund amount.
        /// </summary>
        /// <value>Refund amount.</value>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public decimal amount { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Gets or Sets gateway_options
        /// </summary>
        [DataMember(Name="gateway_options", EmitDefaultValue=false)]
        public Dictionary<string, string> gateway_options { get; set; }

        /// <summary>
        /// The date when the refund takes effect.
        /// </summary>
        /// <value>The date when the refund takes effect.</value>
        [DataMember(Name="refund_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime refund_date { get; set; }


        /// <summary>
        /// Identifier for the payment, either &#x60;payment_number&#x60; or &#x60;payment_id.
        /// </summary>
        /// <value>Identifier for the payment, either &#x60;payment_number&#x60; or &#x60;payment_id.</value>
        [DataMember(Name="payment_id", EmitDefaultValue=false)]
        public string payment_id { get; private set; }

        /// <summary>
        /// User-provided reason for the refund.
        /// </summary>
        /// <value>User-provided reason for the refund.</value>
        [DataMember(Name="reason_code", EmitDefaultValue=false)]
        public string reason_code { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>
        [DataMember(Name="statement_descriptor", EmitDefaultValue=false)]
        public string statement_descriptor { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>
        [DataMember(Name="statement_descriptor_phone", EmitDefaultValue=false)]
        public string statement_descriptor_phone { get; set; }

        /// <summary>
        /// If true, indicates that this refund is not handled by Zuora.
        /// </summary>
        /// <value>If true, indicates that this refund is not handled by Zuora.</value>
        [DataMember(Name="external", EmitDefaultValue=false)]
        public bool external { get; set; }

        /// <summary>
        /// Transaction identifier returned by the payment gateway. You may use this field to reconcile refunds between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>Transaction identifier returned by the payment gateway. You may use this field to reconcile refunds between your payment gateway and Zuora Payments.</value>
        [DataMember(Name="reference_id", EmitDefaultValue=false)]
        public string reference_id { get; set; }

        /// <summary>
        /// A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.</value>
        [DataMember(Name="second_reference_id", EmitDefaultValue=false)]
        public string second_reference_id { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>
        [DataMember(Name="bank_account_account", EmitDefaultValue=false)]
        public string bank_account_account { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>
        [DataMember(Name="on_account_account", EmitDefaultValue=false)]
        public string on_account_account { get; set; }

        /// <summary>
        /// An active account in your Zuora Chart of Accounts.
        /// </summary>
        /// <value>An active account in your Zuora Chart of Accounts.</value>
        [DataMember(Name="unapplied_payment_account", EmitDefaultValue=false)]
        public string unapplied_payment_account { get; set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// Identifier of the payment method used to create this refund.
        /// </summary>
        /// <value>Identifier of the payment method used to create this refund.</value>
        [DataMember(Name="payment_method_id", EmitDefaultValue=false)]
        public string payment_method_id { get; private set; }

        /// <summary>
        /// The related credit memo.
        /// </summary>
        /// <value>The related credit memo.</value>
        [DataMember(Name="credit_memo", EmitDefaultValue=true)]
        public RefundCreditMemoRequest credit_memo { get; set; }

        /// <summary>
        /// Indicates to which billing documents (invoices or debit memos) is the refund applied.
        /// </summary>
        /// <value>Indicates to which billing documents (invoices or debit memos) is the refund applied.</value>
        [DataMember(Name="billing_documents", EmitDefaultValue=false)]
        public List<BillingDocumentPaymentApplicationRequest> billing_documents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RefundCreateRequest {\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  gateway_options: ").Append(gateway_options).Append("\n");
            sb.Append("  refund_date: ").Append(refund_date).Append("\n");
            sb.Append("  refund_method_type: ").Append(refund_method_type).Append("\n");
            sb.Append("  payment_id: ").Append(payment_id).Append("\n");
            sb.Append("  reason_code: ").Append(reason_code).Append("\n");
            sb.Append("  statement_descriptor: ").Append(statement_descriptor).Append("\n");
            sb.Append("  statement_descriptor_phone: ").Append(statement_descriptor_phone).Append("\n");
            sb.Append("  external: ").Append(external).Append("\n");
            sb.Append("  reference_id: ").Append(reference_id).Append("\n");
            sb.Append("  second_reference_id: ").Append(second_reference_id).Append("\n");
            sb.Append("  bank_account_account: ").Append(bank_account_account).Append("\n");
            sb.Append("  on_account_account: ").Append(on_account_account).Append("\n");
            sb.Append("  unapplied_payment_account: ").Append(unapplied_payment_account).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  payment_method_id: ").Append(payment_method_id).Append("\n");
            sb.Append("  credit_memo: ").Append(credit_memo).Append("\n");
            sb.Append("  billing_documents: ").Append(billing_documents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RefundCreateRequest);
        }

        /// <summary>
        /// Returns true if RefundCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RefundCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefundCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.gateway_options == input.gateway_options ||
                    this.gateway_options != null &&
                    input.gateway_options != null &&
                    this.gateway_options.SequenceEqual(input.gateway_options)
                ) && 
                (
                    this.refund_date == input.refund_date ||
                    (this.refund_date != null &&
                    this.refund_date.Equals(input.refund_date))
                ) && 
                (
                    this.refund_method_type == input.refund_method_type ||
                    (this.refund_method_type != null &&
                    this.refund_method_type.Equals(input.refund_method_type))
                ) && 
                (
                    this.payment_id == input.payment_id ||
                    (this.payment_id != null &&
                    this.payment_id.Equals(input.payment_id))
                ) && 
                (
                    this.reason_code == input.reason_code ||
                    (this.reason_code != null &&
                    this.reason_code.Equals(input.reason_code))
                ) && 
                (
                    this.statement_descriptor == input.statement_descriptor ||
                    (this.statement_descriptor != null &&
                    this.statement_descriptor.Equals(input.statement_descriptor))
                ) && 
                (
                    this.statement_descriptor_phone == input.statement_descriptor_phone ||
                    (this.statement_descriptor_phone != null &&
                    this.statement_descriptor_phone.Equals(input.statement_descriptor_phone))
                ) && 
                (
                    this.external == input.external ||
                    (this.external != null &&
                    this.external.Equals(input.external))
                ) && 
                (
                    this.reference_id == input.reference_id ||
                    (this.reference_id != null &&
                    this.reference_id.Equals(input.reference_id))
                ) && 
                (
                    this.second_reference_id == input.second_reference_id ||
                    (this.second_reference_id != null &&
                    this.second_reference_id.Equals(input.second_reference_id))
                ) && 
                (
                    this.bank_account_account == input.bank_account_account ||
                    (this.bank_account_account != null &&
                    this.bank_account_account.Equals(input.bank_account_account))
                ) && 
                (
                    this.on_account_account == input.on_account_account ||
                    (this.on_account_account != null &&
                    this.on_account_account.Equals(input.on_account_account))
                ) && 
                (
                    this.unapplied_payment_account == input.unapplied_payment_account ||
                    (this.unapplied_payment_account != null &&
                    this.unapplied_payment_account.Equals(input.unapplied_payment_account))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.payment_method_id == input.payment_method_id ||
                    (this.payment_method_id != null &&
                    this.payment_method_id.Equals(input.payment_method_id))
                ) && 
                (
                    this.credit_memo == input.credit_memo ||
                    (this.credit_memo != null &&
                    this.credit_memo.Equals(input.credit_memo))
                ) && 
                (
                    this.billing_documents == input.billing_documents ||
                    this.billing_documents != null &&
                    input.billing_documents != null &&
                    this.billing_documents.SequenceEqual(input.billing_documents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.gateway_options != null)
                    hashCode = hashCode * 59 + this.gateway_options.GetHashCode();
                if (this.refund_date != null)
                    hashCode = hashCode * 59 + this.refund_date.GetHashCode();
                if (this.refund_method_type != null)
                    hashCode = hashCode * 59 + this.refund_method_type.GetHashCode();
                if (this.payment_id != null)
                    hashCode = hashCode * 59 + this.payment_id.GetHashCode();
                if (this.reason_code != null)
                    hashCode = hashCode * 59 + this.reason_code.GetHashCode();
                if (this.statement_descriptor != null)
                    hashCode = hashCode * 59 + this.statement_descriptor.GetHashCode();
                if (this.statement_descriptor_phone != null)
                    hashCode = hashCode * 59 + this.statement_descriptor_phone.GetHashCode();
                if (this.external != null)
                    hashCode = hashCode * 59 + this.external.GetHashCode();
                if (this.reference_id != null)
                    hashCode = hashCode * 59 + this.reference_id.GetHashCode();
                if (this.second_reference_id != null)
                    hashCode = hashCode * 59 + this.second_reference_id.GetHashCode();
                if (this.bank_account_account != null)
                    hashCode = hashCode * 59 + this.bank_account_account.GetHashCode();
                if (this.on_account_account != null)
                    hashCode = hashCode * 59 + this.on_account_account.GetHashCode();
                if (this.unapplied_payment_account != null)
                    hashCode = hashCode * 59 + this.unapplied_payment_account.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.payment_method_id != null)
                    hashCode = hashCode * 59 + this.payment_method_id.GetHashCode();
                if (this.credit_memo != null)
                    hashCode = hashCode * 59 + this.credit_memo.GetHashCode();
                if (this.billing_documents != null)
                    hashCode = hashCode * 59 + this.billing_documents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // statement_descriptor (string) maxLength
            if(this.statement_descriptor != null && this.statement_descriptor.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for statement_descriptor, length must be less than 35.", new [] { "statement_descriptor" });
            }


            // statement_descriptor_phone (string) maxLength
            if(this.statement_descriptor_phone != null && this.statement_descriptor_phone.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for statement_descriptor_phone, length must be less than 20.", new [] { "statement_descriptor_phone" });
            }


            yield break;
        }
    }

}
