/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Data of order line items.
    /// </summary>
    [DataContract]
    public partial class OrderLineItem :  IEquatable<OrderLineItem>, IValidatableObject
    {
        /// <summary>
        /// The billing rule for the order line item.
        /// </summary>
        /// <value>The billing rule for the order line item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BillingRuleEnum
        {
            /// <summary>
            /// Enum Withoutfulfillment for value: trigger_without_fulfillment
            /// </summary>
            [EnumMember(Value = "trigger_without_fulfillment")]
            Withoutfulfillment = 1,

            /// <summary>
            /// Enum Onfulfillment for value: trigger_on_fulfillment
            /// </summary>
            [EnumMember(Value = "trigger_on_fulfillment")]
            Onfulfillment = 2

        }

        /// <summary>
        /// The billing rule for the order line item.
        /// </summary>
        /// <value>The billing rule for the order line item.</value>
        [DataMember(Name="billing_rule", EmitDefaultValue=false)]
        public BillingRuleEnum? billing_rule { get; set; }
        /// <summary>
        /// The category for the order line item, to indicate a product sale or return.
        /// </summary>
        /// <value>The category for the order line item, to indicate a product sale or return.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum Sale for value: sale
            /// </summary>
            [EnumMember(Value = "sale")]
            Sale = 1,

            /// <summary>
            /// Enum Return for value: return
            /// </summary>
            [EnumMember(Value = "return")]
            Return = 2

        }

        /// <summary>
        /// The category for the order line item, to indicate a product sale or return.
        /// </summary>
        /// <value>The category for the order line item, to indicate a product sale or return.</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum? category { get; set; }
        /// <summary>
        /// The type of the order line item.
        /// </summary>
        /// <value>The type of the order line item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Product for value: product
            /// </summary>
            [EnumMember(Value = "product")]
            Product = 1,

            /// <summary>
            /// Enum Fee for value: fee
            /// </summary>
            [EnumMember(Value = "fee")]
            Fee = 2,

            /// <summary>
            /// Enum Services for value: services
            /// </summary>
            [EnumMember(Value = "services")]
            Services = 3

        }

        /// <summary>
        /// The type of the order line item.
        /// </summary>
        /// <value>The type of the order line item.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? type { get; set; }
        /// <summary>
        /// The state of an order line item. If you want to generate billing documents for order line items, you must set this field to &#x60;sent_to_billing&#x60;. For invoice preview, you do not need to set this field.
        /// </summary>
        /// <value>The state of an order line item. If you want to generate billing documents for order line items, you must set this field to &#x60;sent_to_billing&#x60;. For invoice preview, you do not need to set this field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Accepted for value: accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            Accepted = 1,

            /// <summary>
            /// Enum Booked for value: booked
            /// </summary>
            [EnumMember(Value = "booked")]
            Booked = 2,

            /// <summary>
            /// Enum Senttobilling for value: sent_to_billing
            /// </summary>
            [EnumMember(Value = "sent_to_billing")]
            Senttobilling = 3,

            /// <summary>
            /// Enum Complete for value: complete
            /// </summary>
            [EnumMember(Value = "complete")]
            Complete = 4,

            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            Canceled = 5

        }

        /// <summary>
        /// The state of an order line item. If you want to generate billing documents for order line items, you must set this field to &#x60;sent_to_billing&#x60;. For invoice preview, you do not need to set this field.
        /// </summary>
        /// <value>The state of an order line item. If you want to generate billing documents for order line items, you must set this field to &#x60;sent_to_billing&#x60;. For invoice preview, you do not need to set this field.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? state { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItem" /> class.
        /// </summary>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="revenue">revenue.</param>
        /// <param name="unitOfMeasure">A configured unit of measure..</param>
        /// <param name="accountingCode">An active accounting code in your Zuora chart of accounts..</param>
        /// <param name="adjustmentLiabilityAccount">An active accounting code in your Zuora chart of accounts..</param>
        /// <param name="unitAmount">The unit amount to be charged..</param>
        /// <param name="targetDate">All order line items that were unbilled on or before this date are included in future bill runs..</param>
        /// <param name="billingRule">The billing rule for the order line item..</param>
        /// <param name="contractAssetAccount">An active accounting code in your Zuora chart of accounts..</param>
        /// <param name="contractLiabilityAccount">An active accounting code in your Zuora chart of accounts..</param>
        /// <param name="description">An arbitrary string attached to the object. Often useful for displaying to users..</param>
        /// <param name="discountUnitAmount">Discount amount per unit..</param>
        /// <param name="discountPercent">Discount percent..</param>
        /// <param name="category">The category for the order line item, to indicate a product sale or return..</param>
        /// <param name="name">The name of the order line item..</param>
        /// <param name="type">The type of the order line item..</param>
        /// <param name="listUnitPrice">The list price per unit for the order line item..</param>
        /// <param name="productCode">The product code for the order line item..</param>
        /// <param name="purchaseOrderNumber">Used by customers to specify the Purchase Order Number provided by the buyer..</param>
        /// <param name="quantity">The quantity of the product ordered..</param>
        /// <param name="relatedSubscriptionNumber">Use this field to relate an order line item to an subscription..</param>
        /// <param name="soldToId">The unique identifier of a contact belonging to the billing account of the order line item. Use this field to assign and existing contact as the sold to contact of an order line item..</param>
        /// <param name="taxCode">The tax code for the order line item..</param>
        /// <param name="unbilledReceivablesAccount">An active accounting code in your Zuora chart of accounts...</param>
        /// <param name="state">The state of an order line item. If you want to generate billing documents for order line items, you must set this field to &#x60;sent_to_billing&#x60;. For invoice preview, you do not need to set this field..</param>
        /// <param name="itemNumber">Human-readable identifier of the order item. It can be user-supplied..</param>
        /// <param name="startDate">The date a transaction starts. The default value of this field is the order date..</param>
        /// <param name="endDate">The date the order line item transitions to complete..</param>
        /// <param name="priceId">Identifier of the price..</param>
        /// <param name="quantityAvailableForReturn">The quantity of the product ordered available for return..</param>
        /// <param name="taxInclusive">If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax..</param>
        /// <param name="orderId">The unique identifier for the order associated with this order line item..</param>
        /// <param name="total">Total after discounts and taxes..</param>
        /// <param name="subtotal">Total before discounts and taxes are applied..</param>
        /// <param name="quantityFulfilled">The quantity fulfilled..</param>
        /// <param name="quantityPendingFulfillment">The quantity pending fulfillment..</param>
        /// <param name="requiresFulfillment">If true, a fulfillment is required to trigger billing..</param>
        /// <param name="originalOrderDate">The date when the subscription item is created through an order. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sales order line in Zuora Revenue..</param>
        /// <param name="originalOrderId">The unique identifier of the original sales order for a return order line item..</param>
        /// <param name="originalOrderLineItemId">The unique identifier of the original sales order line item for a return order line item..</param>
        /// <param name="originalOrderLineItemNumber">The number of the original sales order line item for a return order line item..</param>
        /// <param name="originalOrderNumber">The number of the original sales order for a return order line item..</param>
        /// <param name="discountTotal">Total discount amount..</param>
        /// <param name="listPrice">The extended list price for an order line item, calculated by the formula: listPrice &#x3D; listPricePerUnit * quantity.</param>
        /// <param name="originalSoldToId">The unique identifier of a contact belonging to the billing account of the order line item that was the original sold to contact when the order line item was created. .</param>
        public OrderLineItem(Dictionary<string, Object> customFields = default(Dictionary<string, Object>), OrderLineItemRevenue revenue = default(OrderLineItemRevenue), string unitOfMeasure = default(string), string accountingCode = default(string), string adjustmentLiabilityAccount = default(string), decimal unitAmount = default(decimal), DateTime targetDate = default(DateTime), BillingRuleEnum? billingRule = default(BillingRuleEnum?), string contractAssetAccount = default(string), string contractLiabilityAccount = default(string), string description = default(string), decimal discountUnitAmount = default(decimal), decimal discountPercent = default(decimal), CategoryEnum? category = default(CategoryEnum?), string name = default(string), TypeEnum? type = default(TypeEnum?), decimal listUnitPrice = default(decimal), string productCode = default(string), string purchaseOrderNumber = default(string), decimal quantity = default(decimal), string relatedSubscriptionNumber = default(string), string soldToId = default(string), string taxCode = default(string), string unbilledReceivablesAccount = default(string), StateEnum? state = default(StateEnum?), string itemNumber = default(string), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), string priceId = default(string), decimal quantityAvailableForReturn = default(decimal), bool taxInclusive = default(bool), string orderId = default(string), decimal total = default(decimal), decimal subtotal = default(decimal), decimal quantityFulfilled = default(decimal), decimal quantityPendingFulfillment = default(decimal), bool requiresFulfillment = default(bool), DateTime originalOrderDate = default(DateTime), string originalOrderId = default(string), string originalOrderLineItemId = default(string), string originalOrderLineItemNumber = default(string), string originalOrderNumber = default(string), decimal discountTotal = default(decimal), decimal listPrice = default(decimal), string originalSoldToId = default(string))
        {
            this.custom_fields = customFields;
            this.revenue = revenue;
            this.unit_of_measure = unitOfMeasure;
            this.accounting_code = accountingCode;
            this.adjustment_liability_account = adjustmentLiabilityAccount;
            this.unit_amount = unitAmount;
            this.target_date = targetDate;
            this.billing_rule = billingRule;
            this.contract_asset_account = contractAssetAccount;
            this.contract_liability_account = contractLiabilityAccount;
            this.description = description;
            this.discount_unit_amount = discountUnitAmount;
            this.discount_percent = discountPercent;
            this.category = category;
            this.name = name;
            this.type = type;
            this.list_unit_price = listUnitPrice;
            this.product_code = productCode;
            this.purchase_order_number = purchaseOrderNumber;
            this.quantity = quantity;
            this.related_subscription_number = relatedSubscriptionNumber;
            this.sold_to_id = soldToId;
            this.tax_code = taxCode;
            this.unbilled_receivables_account = unbilledReceivablesAccount;
            this.state = state;
            this.item_number = itemNumber;
            this.start_date = startDate;
            this.end_date = endDate;
            this.price_id = priceId;
            this.quantity_available_for_return = quantityAvailableForReturn;
            this.tax_inclusive = taxInclusive;
            this.order_id = orderId;
            this.total = total;
            this.subtotal = subtotal;
            this.quantity_fulfilled = quantityFulfilled;
            this.quantity_pending_fulfillment = quantityPendingFulfillment;
            this.requires_fulfillment = requiresFulfillment;
            this.original_order_date = originalOrderDate;
            this.original_order_id = originalOrderId;
            this.original_order_line_item_id = originalOrderLineItemId;
            this.original_order_line_item_number = originalOrderLineItemNumber;
            this.original_order_number = originalOrderNumber;
            this.discount_total = discountTotal;
            this.list_price = listPrice;
            this.original_sold_to_id = originalSoldToId;
        }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>
        [DataMember(Name="updated_by_id", EmitDefaultValue=false)]
        public string updated_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public DateTime updated_time { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>
        [DataMember(Name="created_by_id", EmitDefaultValue=false)]
        public string created_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public DateTime created_time { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).
        /// </summary>
        /// <value>The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).</value>
        [DataMember(Name="custom_objects", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_objects { get; private set; }

        /// <summary>
        /// Gets or Sets revenue
        /// </summary>
        [DataMember(Name="revenue", EmitDefaultValue=false)]
        public OrderLineItemRevenue revenue { get; set; }

        /// <summary>
        /// A configured unit of measure.
        /// </summary>
        /// <value>A configured unit of measure.</value>
        [DataMember(Name="unit_of_measure", EmitDefaultValue=false)]
        public string unit_of_measure { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string accounting_code { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>
        [DataMember(Name="adjustment_liability_account", EmitDefaultValue=false)]
        public string adjustment_liability_account { get; set; }

        /// <summary>
        /// The unit amount to be charged.
        /// </summary>
        /// <value>The unit amount to be charged.</value>
        [DataMember(Name="unit_amount", EmitDefaultValue=false)]
        public decimal unit_amount { get; set; }

        /// <summary>
        /// All order line items that were unbilled on or before this date are included in future bill runs.
        /// </summary>
        /// <value>All order line items that were unbilled on or before this date are included in future bill runs.</value>
        [DataMember(Name="target_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime target_date { get; set; }


        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>
        [DataMember(Name="contract_asset_account", EmitDefaultValue=false)]
        public string contract_asset_account { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts.
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts.</value>
        [DataMember(Name="contract_liability_account", EmitDefaultValue=false)]
        public string contract_liability_account { get; set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Discount amount per unit.
        /// </summary>
        /// <value>Discount amount per unit.</value>
        [DataMember(Name="discount_unit_amount", EmitDefaultValue=false)]
        public decimal discount_unit_amount { get; set; }

        /// <summary>
        /// Discount percent.
        /// </summary>
        /// <value>Discount percent.</value>
        [DataMember(Name="discount_percent", EmitDefaultValue=false)]
        public decimal discount_percent { get; set; }


        /// <summary>
        /// The name of the order line item.
        /// </summary>
        /// <value>The name of the order line item.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string name { get; set; }


        /// <summary>
        /// The list price per unit for the order line item.
        /// </summary>
        /// <value>The list price per unit for the order line item.</value>
        [DataMember(Name="list_unit_price", EmitDefaultValue=false)]
        public decimal list_unit_price { get; set; }

        /// <summary>
        /// The product code for the order line item.
        /// </summary>
        /// <value>The product code for the order line item.</value>
        [DataMember(Name="product_code", EmitDefaultValue=false)]
        public string product_code { get; set; }

        /// <summary>
        /// Used by customers to specify the Purchase Order Number provided by the buyer.
        /// </summary>
        /// <value>Used by customers to specify the Purchase Order Number provided by the buyer.</value>
        [DataMember(Name="purchase_order_number", EmitDefaultValue=false)]
        public string purchase_order_number { get; set; }

        /// <summary>
        /// The quantity of the product ordered.
        /// </summary>
        /// <value>The quantity of the product ordered.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal quantity { get; set; }

        /// <summary>
        /// Use this field to relate an order line item to an subscription.
        /// </summary>
        /// <value>Use this field to relate an order line item to an subscription.</value>
        [DataMember(Name="related_subscription_number", EmitDefaultValue=false)]
        public string related_subscription_number { get; set; }

        /// <summary>
        /// The unique identifier of a contact belonging to the billing account of the order line item. Use this field to assign and existing contact as the sold to contact of an order line item.
        /// </summary>
        /// <value>The unique identifier of a contact belonging to the billing account of the order line item. Use this field to assign and existing contact as the sold to contact of an order line item.</value>
        [DataMember(Name="sold_to_id", EmitDefaultValue=false)]
        public string sold_to_id { get; set; }

        /// <summary>
        /// The tax code for the order line item.
        /// </summary>
        /// <value>The tax code for the order line item.</value>
        [DataMember(Name="tax_code", EmitDefaultValue=false)]
        public string tax_code { get; set; }

        /// <summary>
        /// An active accounting code in your Zuora chart of accounts..
        /// </summary>
        /// <value>An active accounting code in your Zuora chart of accounts..</value>
        [DataMember(Name="unbilled_receivables_account", EmitDefaultValue=false)]
        public string unbilled_receivables_account { get; set; }


        /// <summary>
        /// Human-readable identifier of the order item. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the order item. It can be user-supplied.</value>
        [DataMember(Name="item_number", EmitDefaultValue=false)]
        public string item_number { get; set; }

        /// <summary>
        /// The date a transaction starts. The default value of this field is the order date.
        /// </summary>
        /// <value>The date a transaction starts. The default value of this field is the order date.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime start_date { get; set; }

        /// <summary>
        /// The date the order line item transitions to complete.
        /// </summary>
        /// <value>The date the order line item transitions to complete.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime end_date { get; set; }

        /// <summary>
        /// Identifier of the price.
        /// </summary>
        /// <value>Identifier of the price.</value>
        [DataMember(Name="price_id", EmitDefaultValue=false)]
        public string price_id { get; set; }

        /// <summary>
        /// The quantity of the product ordered available for return.
        /// </summary>
        /// <value>The quantity of the product ordered available for return.</value>
        [DataMember(Name="quantity_available_for_return", EmitDefaultValue=false)]
        public decimal quantity_available_for_return { get; set; }

        /// <summary>
        /// If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax.
        /// </summary>
        /// <value>If this field is set to &#x60;true&#x60;, it indicates that amounts are inclusive of tax.</value>
        [DataMember(Name="tax_inclusive", EmitDefaultValue=false)]
        public bool tax_inclusive { get; set; }

        /// <summary>
        /// List of invoice items. EXPANDABLE
        /// </summary>
        /// <value>List of invoice items. EXPANDABLE</value>
        [DataMember(Name="invoice_items", EmitDefaultValue=true)]
        public InvoiceItemListResponse invoice_items { get; private set; }

        /// <summary>
        /// The unique identifier for the order associated with this order line item.
        /// </summary>
        /// <value>The unique identifier for the order associated with this order line item.</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string order_id { get; set; }

        /// <summary>
        /// Total after discounts and taxes.
        /// </summary>
        /// <value>Total after discounts and taxes.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal total { get; set; }

        /// <summary>
        /// Total before discounts and taxes are applied.
        /// </summary>
        /// <value>Total before discounts and taxes are applied.</value>
        [DataMember(Name="subtotal", EmitDefaultValue=false)]
        public decimal subtotal { get; set; }

        /// <summary>
        /// The quantity fulfilled.
        /// </summary>
        /// <value>The quantity fulfilled.</value>
        [DataMember(Name="quantity_fulfilled", EmitDefaultValue=false)]
        public decimal quantity_fulfilled { get; set; }

        /// <summary>
        /// The quantity pending fulfillment.
        /// </summary>
        /// <value>The quantity pending fulfillment.</value>
        [DataMember(Name="quantity_pending_fulfillment", EmitDefaultValue=false)]
        public decimal quantity_pending_fulfillment { get; set; }

        /// <summary>
        /// If true, a fulfillment is required to trigger billing.
        /// </summary>
        /// <value>If true, a fulfillment is required to trigger billing.</value>
        [DataMember(Name="requires_fulfillment", EmitDefaultValue=false)]
        public bool requires_fulfillment { get; set; }

        /// <summary>
        /// The date when the subscription item is created through an order. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sales order line in Zuora Revenue.
        /// </summary>
        /// <value>The date when the subscription item is created through an order. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sales order line in Zuora Revenue.</value>
        [DataMember(Name="original_order_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime original_order_date { get; set; }

        /// <summary>
        /// The unique identifier of the original sales order for a return order line item.
        /// </summary>
        /// <value>The unique identifier of the original sales order for a return order line item.</value>
        [DataMember(Name="original_order_id", EmitDefaultValue=false)]
        public string original_order_id { get; set; }

        /// <summary>
        /// The unique identifier of the original sales order line item for a return order line item.
        /// </summary>
        /// <value>The unique identifier of the original sales order line item for a return order line item.</value>
        [DataMember(Name="original_order_line_item_id", EmitDefaultValue=false)]
        public string original_order_line_item_id { get; set; }

        /// <summary>
        /// The number of the original sales order line item for a return order line item.
        /// </summary>
        /// <value>The number of the original sales order line item for a return order line item.</value>
        [DataMember(Name="original_order_line_item_number", EmitDefaultValue=false)]
        public string original_order_line_item_number { get; set; }

        /// <summary>
        /// The number of the original sales order for a return order line item.
        /// </summary>
        /// <value>The number of the original sales order for a return order line item.</value>
        [DataMember(Name="original_order_number", EmitDefaultValue=false)]
        public string original_order_number { get; set; }

        /// <summary>
        /// Total discount amount.
        /// </summary>
        /// <value>Total discount amount.</value>
        [DataMember(Name="discount_total", EmitDefaultValue=false)]
        public decimal discount_total { get; set; }

        /// <summary>
        /// The extended list price for an order line item, calculated by the formula: listPrice &#x3D; listPricePerUnit * quantity
        /// </summary>
        /// <value>The extended list price for an order line item, calculated by the formula: listPrice &#x3D; listPricePerUnit * quantity</value>
        [DataMember(Name="list_price", EmitDefaultValue=false)]
        public decimal list_price { get; set; }

        /// <summary>
        /// The unique identifier of a contact belonging to the billing account of the order line item that was the original sold to contact when the order line item was created. 
        /// </summary>
        /// <value>The unique identifier of a contact belonging to the billing account of the order line item that was the original sold to contact when the order line item was created. </value>
        [DataMember(Name="original_sold_to_id", EmitDefaultValue=false)]
        public string original_sold_to_id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLineItem {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  updated_by_id: ").Append(updated_by_id).Append("\n");
            sb.Append("  updated_time: ").Append(updated_time).Append("\n");
            sb.Append("  created_by_id: ").Append(created_by_id).Append("\n");
            sb.Append("  created_time: ").Append(created_time).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  custom_objects: ").Append(custom_objects).Append("\n");
            sb.Append("  revenue: ").Append(revenue).Append("\n");
            sb.Append("  unit_of_measure: ").Append(unit_of_measure).Append("\n");
            sb.Append("  accounting_code: ").Append(accounting_code).Append("\n");
            sb.Append("  adjustment_liability_account: ").Append(adjustment_liability_account).Append("\n");
            sb.Append("  unit_amount: ").Append(unit_amount).Append("\n");
            sb.Append("  target_date: ").Append(target_date).Append("\n");
            sb.Append("  billing_rule: ").Append(billing_rule).Append("\n");
            sb.Append("  contract_asset_account: ").Append(contract_asset_account).Append("\n");
            sb.Append("  contract_liability_account: ").Append(contract_liability_account).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  discount_unit_amount: ").Append(discount_unit_amount).Append("\n");
            sb.Append("  discount_percent: ").Append(discount_percent).Append("\n");
            sb.Append("  category: ").Append(category).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  type: ").Append(type).Append("\n");
            sb.Append("  list_unit_price: ").Append(list_unit_price).Append("\n");
            sb.Append("  product_code: ").Append(product_code).Append("\n");
            sb.Append("  purchase_order_number: ").Append(purchase_order_number).Append("\n");
            sb.Append("  quantity: ").Append(quantity).Append("\n");
            sb.Append("  related_subscription_number: ").Append(related_subscription_number).Append("\n");
            sb.Append("  sold_to_id: ").Append(sold_to_id).Append("\n");
            sb.Append("  tax_code: ").Append(tax_code).Append("\n");
            sb.Append("  unbilled_receivables_account: ").Append(unbilled_receivables_account).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  item_number: ").Append(item_number).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  price_id: ").Append(price_id).Append("\n");
            sb.Append("  quantity_available_for_return: ").Append(quantity_available_for_return).Append("\n");
            sb.Append("  tax_inclusive: ").Append(tax_inclusive).Append("\n");
            sb.Append("  invoice_items: ").Append(invoice_items).Append("\n");
            sb.Append("  order_id: ").Append(order_id).Append("\n");
            sb.Append("  total: ").Append(total).Append("\n");
            sb.Append("  subtotal: ").Append(subtotal).Append("\n");
            sb.Append("  quantity_fulfilled: ").Append(quantity_fulfilled).Append("\n");
            sb.Append("  quantity_pending_fulfillment: ").Append(quantity_pending_fulfillment).Append("\n");
            sb.Append("  requires_fulfillment: ").Append(requires_fulfillment).Append("\n");
            sb.Append("  original_order_date: ").Append(original_order_date).Append("\n");
            sb.Append("  original_order_id: ").Append(original_order_id).Append("\n");
            sb.Append("  original_order_line_item_id: ").Append(original_order_line_item_id).Append("\n");
            sb.Append("  original_order_line_item_number: ").Append(original_order_line_item_number).Append("\n");
            sb.Append("  original_order_number: ").Append(original_order_number).Append("\n");
            sb.Append("  discount_total: ").Append(discount_total).Append("\n");
            sb.Append("  list_price: ").Append(list_price).Append("\n");
            sb.Append("  original_sold_to_id: ").Append(original_sold_to_id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderLineItem);
        }

        /// <summary>
        /// Returns true if OrderLineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.updated_by_id == input.updated_by_id ||
                    (this.updated_by_id != null &&
                    this.updated_by_id.Equals(input.updated_by_id))
                ) && 
                (
                    this.updated_time == input.updated_time ||
                    (this.updated_time != null &&
                    this.updated_time.Equals(input.updated_time))
                ) && 
                (
                    this.created_by_id == input.created_by_id ||
                    (this.created_by_id != null &&
                    this.created_by_id.Equals(input.created_by_id))
                ) && 
                (
                    this.created_time == input.created_time ||
                    (this.created_time != null &&
                    this.created_time.Equals(input.created_time))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.custom_objects == input.custom_objects ||
                    this.custom_objects != null &&
                    input.custom_objects != null &&
                    this.custom_objects.SequenceEqual(input.custom_objects)
                ) && 
                (
                    this.revenue == input.revenue ||
                    (this.revenue != null &&
                    this.revenue.Equals(input.revenue))
                ) && 
                (
                    this.unit_of_measure == input.unit_of_measure ||
                    (this.unit_of_measure != null &&
                    this.unit_of_measure.Equals(input.unit_of_measure))
                ) && 
                (
                    this.accounting_code == input.accounting_code ||
                    (this.accounting_code != null &&
                    this.accounting_code.Equals(input.accounting_code))
                ) && 
                (
                    this.adjustment_liability_account == input.adjustment_liability_account ||
                    (this.adjustment_liability_account != null &&
                    this.adjustment_liability_account.Equals(input.adjustment_liability_account))
                ) && 
                (
                    this.unit_amount == input.unit_amount ||
                    (this.unit_amount != null &&
                    this.unit_amount.Equals(input.unit_amount))
                ) && 
                (
                    this.target_date == input.target_date ||
                    (this.target_date != null &&
                    this.target_date.Equals(input.target_date))
                ) && 
                (
                    this.billing_rule == input.billing_rule ||
                    (this.billing_rule != null &&
                    this.billing_rule.Equals(input.billing_rule))
                ) && 
                (
                    this.contract_asset_account == input.contract_asset_account ||
                    (this.contract_asset_account != null &&
                    this.contract_asset_account.Equals(input.contract_asset_account))
                ) && 
                (
                    this.contract_liability_account == input.contract_liability_account ||
                    (this.contract_liability_account != null &&
                    this.contract_liability_account.Equals(input.contract_liability_account))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.discount_unit_amount == input.discount_unit_amount ||
                    (this.discount_unit_amount != null &&
                    this.discount_unit_amount.Equals(input.discount_unit_amount))
                ) && 
                (
                    this.discount_percent == input.discount_percent ||
                    (this.discount_percent != null &&
                    this.discount_percent.Equals(input.discount_percent))
                ) && 
                (
                    this.category == input.category ||
                    (this.category != null &&
                    this.category.Equals(input.category))
                ) && 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.type == input.type ||
                    (this.type != null &&
                    this.type.Equals(input.type))
                ) && 
                (
                    this.list_unit_price == input.list_unit_price ||
                    (this.list_unit_price != null &&
                    this.list_unit_price.Equals(input.list_unit_price))
                ) && 
                (
                    this.product_code == input.product_code ||
                    (this.product_code != null &&
                    this.product_code.Equals(input.product_code))
                ) && 
                (
                    this.purchase_order_number == input.purchase_order_number ||
                    (this.purchase_order_number != null &&
                    this.purchase_order_number.Equals(input.purchase_order_number))
                ) && 
                (
                    this.quantity == input.quantity ||
                    (this.quantity != null &&
                    this.quantity.Equals(input.quantity))
                ) && 
                (
                    this.related_subscription_number == input.related_subscription_number ||
                    (this.related_subscription_number != null &&
                    this.related_subscription_number.Equals(input.related_subscription_number))
                ) && 
                (
                    this.sold_to_id == input.sold_to_id ||
                    (this.sold_to_id != null &&
                    this.sold_to_id.Equals(input.sold_to_id))
                ) && 
                (
                    this.tax_code == input.tax_code ||
                    (this.tax_code != null &&
                    this.tax_code.Equals(input.tax_code))
                ) && 
                (
                    this.unbilled_receivables_account == input.unbilled_receivables_account ||
                    (this.unbilled_receivables_account != null &&
                    this.unbilled_receivables_account.Equals(input.unbilled_receivables_account))
                ) && 
                (
                    this.state == input.state ||
                    (this.state != null &&
                    this.state.Equals(input.state))
                ) && 
                (
                    this.item_number == input.item_number ||
                    (this.item_number != null &&
                    this.item_number.Equals(input.item_number))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.price_id == input.price_id ||
                    (this.price_id != null &&
                    this.price_id.Equals(input.price_id))
                ) && 
                (
                    this.quantity_available_for_return == input.quantity_available_for_return ||
                    (this.quantity_available_for_return != null &&
                    this.quantity_available_for_return.Equals(input.quantity_available_for_return))
                ) && 
                (
                    this.tax_inclusive == input.tax_inclusive ||
                    (this.tax_inclusive != null &&
                    this.tax_inclusive.Equals(input.tax_inclusive))
                ) && 
                (
                    this.invoice_items == input.invoice_items ||
                    (this.invoice_items != null &&
                    this.invoice_items.Equals(input.invoice_items))
                ) && 
                (
                    this.order_id == input.order_id ||
                    (this.order_id != null &&
                    this.order_id.Equals(input.order_id))
                ) && 
                (
                    this.total == input.total ||
                    (this.total != null &&
                    this.total.Equals(input.total))
                ) && 
                (
                    this.subtotal == input.subtotal ||
                    (this.subtotal != null &&
                    this.subtotal.Equals(input.subtotal))
                ) && 
                (
                    this.quantity_fulfilled == input.quantity_fulfilled ||
                    (this.quantity_fulfilled != null &&
                    this.quantity_fulfilled.Equals(input.quantity_fulfilled))
                ) && 
                (
                    this.quantity_pending_fulfillment == input.quantity_pending_fulfillment ||
                    (this.quantity_pending_fulfillment != null &&
                    this.quantity_pending_fulfillment.Equals(input.quantity_pending_fulfillment))
                ) && 
                (
                    this.requires_fulfillment == input.requires_fulfillment ||
                    (this.requires_fulfillment != null &&
                    this.requires_fulfillment.Equals(input.requires_fulfillment))
                ) && 
                (
                    this.original_order_date == input.original_order_date ||
                    (this.original_order_date != null &&
                    this.original_order_date.Equals(input.original_order_date))
                ) && 
                (
                    this.original_order_id == input.original_order_id ||
                    (this.original_order_id != null &&
                    this.original_order_id.Equals(input.original_order_id))
                ) && 
                (
                    this.original_order_line_item_id == input.original_order_line_item_id ||
                    (this.original_order_line_item_id != null &&
                    this.original_order_line_item_id.Equals(input.original_order_line_item_id))
                ) && 
                (
                    this.original_order_line_item_number == input.original_order_line_item_number ||
                    (this.original_order_line_item_number != null &&
                    this.original_order_line_item_number.Equals(input.original_order_line_item_number))
                ) && 
                (
                    this.original_order_number == input.original_order_number ||
                    (this.original_order_number != null &&
                    this.original_order_number.Equals(input.original_order_number))
                ) && 
                (
                    this.discount_total == input.discount_total ||
                    (this.discount_total != null &&
                    this.discount_total.Equals(input.discount_total))
                ) && 
                (
                    this.list_price == input.list_price ||
                    (this.list_price != null &&
                    this.list_price.Equals(input.list_price))
                ) && 
                (
                    this.original_sold_to_id == input.original_sold_to_id ||
                    (this.original_sold_to_id != null &&
                    this.original_sold_to_id.Equals(input.original_sold_to_id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.updated_by_id != null)
                    hashCode = hashCode * 59 + this.updated_by_id.GetHashCode();
                if (this.updated_time != null)
                    hashCode = hashCode * 59 + this.updated_time.GetHashCode();
                if (this.created_by_id != null)
                    hashCode = hashCode * 59 + this.created_by_id.GetHashCode();
                if (this.created_time != null)
                    hashCode = hashCode * 59 + this.created_time.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.custom_objects != null)
                    hashCode = hashCode * 59 + this.custom_objects.GetHashCode();
                if (this.revenue != null)
                    hashCode = hashCode * 59 + this.revenue.GetHashCode();
                if (this.unit_of_measure != null)
                    hashCode = hashCode * 59 + this.unit_of_measure.GetHashCode();
                if (this.accounting_code != null)
                    hashCode = hashCode * 59 + this.accounting_code.GetHashCode();
                if (this.adjustment_liability_account != null)
                    hashCode = hashCode * 59 + this.adjustment_liability_account.GetHashCode();
                if (this.unit_amount != null)
                    hashCode = hashCode * 59 + this.unit_amount.GetHashCode();
                if (this.target_date != null)
                    hashCode = hashCode * 59 + this.target_date.GetHashCode();
                if (this.billing_rule != null)
                    hashCode = hashCode * 59 + this.billing_rule.GetHashCode();
                if (this.contract_asset_account != null)
                    hashCode = hashCode * 59 + this.contract_asset_account.GetHashCode();
                if (this.contract_liability_account != null)
                    hashCode = hashCode * 59 + this.contract_liability_account.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.discount_unit_amount != null)
                    hashCode = hashCode * 59 + this.discount_unit_amount.GetHashCode();
                if (this.discount_percent != null)
                    hashCode = hashCode * 59 + this.discount_percent.GetHashCode();
                if (this.category != null)
                    hashCode = hashCode * 59 + this.category.GetHashCode();
                if (this.name != null)
                    hashCode = hashCode * 59 + this.name.GetHashCode();
                if (this.type != null)
                    hashCode = hashCode * 59 + this.type.GetHashCode();
                if (this.list_unit_price != null)
                    hashCode = hashCode * 59 + this.list_unit_price.GetHashCode();
                if (this.product_code != null)
                    hashCode = hashCode * 59 + this.product_code.GetHashCode();
                if (this.purchase_order_number != null)
                    hashCode = hashCode * 59 + this.purchase_order_number.GetHashCode();
                if (this.quantity != null)
                    hashCode = hashCode * 59 + this.quantity.GetHashCode();
                if (this.related_subscription_number != null)
                    hashCode = hashCode * 59 + this.related_subscription_number.GetHashCode();
                if (this.sold_to_id != null)
                    hashCode = hashCode * 59 + this.sold_to_id.GetHashCode();
                if (this.tax_code != null)
                    hashCode = hashCode * 59 + this.tax_code.GetHashCode();
                if (this.unbilled_receivables_account != null)
                    hashCode = hashCode * 59 + this.unbilled_receivables_account.GetHashCode();
                if (this.state != null)
                    hashCode = hashCode * 59 + this.state.GetHashCode();
                if (this.item_number != null)
                    hashCode = hashCode * 59 + this.item_number.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.price_id != null)
                    hashCode = hashCode * 59 + this.price_id.GetHashCode();
                if (this.quantity_available_for_return != null)
                    hashCode = hashCode * 59 + this.quantity_available_for_return.GetHashCode();
                if (this.tax_inclusive != null)
                    hashCode = hashCode * 59 + this.tax_inclusive.GetHashCode();
                if (this.invoice_items != null)
                    hashCode = hashCode * 59 + this.invoice_items.GetHashCode();
                if (this.order_id != null)
                    hashCode = hashCode * 59 + this.order_id.GetHashCode();
                if (this.total != null)
                    hashCode = hashCode * 59 + this.total.GetHashCode();
                if (this.subtotal != null)
                    hashCode = hashCode * 59 + this.subtotal.GetHashCode();
                if (this.quantity_fulfilled != null)
                    hashCode = hashCode * 59 + this.quantity_fulfilled.GetHashCode();
                if (this.quantity_pending_fulfillment != null)
                    hashCode = hashCode * 59 + this.quantity_pending_fulfillment.GetHashCode();
                if (this.requires_fulfillment != null)
                    hashCode = hashCode * 59 + this.requires_fulfillment.GetHashCode();
                if (this.original_order_date != null)
                    hashCode = hashCode * 59 + this.original_order_date.GetHashCode();
                if (this.original_order_id != null)
                    hashCode = hashCode * 59 + this.original_order_id.GetHashCode();
                if (this.original_order_line_item_id != null)
                    hashCode = hashCode * 59 + this.original_order_line_item_id.GetHashCode();
                if (this.original_order_line_item_number != null)
                    hashCode = hashCode * 59 + this.original_order_line_item_number.GetHashCode();
                if (this.original_order_number != null)
                    hashCode = hashCode * 59 + this.original_order_number.GetHashCode();
                if (this.discount_total != null)
                    hashCode = hashCode * 59 + this.discount_total.GetHashCode();
                if (this.list_price != null)
                    hashCode = hashCode * 59 + this.list_price.GetHashCode();
                if (this.original_sold_to_id != null)
                    hashCode = hashCode * 59 + this.original_sold_to_id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
