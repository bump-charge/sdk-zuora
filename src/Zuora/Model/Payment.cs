/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// Payment
    /// </summary>
    [DataContract]
    public partial class Payment :  IEquatable<Payment>, IValidatableObject
    {
        /// <summary>
        /// The state of the payment.
        /// </summary>
        /// <value>The state of the payment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            [EnumMember(Value = "draft")]
            Draft = 1,

            /// <summary>
            /// Enum Posted for value: posted
            /// </summary>
            [EnumMember(Value = "posted")]
            Posted = 2,

            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 3,

            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 4,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 5,

            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            Canceled = 6

        }

        /// <summary>
        /// The state of the payment.
        /// </summary>
        /// <value>The state of the payment.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? state { get; set; }
        /// <summary>
        /// The payment gateway state of the payment.
        /// </summary>
        /// <value>The payment gateway state of the payment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GatewayStateEnum
        {
            /// <summary>
            /// Enum Markedforsubmission for value: marked_for_submission
            /// </summary>
            [EnumMember(Value = "marked_for_submission")]
            Markedforsubmission = 1,

            /// <summary>
            /// Enum Submitted for value: submitted
            /// </summary>
            [EnumMember(Value = "submitted")]
            Submitted = 2,

            /// <summary>
            /// Enum Settled for value: settled
            /// </summary>
            [EnumMember(Value = "settled")]
            Settled = 3,

            /// <summary>
            /// Enum Notsubmitted for value: not_submitted
            /// </summary>
            [EnumMember(Value = "not_submitted")]
            Notsubmitted = 4,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 5

        }

        /// <summary>
        /// The payment gateway state of the payment.
        /// </summary>
        /// <value>The payment gateway state of the payment.</value>
        [DataMember(Name="gateway_state", EmitDefaultValue=false)]
        public GatewayStateEnum? gateway_state { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="description">An arbitrary string attached to the object. Often useful for displaying to users..</param>
        /// <param name="referenceId">Transaction identifier returned by the payment gateway. You may use this field to reconcile payments between your payment gateway and Zuora Payments..</param>
        /// <param name="accountId">Identifier of the customer account associated with this payment..</param>
        /// <param name="accountNumber">Human-readable identifier of the account associated with this payment. It can be user-supplied..</param>
        /// <param name="amount">The total amount of the payment..</param>
        /// <param name="authorizationId">Identifier of the authorization transaction from the payment gateway..</param>
        /// <param name="paymentDate">The date and time when the payment takes effect..</param>
        /// <param name="paymentMethodId">Identifier of the payment method used to create this payment..</param>
        /// <param name="gatewayId">Identifier of the payment gateway that Zuora will use to authorize this payment..</param>
        /// <param name="gatewayOrderId">A merchant-specified natural key value that can be passed to the payment gateway when a payment is created. If not specified, the payment number will be passed in instead..</param>
        /// <param name="secondReferenceId">A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments..</param>
        /// <param name="gatewayOptions">gatewayOptions.</param>
        /// <param name="statementDescriptor">A payment gateway-specific field used by Orbital, Vantiv and Verifi..</param>
        /// <param name="statementDescriptorPhone">A payment gateway-specific field used by Orbital, Vantiv and Verifi..</param>
        /// <param name="external">If true, indicates that this payment is not handled by Zuora..</param>
        /// <param name="currency">3-letter ISO 4217 currency code..</param>
        /// <param name="account">The customer account associated with this payment..</param>
        /// <param name="amountApplied">The total amount applied..</param>
        /// <param name="remainingBalance">The total remaining balance..</param>
        /// <param name="amountRefunded">The total amount refunded..</param>
        /// <param name="payoutId">Identifier of the payout associated with this payment..</param>
        /// <param name="paymentNumber">Human-readable identifier for this object; may be user-supplied..</param>
        /// <param name="gatewayResponseCode">Code returned by the payment gateway for this payment..</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="gatewayResponse">Message returned by the payment gateway for this payment..</param>
        /// <param name="gatewayReconciliationStatus">Gateway reconciliation state..</param>
        /// <param name="gatewayReconciliationReason">Gateway reconciliation reason..</param>
        /// <param name="stateTransitions">stateTransitions.</param>
        /// <param name="gatewayStateTransitions">gatewayStateTransitions.</param>
        public Payment(Dictionary<string, Object> customFields = default(Dictionary<string, Object>), string description = default(string), string referenceId = default(string), string accountId = default(string), string accountNumber = default(string), decimal amount = default(decimal), string authorizationId = default(string), DateTime paymentDate = default(DateTime), string paymentMethodId = default(string), string gatewayId = default(string), string gatewayOrderId = default(string), string secondReferenceId = default(string), Dictionary<string, string> gatewayOptions = default(Dictionary<string, string>), string statementDescriptor = default(string), string statementDescriptorPhone = default(string), bool external = default(bool), string currency = default(string), Account account = default(Account), decimal amountApplied = default(decimal), decimal remainingBalance = default(decimal), decimal amountRefunded = default(decimal), string payoutId = default(string), string paymentNumber = default(string), string gatewayResponseCode = default(string), PaymentMethod paymentMethod = default(PaymentMethod), string gatewayResponse = default(string), string gatewayReconciliationStatus = default(string), string gatewayReconciliationReason = default(string), PaymentStateTransitions stateTransitions = default(PaymentStateTransitions), GatewayStateTransitions gatewayStateTransitions = default(GatewayStateTransitions))
        {
            this.account = account;
            this.custom_fields = customFields;
            this.description = description;
            this.reference_id = referenceId;
            this.account_id = accountId;
            this.account_number = accountNumber;
            this.amount = amount;
            this.authorization_id = authorizationId;
            this.payment_date = paymentDate;
            this.payment_method_id = paymentMethodId;
            this.gateway_id = gatewayId;
            this.gateway_order_id = gatewayOrderId;
            this.second_reference_id = secondReferenceId;
            this.gateway_options = gatewayOptions;
            this.statement_descriptor = statementDescriptor;
            this.statement_descriptor_phone = statementDescriptorPhone;
            this.external = external;
            this.currency = currency;
            this.account = account;
            this.amount_applied = amountApplied;
            this.remaining_balance = remainingBalance;
            this.amount_refunded = amountRefunded;
            this.payout_id = payoutId;
            this.payment_number = paymentNumber;
            this.gateway_response_code = gatewayResponseCode;
            this.payment_method = paymentMethod;
            this.gateway_response = gatewayResponse;
            this.gateway_reconciliation_status = gatewayReconciliationStatus;
            this.gateway_reconciliation_reason = gatewayReconciliationReason;
            this.state_transitions = stateTransitions;
            this.gateway_state_transitions = gatewayStateTransitions;
        }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>
        [DataMember(Name="updated_by_id", EmitDefaultValue=false)]
        public string updated_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public DateTime updated_time { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>
        [DataMember(Name="created_by_id", EmitDefaultValue=false)]
        public string created_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public DateTime created_time { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).
        /// </summary>
        /// <value>The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).</value>
        [DataMember(Name="custom_objects", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_objects { get; private set; }

        /// <summary>
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        /// </summary>
        /// <value>An arbitrary string attached to the object. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Transaction identifier returned by the payment gateway. You may use this field to reconcile payments between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>Transaction identifier returned by the payment gateway. You may use this field to reconcile payments between your payment gateway and Zuora Payments.</value>
        [DataMember(Name="reference_id", EmitDefaultValue=false)]
        public string reference_id { get; set; }

        /// <summary>
        /// Identifier of the customer account associated with this payment.
        /// </summary>
        /// <value>Identifier of the customer account associated with this payment.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string account_id { get; set; }

        /// <summary>
        /// Human-readable identifier of the account associated with this payment. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the account associated with this payment. It can be user-supplied.</value>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string account_number { get; set; }

        /// <summary>
        /// The total amount of the payment.
        /// </summary>
        /// <value>The total amount of the payment.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal amount { get; set; }

        /// <summary>
        /// Identifier of the authorization transaction from the payment gateway.
        /// </summary>
        /// <value>Identifier of the authorization transaction from the payment gateway.</value>
        [DataMember(Name="authorization_id", EmitDefaultValue=false)]
        public string authorization_id { get; set; }

        /// <summary>
        /// The date and time when the payment takes effect.
        /// </summary>
        /// <value>The date and time when the payment takes effect.</value>
        [DataMember(Name="payment_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime payment_date { get; set; }

        /// <summary>
        /// Identifier of the payment method used to create this payment.
        /// </summary>
        /// <value>Identifier of the payment method used to create this payment.</value>
        [DataMember(Name="payment_method_id", EmitDefaultValue=false)]
        public string payment_method_id { get; set; }

        /// <summary>
        /// Identifier of the payment gateway that Zuora will use to authorize this payment.
        /// </summary>
        /// <value>Identifier of the payment gateway that Zuora will use to authorize this payment.</value>
        [DataMember(Name="gateway_id", EmitDefaultValue=false)]
        public string gateway_id { get; set; }

        /// <summary>
        /// A merchant-specified natural key value that can be passed to the payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
        /// </summary>
        /// <value>A merchant-specified natural key value that can be passed to the payment gateway when a payment is created. If not specified, the payment number will be passed in instead.</value>
        [DataMember(Name="gateway_order_id", EmitDefaultValue=false)]
        public string gateway_order_id { get; set; }

        /// <summary>
        /// A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.
        /// </summary>
        /// <value>A second transaction identifier returned by the payment gateway if there is an additional transaction for the refunds. You may use this field to reconcile payments between your payment gateway and Zuora Payments.</value>
        [DataMember(Name="second_reference_id", EmitDefaultValue=false)]
        public string second_reference_id { get; set; }

        /// <summary>
        /// Gets or Sets gateway_options
        /// </summary>
        [DataMember(Name="gateway_options", EmitDefaultValue=false)]
        public Dictionary<string, string> gateway_options { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>
        [DataMember(Name="statement_descriptor", EmitDefaultValue=false)]
        public string statement_descriptor { get; set; }

        /// <summary>
        /// A payment gateway-specific field used by Orbital, Vantiv and Verifi.
        /// </summary>
        /// <value>A payment gateway-specific field used by Orbital, Vantiv and Verifi.</value>
        [DataMember(Name="statement_descriptor_phone", EmitDefaultValue=false)]
        public string statement_descriptor_phone { get; set; }

        /// <summary>
        /// If true, indicates that this payment is not handled by Zuora.
        /// </summary>
        /// <value>If true, indicates that this payment is not handled by Zuora.</value>
        [DataMember(Name="external", EmitDefaultValue=false)]
        public bool external { get; set; }

        /// <summary>
        /// 3-letter ISO 4217 currency code.
        /// </summary>
        /// <value>3-letter ISO 4217 currency code.</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string currency { get; set; }

        /// <summary>
        /// The customer account associated with this payment.
        /// </summary>
        /// <value>The customer account associated with this payment.</value>
        [DataMember(Name="account", EmitDefaultValue=true)]
        public Account account { get; set; }

        /// <summary>
        /// The total amount applied.
        /// </summary>
        /// <value>The total amount applied.</value>
        [DataMember(Name="amount_applied", EmitDefaultValue=false)]
        public decimal amount_applied { get; set; }

        /// <summary>
        /// The total remaining balance.
        /// </summary>
        /// <value>The total remaining balance.</value>
        [DataMember(Name="remaining_balance", EmitDefaultValue=false)]
        public decimal remaining_balance { get; set; }

        /// <summary>
        /// The total amount refunded.
        /// </summary>
        /// <value>The total amount refunded.</value>
        [DataMember(Name="amount_refunded", EmitDefaultValue=false)]
        public decimal amount_refunded { get; set; }


        /// <summary>
        /// Identifier of the payout associated with this payment.
        /// </summary>
        /// <value>Identifier of the payout associated with this payment.</value>
        [DataMember(Name="payout_id", EmitDefaultValue=false)]
        public string payout_id { get; set; }

        /// <summary>
        /// Human-readable identifier for this object; may be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier for this object; may be user-supplied.</value>
        [DataMember(Name="payment_number", EmitDefaultValue=false)]
        public string payment_number { get; set; }

        /// <summary>
        /// Code returned by the payment gateway for this payment.
        /// </summary>
        /// <value>Code returned by the payment gateway for this payment.</value>
        [DataMember(Name="gateway_response_code", EmitDefaultValue=false)]
        public string gateway_response_code { get; set; }

        /// <summary>
        /// Gets or Sets payment_method
        /// </summary>
        [DataMember(Name="payment_method", EmitDefaultValue=false)]
        public PaymentMethod payment_method { get; set; }

        /// <summary>
        /// Message returned by the payment gateway for this payment.
        /// </summary>
        /// <value>Message returned by the payment gateway for this payment.</value>
        [DataMember(Name="gateway_response", EmitDefaultValue=false)]
        public string gateway_response { get; set; }

        /// <summary>
        /// Gateway reconciliation state.
        /// </summary>
        /// <value>Gateway reconciliation state.</value>
        [DataMember(Name="gateway_reconciliation_status", EmitDefaultValue=false)]
        public string gateway_reconciliation_status { get; set; }

        /// <summary>
        /// Gateway reconciliation reason.
        /// </summary>
        /// <value>Gateway reconciliation reason.</value>
        [DataMember(Name="gateway_reconciliation_reason", EmitDefaultValue=false)]
        public string gateway_reconciliation_reason { get; set; }


        /// <summary>
        /// Gets or Sets applied_to
        /// </summary>
        [DataMember(Name="applied_to", EmitDefaultValue=false)]
        public List<PaymentsAppliedToResponse> applied_to { get; private set; }

        /// <summary>
        /// Gets or Sets state_transitions
        /// </summary>
        [DataMember(Name="state_transitions", EmitDefaultValue=false)]
        public PaymentStateTransitions state_transitions { get; set; }

        /// <summary>
        /// Gets or Sets gateway_state_transitions
        /// </summary>
        [DataMember(Name="gateway_state_transitions", EmitDefaultValue=false)]
        public GatewayStateTransitions gateway_state_transitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  updated_by_id: ").Append(updated_by_id).Append("\n");
            sb.Append("  updated_time: ").Append(updated_time).Append("\n");
            sb.Append("  created_by_id: ").Append(created_by_id).Append("\n");
            sb.Append("  created_time: ").Append(created_time).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  custom_objects: ").Append(custom_objects).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  reference_id: ").Append(reference_id).Append("\n");
            sb.Append("  account_id: ").Append(account_id).Append("\n");
            sb.Append("  account_number: ").Append(account_number).Append("\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  authorization_id: ").Append(authorization_id).Append("\n");
            sb.Append("  payment_date: ").Append(payment_date).Append("\n");
            sb.Append("  payment_method_id: ").Append(payment_method_id).Append("\n");
            sb.Append("  gateway_id: ").Append(gateway_id).Append("\n");
            sb.Append("  gateway_order_id: ").Append(gateway_order_id).Append("\n");
            sb.Append("  second_reference_id: ").Append(second_reference_id).Append("\n");
            sb.Append("  gateway_options: ").Append(gateway_options).Append("\n");
            sb.Append("  statement_descriptor: ").Append(statement_descriptor).Append("\n");
            sb.Append("  statement_descriptor_phone: ").Append(statement_descriptor_phone).Append("\n");
            sb.Append("  external: ").Append(external).Append("\n");
            sb.Append("  currency: ").Append(currency).Append("\n");
            sb.Append("  account: ").Append(account).Append("\n");
            sb.Append("  amount_applied: ").Append(amount_applied).Append("\n");
            sb.Append("  remaining_balance: ").Append(remaining_balance).Append("\n");
            sb.Append("  amount_refunded: ").Append(amount_refunded).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  payout_id: ").Append(payout_id).Append("\n");
            sb.Append("  payment_number: ").Append(payment_number).Append("\n");
            sb.Append("  gateway_response_code: ").Append(gateway_response_code).Append("\n");
            sb.Append("  payment_method: ").Append(payment_method).Append("\n");
            sb.Append("  gateway_response: ").Append(gateway_response).Append("\n");
            sb.Append("  gateway_reconciliation_status: ").Append(gateway_reconciliation_status).Append("\n");
            sb.Append("  gateway_reconciliation_reason: ").Append(gateway_reconciliation_reason).Append("\n");
            sb.Append("  gateway_state: ").Append(gateway_state).Append("\n");
            sb.Append("  applied_to: ").Append(applied_to).Append("\n");
            sb.Append("  state_transitions: ").Append(state_transitions).Append("\n");
            sb.Append("  gateway_state_transitions: ").Append(gateway_state_transitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Payment);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="input">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.updated_by_id == input.updated_by_id ||
                    (this.updated_by_id != null &&
                    this.updated_by_id.Equals(input.updated_by_id))
                ) && 
                (
                    this.updated_time == input.updated_time ||
                    (this.updated_time != null &&
                    this.updated_time.Equals(input.updated_time))
                ) && 
                (
                    this.created_by_id == input.created_by_id ||
                    (this.created_by_id != null &&
                    this.created_by_id.Equals(input.created_by_id))
                ) && 
                (
                    this.created_time == input.created_time ||
                    (this.created_time != null &&
                    this.created_time.Equals(input.created_time))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.custom_objects == input.custom_objects ||
                    this.custom_objects != null &&
                    input.custom_objects != null &&
                    this.custom_objects.SequenceEqual(input.custom_objects)
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.reference_id == input.reference_id ||
                    (this.reference_id != null &&
                    this.reference_id.Equals(input.reference_id))
                ) && 
                (
                    this.account_id == input.account_id ||
                    (this.account_id != null &&
                    this.account_id.Equals(input.account_id))
                ) && 
                (
                    this.account_number == input.account_number ||
                    (this.account_number != null &&
                    this.account_number.Equals(input.account_number))
                ) && 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.authorization_id == input.authorization_id ||
                    (this.authorization_id != null &&
                    this.authorization_id.Equals(input.authorization_id))
                ) && 
                (
                    this.payment_date == input.payment_date ||
                    (this.payment_date != null &&
                    this.payment_date.Equals(input.payment_date))
                ) && 
                (
                    this.payment_method_id == input.payment_method_id ||
                    (this.payment_method_id != null &&
                    this.payment_method_id.Equals(input.payment_method_id))
                ) && 
                (
                    this.gateway_id == input.gateway_id ||
                    (this.gateway_id != null &&
                    this.gateway_id.Equals(input.gateway_id))
                ) && 
                (
                    this.gateway_order_id == input.gateway_order_id ||
                    (this.gateway_order_id != null &&
                    this.gateway_order_id.Equals(input.gateway_order_id))
                ) && 
                (
                    this.second_reference_id == input.second_reference_id ||
                    (this.second_reference_id != null &&
                    this.second_reference_id.Equals(input.second_reference_id))
                ) && 
                (
                    this.gateway_options == input.gateway_options ||
                    this.gateway_options != null &&
                    input.gateway_options != null &&
                    this.gateway_options.SequenceEqual(input.gateway_options)
                ) && 
                (
                    this.statement_descriptor == input.statement_descriptor ||
                    (this.statement_descriptor != null &&
                    this.statement_descriptor.Equals(input.statement_descriptor))
                ) && 
                (
                    this.statement_descriptor_phone == input.statement_descriptor_phone ||
                    (this.statement_descriptor_phone != null &&
                    this.statement_descriptor_phone.Equals(input.statement_descriptor_phone))
                ) && 
                (
                    this.external == input.external ||
                    (this.external != null &&
                    this.external.Equals(input.external))
                ) && 
                (
                    this.currency == input.currency ||
                    (this.currency != null &&
                    this.currency.Equals(input.currency))
                ) && 
                (
                    this.account == input.account ||
                    (this.account != null &&
                    this.account.Equals(input.account))
                ) && 
                (
                    this.amount_applied == input.amount_applied ||
                    (this.amount_applied != null &&
                    this.amount_applied.Equals(input.amount_applied))
                ) && 
                (
                    this.remaining_balance == input.remaining_balance ||
                    (this.remaining_balance != null &&
                    this.remaining_balance.Equals(input.remaining_balance))
                ) && 
                (
                    this.amount_refunded == input.amount_refunded ||
                    (this.amount_refunded != null &&
                    this.amount_refunded.Equals(input.amount_refunded))
                ) && 
                (
                    this.state == input.state ||
                    (this.state != null &&
                    this.state.Equals(input.state))
                ) && 
                (
                    this.payout_id == input.payout_id ||
                    (this.payout_id != null &&
                    this.payout_id.Equals(input.payout_id))
                ) && 
                (
                    this.payment_number == input.payment_number ||
                    (this.payment_number != null &&
                    this.payment_number.Equals(input.payment_number))
                ) && 
                (
                    this.gateway_response_code == input.gateway_response_code ||
                    (this.gateway_response_code != null &&
                    this.gateway_response_code.Equals(input.gateway_response_code))
                ) && 
                (
                    this.payment_method == input.payment_method ||
                    (this.payment_method != null &&
                    this.payment_method.Equals(input.payment_method))
                ) && 
                (
                    this.gateway_response == input.gateway_response ||
                    (this.gateway_response != null &&
                    this.gateway_response.Equals(input.gateway_response))
                ) && 
                (
                    this.gateway_reconciliation_status == input.gateway_reconciliation_status ||
                    (this.gateway_reconciliation_status != null &&
                    this.gateway_reconciliation_status.Equals(input.gateway_reconciliation_status))
                ) && 
                (
                    this.gateway_reconciliation_reason == input.gateway_reconciliation_reason ||
                    (this.gateway_reconciliation_reason != null &&
                    this.gateway_reconciliation_reason.Equals(input.gateway_reconciliation_reason))
                ) && 
                (
                    this.gateway_state == input.gateway_state ||
                    (this.gateway_state != null &&
                    this.gateway_state.Equals(input.gateway_state))
                ) && 
                (
                    this.applied_to == input.applied_to ||
                    this.applied_to != null &&
                    input.applied_to != null &&
                    this.applied_to.SequenceEqual(input.applied_to)
                ) && 
                (
                    this.state_transitions == input.state_transitions ||
                    (this.state_transitions != null &&
                    this.state_transitions.Equals(input.state_transitions))
                ) && 
                (
                    this.gateway_state_transitions == input.gateway_state_transitions ||
                    (this.gateway_state_transitions != null &&
                    this.gateway_state_transitions.Equals(input.gateway_state_transitions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.updated_by_id != null)
                    hashCode = hashCode * 59 + this.updated_by_id.GetHashCode();
                if (this.updated_time != null)
                    hashCode = hashCode * 59 + this.updated_time.GetHashCode();
                if (this.created_by_id != null)
                    hashCode = hashCode * 59 + this.created_by_id.GetHashCode();
                if (this.created_time != null)
                    hashCode = hashCode * 59 + this.created_time.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.custom_objects != null)
                    hashCode = hashCode * 59 + this.custom_objects.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.reference_id != null)
                    hashCode = hashCode * 59 + this.reference_id.GetHashCode();
                if (this.account_id != null)
                    hashCode = hashCode * 59 + this.account_id.GetHashCode();
                if (this.account_number != null)
                    hashCode = hashCode * 59 + this.account_number.GetHashCode();
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.authorization_id != null)
                    hashCode = hashCode * 59 + this.authorization_id.GetHashCode();
                if (this.payment_date != null)
                    hashCode = hashCode * 59 + this.payment_date.GetHashCode();
                if (this.payment_method_id != null)
                    hashCode = hashCode * 59 + this.payment_method_id.GetHashCode();
                if (this.gateway_id != null)
                    hashCode = hashCode * 59 + this.gateway_id.GetHashCode();
                if (this.gateway_order_id != null)
                    hashCode = hashCode * 59 + this.gateway_order_id.GetHashCode();
                if (this.second_reference_id != null)
                    hashCode = hashCode * 59 + this.second_reference_id.GetHashCode();
                if (this.gateway_options != null)
                    hashCode = hashCode * 59 + this.gateway_options.GetHashCode();
                if (this.statement_descriptor != null)
                    hashCode = hashCode * 59 + this.statement_descriptor.GetHashCode();
                if (this.statement_descriptor_phone != null)
                    hashCode = hashCode * 59 + this.statement_descriptor_phone.GetHashCode();
                if (this.external != null)
                    hashCode = hashCode * 59 + this.external.GetHashCode();
                if (this.currency != null)
                    hashCode = hashCode * 59 + this.currency.GetHashCode();
                if (this.account != null)
                    hashCode = hashCode * 59 + this.account.GetHashCode();
                if (this.amount_applied != null)
                    hashCode = hashCode * 59 + this.amount_applied.GetHashCode();
                if (this.remaining_balance != null)
                    hashCode = hashCode * 59 + this.remaining_balance.GetHashCode();
                if (this.amount_refunded != null)
                    hashCode = hashCode * 59 + this.amount_refunded.GetHashCode();
                if (this.state != null)
                    hashCode = hashCode * 59 + this.state.GetHashCode();
                if (this.payout_id != null)
                    hashCode = hashCode * 59 + this.payout_id.GetHashCode();
                if (this.payment_number != null)
                    hashCode = hashCode * 59 + this.payment_number.GetHashCode();
                if (this.gateway_response_code != null)
                    hashCode = hashCode * 59 + this.gateway_response_code.GetHashCode();
                if (this.payment_method != null)
                    hashCode = hashCode * 59 + this.payment_method.GetHashCode();
                if (this.gateway_response != null)
                    hashCode = hashCode * 59 + this.gateway_response.GetHashCode();
                if (this.gateway_reconciliation_status != null)
                    hashCode = hashCode * 59 + this.gateway_reconciliation_status.GetHashCode();
                if (this.gateway_reconciliation_reason != null)
                    hashCode = hashCode * 59 + this.gateway_reconciliation_reason.GetHashCode();
                if (this.gateway_state != null)
                    hashCode = hashCode * 59 + this.gateway_state.GetHashCode();
                if (this.applied_to != null)
                    hashCode = hashCode * 59 + this.applied_to.GetHashCode();
                if (this.state_transitions != null)
                    hashCode = hashCode * 59 + this.state_transitions.GetHashCode();
                if (this.gateway_state_transitions != null)
                    hashCode = hashCode * 59 + this.gateway_state_transitions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
