/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// SubscriptionPatchRequest
    /// </summary>
    [DataContract]
    public partial class SubscriptionPatchRequest :  IEquatable<SubscriptionPatchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPatchRequest" /> class.
        /// </summary>
        /// <param name="description">Description of the subscription..</param>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="terms">terms.</param>
        /// <param name="invoiceOwnerAccountId">Identifier of the account that owns the invoice associated with this subscription..</param>
        /// <param name="invoiceOwnerAccountNumber">Identifier of the account that owns the invoice associated with this subscription..</param>
        /// <param name="accountId">Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account..</param>
        /// <param name="accountNumber">Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account..</param>
        /// <param name="addSubscriptionPlans">Specify this field if you want to add one or multiple subscription plans to this subscription..</param>
        /// <param name="removeSubscriptionPlans">Specify this field if you want to remove one or multiple subscription plans from this subscription..</param>
        /// <param name="replaceSubscriptionPlans">Specify this field if you want to replace one or multiple subscription plans to this subscription. &lt;br /&gt;            **Note**: This field is currently not supported if you have Billing - Revenue Integration enabled. When Billing - Revenue Integration is enabled, the replace subscription plan type of order action will no longer be applicable in Zuora Billing. .</param>
        /// <param name="updateSubscriptionPlans">updateSubscriptionPlans.</param>
        /// <param name="renew">renew.</param>
        /// <param name="cancel">cancel.</param>
        /// <param name="pause">pause.</param>
        /// <param name="resume">resume.</param>
        /// <param name="billToId">ID of the bill-to contact..</param>
        /// <param name="paymentTerms">The name of payment term associated with the invoice..</param>
        /// <param name="billingDocumentSettings">The billing document settings for the customer..</param>
        /// <param name="soldToId">ID of the sold-to contact..</param>
        /// <param name="invoiceSeparately">Separates a single subscription from other subscriptions and creates an invoice for this subscription. If the value is &#x60;true&#x60;, the subscription is billed separately from other subscriptions. If the value is &#x60;false&#x60;, the subscription is included with other subscriptions in the account invoice..</param>
        public SubscriptionPatchRequest(string description = default(string), Dictionary<string, Object> customFields = default(Dictionary<string, Object>), SubscriptionTermPatchRequest terms = default(SubscriptionTermPatchRequest), string invoiceOwnerAccountId = default(string), string invoiceOwnerAccountNumber = default(string), string accountId = default(string), string accountNumber = default(string), List<SubscriptionAddPlanPatchRequest> addSubscriptionPlans = default(List<SubscriptionAddPlanPatchRequest>), List<SubscriptionRemovePlanPatchRequest> removeSubscriptionPlans = default(List<SubscriptionRemovePlanPatchRequest>), List<SubscriptionReplacePlanPatchRequest> replaceSubscriptionPlans = default(List<SubscriptionReplacePlanPatchRequest>), List<SubscriptionUpdatePlanPatchRequest> updateSubscriptionPlans = default(List<SubscriptionUpdatePlanPatchRequest>), SubscriptionRenewPatchRequest renew = default(SubscriptionRenewPatchRequest), CancelSubscriptionRequest cancel = default(CancelSubscriptionRequest), PauseSubscriptionRequest pause = default(PauseSubscriptionRequest), ResumeSubscriptionRequest resume = default(ResumeSubscriptionRequest), string billToId = default(string), string paymentTerms = default(string), FlexibleBillingDocumentSettings billingDocumentSettings = default(FlexibleBillingDocumentSettings), string soldToId = default(string), bool invoiceSeparately = default(bool))
        {
            this.pause = pause;
            this.bill_to_id = billToId;
            this.payment_terms = paymentTerms;
            this.billing_document_settings = billingDocumentSettings;
            this.sold_to_id = soldToId;
            this.description = description;
            this.custom_fields = customFields;
            this.terms = terms;
            this.invoice_owner_account_id = invoiceOwnerAccountId;
            this.invoice_owner_account_number = invoiceOwnerAccountNumber;
            this.account_id = accountId;
            this.account_number = accountNumber;
            this.add_subscription_plans = addSubscriptionPlans;
            this.remove_subscription_plans = removeSubscriptionPlans;
            this.replace_subscription_plans = replaceSubscriptionPlans;
            this.update_subscription_plans = updateSubscriptionPlans;
            this.renew = renew;
            this.cancel = cancel;
            this.pause = pause;
            this.resume = resume;
            this.bill_to_id = billToId;
            this.payment_terms = paymentTerms;
            this.billing_document_settings = billingDocumentSettings;
            this.sold_to_id = soldToId;
            this.invoice_separately = invoiceSeparately;
        }

        /// <summary>
        /// Description of the subscription.
        /// </summary>
        /// <value>Description of the subscription.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// Gets or Sets terms
        /// </summary>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public SubscriptionTermPatchRequest terms { get; set; }

        /// <summary>
        /// Identifier of the account that owns the invoice associated with this subscription.
        /// </summary>
        /// <value>Identifier of the account that owns the invoice associated with this subscription.</value>
        [DataMember(Name="invoice_owner_account_id", EmitDefaultValue=false)]
        public string invoice_owner_account_id { get; set; }

        /// <summary>
        /// Identifier of the account that owns the invoice associated with this subscription.
        /// </summary>
        /// <value>Identifier of the account that owns the invoice associated with this subscription.</value>
        [DataMember(Name="invoice_owner_account_number", EmitDefaultValue=false)]
        public string invoice_owner_account_number { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string account_id { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription. Subscription owner account can be different from the invoice owner account.</value>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string account_number { get; set; }

        /// <summary>
        /// Specify this field if you want to add one or multiple subscription plans to this subscription.
        /// </summary>
        /// <value>Specify this field if you want to add one or multiple subscription plans to this subscription.</value>
        [DataMember(Name="add_subscription_plans", EmitDefaultValue=false)]
        public List<SubscriptionAddPlanPatchRequest> add_subscription_plans { get; set; }

        /// <summary>
        /// Specify this field if you want to remove one or multiple subscription plans from this subscription.
        /// </summary>
        /// <value>Specify this field if you want to remove one or multiple subscription plans from this subscription.</value>
        [DataMember(Name="remove_subscription_plans", EmitDefaultValue=false)]
        public List<SubscriptionRemovePlanPatchRequest> remove_subscription_plans { get; set; }

        /// <summary>
        /// Specify this field if you want to replace one or multiple subscription plans to this subscription. &lt;br /&gt;            **Note**: This field is currently not supported if you have Billing - Revenue Integration enabled. When Billing - Revenue Integration is enabled, the replace subscription plan type of order action will no longer be applicable in Zuora Billing. 
        /// </summary>
        /// <value>Specify this field if you want to replace one or multiple subscription plans to this subscription. &lt;br /&gt;            **Note**: This field is currently not supported if you have Billing - Revenue Integration enabled. When Billing - Revenue Integration is enabled, the replace subscription plan type of order action will no longer be applicable in Zuora Billing. </value>
        [DataMember(Name="replace_subscription_plans", EmitDefaultValue=false)]
        public List<SubscriptionReplacePlanPatchRequest> replace_subscription_plans { get; set; }

        /// <summary>
        /// Gets or Sets update_subscription_plans
        /// </summary>
        [DataMember(Name="update_subscription_plans", EmitDefaultValue=false)]
        public List<SubscriptionUpdatePlanPatchRequest> update_subscription_plans { get; set; }

        /// <summary>
        /// Gets or Sets renew
        /// </summary>
        [DataMember(Name="renew", EmitDefaultValue=false)]
        public SubscriptionRenewPatchRequest renew { get; set; }

        /// <summary>
        /// Gets or Sets cancel
        /// </summary>
        [DataMember(Name="cancel", EmitDefaultValue=false)]
        public CancelSubscriptionRequest cancel { get; set; }

        /// <summary>
        /// Gets or Sets pause
        /// </summary>
        [DataMember(Name="pause", EmitDefaultValue=true)]
        public PauseSubscriptionRequest pause { get; set; }

        /// <summary>
        /// Gets or Sets resume
        /// </summary>
        [DataMember(Name="resume", EmitDefaultValue=false)]
        public ResumeSubscriptionRequest resume { get; set; }

        /// <summary>
        /// ID of the bill-to contact.
        /// </summary>
        /// <value>ID of the bill-to contact.</value>
        [DataMember(Name="bill_to_id", EmitDefaultValue=true)]
        public string bill_to_id { get; set; }

        /// <summary>
        /// The name of payment term associated with the invoice.
        /// </summary>
        /// <value>The name of payment term associated with the invoice.</value>
        [DataMember(Name="payment_terms", EmitDefaultValue=true)]
        public string payment_terms { get; set; }

        /// <summary>
        /// The billing document settings for the customer.
        /// </summary>
        /// <value>The billing document settings for the customer.</value>
        [DataMember(Name="billing_document_settings", EmitDefaultValue=true)]
        public FlexibleBillingDocumentSettings billing_document_settings { get; set; }

        /// <summary>
        /// ID of the sold-to contact.
        /// </summary>
        /// <value>ID of the sold-to contact.</value>
        [DataMember(Name="sold_to_id", EmitDefaultValue=true)]
        public string sold_to_id { get; set; }

        /// <summary>
        /// Separates a single subscription from other subscriptions and creates an invoice for this subscription. If the value is &#x60;true&#x60;, the subscription is billed separately from other subscriptions. If the value is &#x60;false&#x60;, the subscription is included with other subscriptions in the account invoice.
        /// </summary>
        /// <value>Separates a single subscription from other subscriptions and creates an invoice for this subscription. If the value is &#x60;true&#x60;, the subscription is billed separately from other subscriptions. If the value is &#x60;false&#x60;, the subscription is included with other subscriptions in the account invoice.</value>
        [DataMember(Name="invoice_separately", EmitDefaultValue=false)]
        public bool invoice_separately { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPatchRequest {\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  terms: ").Append(terms).Append("\n");
            sb.Append("  invoice_owner_account_id: ").Append(invoice_owner_account_id).Append("\n");
            sb.Append("  invoice_owner_account_number: ").Append(invoice_owner_account_number).Append("\n");
            sb.Append("  account_id: ").Append(account_id).Append("\n");
            sb.Append("  account_number: ").Append(account_number).Append("\n");
            sb.Append("  add_subscription_plans: ").Append(add_subscription_plans).Append("\n");
            sb.Append("  remove_subscription_plans: ").Append(remove_subscription_plans).Append("\n");
            sb.Append("  replace_subscription_plans: ").Append(replace_subscription_plans).Append("\n");
            sb.Append("  update_subscription_plans: ").Append(update_subscription_plans).Append("\n");
            sb.Append("  renew: ").Append(renew).Append("\n");
            sb.Append("  cancel: ").Append(cancel).Append("\n");
            sb.Append("  pause: ").Append(pause).Append("\n");
            sb.Append("  resume: ").Append(resume).Append("\n");
            sb.Append("  bill_to_id: ").Append(bill_to_id).Append("\n");
            sb.Append("  payment_terms: ").Append(payment_terms).Append("\n");
            sb.Append("  billing_document_settings: ").Append(billing_document_settings).Append("\n");
            sb.Append("  sold_to_id: ").Append(sold_to_id).Append("\n");
            sb.Append("  invoice_separately: ").Append(invoice_separately).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionPatchRequest);
        }

        /// <summary>
        /// Returns true if SubscriptionPatchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionPatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPatchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.terms == input.terms ||
                    (this.terms != null &&
                    this.terms.Equals(input.terms))
                ) && 
                (
                    this.invoice_owner_account_id == input.invoice_owner_account_id ||
                    (this.invoice_owner_account_id != null &&
                    this.invoice_owner_account_id.Equals(input.invoice_owner_account_id))
                ) && 
                (
                    this.invoice_owner_account_number == input.invoice_owner_account_number ||
                    (this.invoice_owner_account_number != null &&
                    this.invoice_owner_account_number.Equals(input.invoice_owner_account_number))
                ) && 
                (
                    this.account_id == input.account_id ||
                    (this.account_id != null &&
                    this.account_id.Equals(input.account_id))
                ) && 
                (
                    this.account_number == input.account_number ||
                    (this.account_number != null &&
                    this.account_number.Equals(input.account_number))
                ) && 
                (
                    this.add_subscription_plans == input.add_subscription_plans ||
                    this.add_subscription_plans != null &&
                    input.add_subscription_plans != null &&
                    this.add_subscription_plans.SequenceEqual(input.add_subscription_plans)
                ) && 
                (
                    this.remove_subscription_plans == input.remove_subscription_plans ||
                    this.remove_subscription_plans != null &&
                    input.remove_subscription_plans != null &&
                    this.remove_subscription_plans.SequenceEqual(input.remove_subscription_plans)
                ) && 
                (
                    this.replace_subscription_plans == input.replace_subscription_plans ||
                    this.replace_subscription_plans != null &&
                    input.replace_subscription_plans != null &&
                    this.replace_subscription_plans.SequenceEqual(input.replace_subscription_plans)
                ) && 
                (
                    this.update_subscription_plans == input.update_subscription_plans ||
                    this.update_subscription_plans != null &&
                    input.update_subscription_plans != null &&
                    this.update_subscription_plans.SequenceEqual(input.update_subscription_plans)
                ) && 
                (
                    this.renew == input.renew ||
                    (this.renew != null &&
                    this.renew.Equals(input.renew))
                ) && 
                (
                    this.cancel == input.cancel ||
                    (this.cancel != null &&
                    this.cancel.Equals(input.cancel))
                ) && 
                (
                    this.pause == input.pause ||
                    (this.pause != null &&
                    this.pause.Equals(input.pause))
                ) && 
                (
                    this.resume == input.resume ||
                    (this.resume != null &&
                    this.resume.Equals(input.resume))
                ) && 
                (
                    this.bill_to_id == input.bill_to_id ||
                    (this.bill_to_id != null &&
                    this.bill_to_id.Equals(input.bill_to_id))
                ) && 
                (
                    this.payment_terms == input.payment_terms ||
                    (this.payment_terms != null &&
                    this.payment_terms.Equals(input.payment_terms))
                ) && 
                (
                    this.billing_document_settings == input.billing_document_settings ||
                    (this.billing_document_settings != null &&
                    this.billing_document_settings.Equals(input.billing_document_settings))
                ) && 
                (
                    this.sold_to_id == input.sold_to_id ||
                    (this.sold_to_id != null &&
                    this.sold_to_id.Equals(input.sold_to_id))
                ) && 
                (
                    this.invoice_separately == input.invoice_separately ||
                    (this.invoice_separately != null &&
                    this.invoice_separately.Equals(input.invoice_separately))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.terms != null)
                    hashCode = hashCode * 59 + this.terms.GetHashCode();
                if (this.invoice_owner_account_id != null)
                    hashCode = hashCode * 59 + this.invoice_owner_account_id.GetHashCode();
                if (this.invoice_owner_account_number != null)
                    hashCode = hashCode * 59 + this.invoice_owner_account_number.GetHashCode();
                if (this.account_id != null)
                    hashCode = hashCode * 59 + this.account_id.GetHashCode();
                if (this.account_number != null)
                    hashCode = hashCode * 59 + this.account_number.GetHashCode();
                if (this.add_subscription_plans != null)
                    hashCode = hashCode * 59 + this.add_subscription_plans.GetHashCode();
                if (this.remove_subscription_plans != null)
                    hashCode = hashCode * 59 + this.remove_subscription_plans.GetHashCode();
                if (this.replace_subscription_plans != null)
                    hashCode = hashCode * 59 + this.replace_subscription_plans.GetHashCode();
                if (this.update_subscription_plans != null)
                    hashCode = hashCode * 59 + this.update_subscription_plans.GetHashCode();
                if (this.renew != null)
                    hashCode = hashCode * 59 + this.renew.GetHashCode();
                if (this.cancel != null)
                    hashCode = hashCode * 59 + this.cancel.GetHashCode();
                if (this.pause != null)
                    hashCode = hashCode * 59 + this.pause.GetHashCode();
                if (this.resume != null)
                    hashCode = hashCode * 59 + this.resume.GetHashCode();
                if (this.bill_to_id != null)
                    hashCode = hashCode * 59 + this.bill_to_id.GetHashCode();
                if (this.payment_terms != null)
                    hashCode = hashCode * 59 + this.payment_terms.GetHashCode();
                if (this.billing_document_settings != null)
                    hashCode = hashCode * 59 + this.billing_document_settings.GetHashCode();
                if (this.sold_to_id != null)
                    hashCode = hashCode * 59 + this.sold_to_id.GetHashCode();
                if (this.invoice_separately != null)
                    hashCode = hashCode * 59 + this.invoice_separately.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
