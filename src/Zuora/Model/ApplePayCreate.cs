/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// If the &#x60;type&#x60; of the payment method is &#x60;apple_pay&#x60;, this hash contains details about the Apple Pay payment method. See [Supported payment methods](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/A_Supported_Payment_Methods) for payment gateways that support this type of payment method.
    /// </summary>
    [DataContract]
    public partial class ApplePayCreate :  IEquatable<ApplePayCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplePayCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplePayCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplePayCreate" /> class.
        /// </summary>
        /// <param name="id">The Merchant ID that was configured for use with Apple Pay in the Apple iOS Developer Center..</param>
        /// <param name="customerToken">The complete JSON Object representing the encrypted payment token payload returned in the response from the Apple Pay session. (required).</param>
        /// <param name="collectPayment">A boolean flag to control whether a payment should be processed       after creating payment method. The payment amount will be equivalent to       the amount the merchant supplied in the ApplePay session. Default is false.        If this field is set to &#x60;true&#x60;, you must specify the &#x60;gateway_id&#x60;       field with the payment gateway instance name.  If this field is set       to &#x60;false&#x60;:   - The default payment gateway of your Zuora customer account       will be used no matter whether a payment gateway instance is specified       in the &#x60;gateway_id&#x60; field.    - You must select the **Verify new       credit card** check box on the gateway instance settings page. Otherwise,       the cryptogram will not be sent to the gateway.   - A separate subscribe       or payment API call is required after this payment method creation call. .</param>
        /// <param name="invoiceId">The id of invoice this payment will apply to.      Note: When &#x60;collect_payment&#x60; is true, this field is required.      Only one invoice can be paid; for scenarios where you want to pay for multiple invoices, set collect_payment to false and use [Create Payment](#operation/createPayment) API separately..</param>
        /// <param name="mandate">mandate.</param>
        public ApplePayCreate(string id = default(string), Dictionary<string, Object> customerToken = default(Dictionary<string, Object>), bool collectPayment = default(bool), string invoiceId = default(string), Mandate mandate = default(Mandate))
        {
            // to ensure "customerToken" is required (not null)
            if (customerToken == null)
            {
                throw new InvalidDataException("customerToken is a required property for ApplePayCreate and cannot be null");
            }
            else
            {
                this.customer_token = customerToken;
            }

            this.id = id;
            this.collect_payment = collectPayment;
            this.invoice_id = invoiceId;
            this.mandate = mandate;
        }

        /// <summary>
        /// The Merchant ID that was configured for use with Apple Pay in the Apple iOS Developer Center.
        /// </summary>
        /// <value>The Merchant ID that was configured for use with Apple Pay in the Apple iOS Developer Center.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; set; }

        /// <summary>
        /// The complete JSON Object representing the encrypted payment token payload returned in the response from the Apple Pay session.
        /// </summary>
        /// <value>The complete JSON Object representing the encrypted payment token payload returned in the response from the Apple Pay session.</value>
        [DataMember(Name="customer_token", EmitDefaultValue=true)]
        public Dictionary<string, Object> customer_token { get; set; }

        /// <summary>
        /// A boolean flag to control whether a payment should be processed       after creating payment method. The payment amount will be equivalent to       the amount the merchant supplied in the ApplePay session. Default is false.        If this field is set to &#x60;true&#x60;, you must specify the &#x60;gateway_id&#x60;       field with the payment gateway instance name.  If this field is set       to &#x60;false&#x60;:   - The default payment gateway of your Zuora customer account       will be used no matter whether a payment gateway instance is specified       in the &#x60;gateway_id&#x60; field.    - You must select the **Verify new       credit card** check box on the gateway instance settings page. Otherwise,       the cryptogram will not be sent to the gateway.   - A separate subscribe       or payment API call is required after this payment method creation call. 
        /// </summary>
        /// <value>A boolean flag to control whether a payment should be processed       after creating payment method. The payment amount will be equivalent to       the amount the merchant supplied in the ApplePay session. Default is false.        If this field is set to &#x60;true&#x60;, you must specify the &#x60;gateway_id&#x60;       field with the payment gateway instance name.  If this field is set       to &#x60;false&#x60;:   - The default payment gateway of your Zuora customer account       will be used no matter whether a payment gateway instance is specified       in the &#x60;gateway_id&#x60; field.    - You must select the **Verify new       credit card** check box on the gateway instance settings page. Otherwise,       the cryptogram will not be sent to the gateway.   - A separate subscribe       or payment API call is required after this payment method creation call. </value>
        [DataMember(Name="collect_payment", EmitDefaultValue=false)]
        public bool collect_payment { get; set; }

        /// <summary>
        /// The id of invoice this payment will apply to.      Note: When &#x60;collect_payment&#x60; is true, this field is required.      Only one invoice can be paid; for scenarios where you want to pay for multiple invoices, set collect_payment to false and use [Create Payment](#operation/createPayment) API separately.
        /// </summary>
        /// <value>The id of invoice this payment will apply to.      Note: When &#x60;collect_payment&#x60; is true, this field is required.      Only one invoice can be paid; for scenarios where you want to pay for multiple invoices, set collect_payment to false and use [Create Payment](#operation/createPayment) API separately.</value>
        [DataMember(Name="invoice_id", EmitDefaultValue=false)]
        public string invoice_id { get; set; }

        /// <summary>
        /// Gets or Sets mandate
        /// </summary>
        [DataMember(Name="mandate", EmitDefaultValue=false)]
        public Mandate mandate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplePayCreate {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  customer_token: ").Append(customer_token).Append("\n");
            sb.Append("  collect_payment: ").Append(collect_payment).Append("\n");
            sb.Append("  invoice_id: ").Append(invoice_id).Append("\n");
            sb.Append("  mandate: ").Append(mandate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplePayCreate);
        }

        /// <summary>
        /// Returns true if ApplePayCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplePayCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplePayCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.customer_token == input.customer_token ||
                    this.customer_token != null &&
                    input.customer_token != null &&
                    this.customer_token.SequenceEqual(input.customer_token)
                ) && 
                (
                    this.collect_payment == input.collect_payment ||
                    (this.collect_payment != null &&
                    this.collect_payment.Equals(input.collect_payment))
                ) && 
                (
                    this.invoice_id == input.invoice_id ||
                    (this.invoice_id != null &&
                    this.invoice_id.Equals(input.invoice_id))
                ) && 
                (
                    this.mandate == input.mandate ||
                    (this.mandate != null &&
                    this.mandate.Equals(input.mandate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.customer_token != null)
                    hashCode = hashCode * 59 + this.customer_token.GetHashCode();
                if (this.collect_payment != null)
                    hashCode = hashCode * 59 + this.collect_payment.GetHashCode();
                if (this.invoice_id != null)
                    hashCode = hashCode * 59 + this.invoice_id.GetHashCode();
                if (this.mandate != null)
                    hashCode = hashCode * 59 + this.mandate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
