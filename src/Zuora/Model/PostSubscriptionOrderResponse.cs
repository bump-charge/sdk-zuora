/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// PostSubscriptionOrderResponse
    /// </summary>
    [DataContract]
    public partial class PostSubscriptionOrderResponse :  IEquatable<PostSubscriptionOrderResponse>, IValidatableObject
    {
        /// <summary>
        /// Status of the subscription.
        /// </summary>
        /// <value>Status of the subscription.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            [EnumMember(Value = "draft")]
            Draft = 1,

            /// <summary>
            /// Enum Pendingactivation for value: pending_activation
            /// </summary>
            [EnumMember(Value = "pending_activation")]
            Pendingactivation = 2,

            /// <summary>
            /// Enum Pendingacceptance for value: pending_acceptance
            /// </summary>
            [EnumMember(Value = "pending_acceptance")]
            Pendingacceptance = 3,

            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 4,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 5,

            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            Canceled = 6,

            /// <summary>
            /// Enum Paused for value: paused
            /// </summary>
            [EnumMember(Value = "paused")]
            Paused = 7

        }

        /// <summary>
        /// Status of the subscription.
        /// </summary>
        /// <value>Status of the subscription.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? state { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostSubscriptionOrderResponse" /> class.
        /// </summary>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="subscriptionNumber">Human-readable identifier of the subscription. It can be user-supplied..</param>
        /// <param name="state">Status of the subscription..</param>
        /// <param name="version">The version of the subscription. This version can be used in the &#x60;filter[]&#x60; query parameter to filter subscriptions..</param>
        /// <param name="accountId">Identifier of the account associated with this subscription..</param>
        /// <param name="account">Information of the new account associated with the subscription..</param>
        /// <param name="invoiceOwnerAccountId">Identifier of the account that owns the invoice associated with this subscription..</param>
        /// <param name="invoiceOwnerAccount">Identifier of the account that owns the subscription..</param>
        /// <param name="autoRenew">If this field is set to &#x60;true&#x60;, the subscription automatically renews at the end of the current term..</param>
        /// <param name="latestVersion">If true, this is the latest version of the subscription.</param>
        /// <param name="initialTerm">Initial term information for the subscription..</param>
        /// <param name="currentTerm">Current term information for the subscription.</param>
        /// <param name="renewalTerm">Renewal term information for the subscription..</param>
        /// <param name="startDate">Date when the subscription starts..</param>
        /// <param name="endDate">Date when the subscription ends..</param>
        /// <param name="description">Description of the subscription. Often useful for displaying to users..</param>
        /// <param name="contractEffective">Date when the subscriber contract is effective..</param>
        /// <param name="serviceActivation">Date when the subscribed-to service is activated..</param>
        /// <param name="customerAcceptance">Date when all the services or products in the subscription are accepted by the subscriber..</param>
        /// <param name="invoiceSeparately">If true, the subscription is billed separately from other subscriptions. If false, the subscription is included with other subscriptions in the account invoice. The default is false..</param>
        /// <param name="orderNumber">The order number of the order created by Zuora..</param>
        /// <param name="contractedMrr">Monthly recurring revenue of the subscription..</param>
        /// <param name="billToId">ID of the bill-to contact..</param>
        /// <param name="paymentTerms">The name of payment term associated with the invoice..</param>
        /// <param name="billingDocumentSettings">The billing document settings for the customer..</param>
        /// <param name="soldToId">ID of the sold-to contact..</param>
        /// <param name="actions">actions.</param>
        public PostSubscriptionOrderResponse(Dictionary<string, Object> customFields = default(Dictionary<string, Object>), string subscriptionNumber = default(string), StateEnum? state = default(StateEnum?), int version = default(int), string accountId = default(string), Account account = default(Account), string invoiceOwnerAccountId = default(string), Account invoiceOwnerAccount = default(Account), bool autoRenew = default(bool), bool latestVersion = default(bool), Term initialTerm = default(Term), Term currentTerm = default(Term), Term renewalTerm = default(Term), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), string description = default(string), DateTime contractEffective = default(DateTime), DateTime serviceActivation = default(DateTime), DateTime customerAcceptance = default(DateTime), bool invoiceSeparately = default(bool), string orderNumber = default(string), string contractedMrr = default(string), string billToId = default(string), string paymentTerms = default(string), FlexibleBillingDocumentSettings billingDocumentSettings = default(FlexibleBillingDocumentSettings), string soldToId = default(string), List<OrderAction> actions = default(List<OrderAction>))
        {
            this.account = account;
            this.invoice_owner_account = invoiceOwnerAccount;
            this.initial_term = initialTerm;
            this.current_term = currentTerm;
            this.renewal_term = renewalTerm;
            this.bill_to_id = billToId;
            this.payment_terms = paymentTerms;
            this.billing_document_settings = billingDocumentSettings;
            this.sold_to_id = soldToId;
            this.custom_fields = customFields;
            this.subscription_number = subscriptionNumber;
            this.state = state;
            this.version = version;
            this.account_id = accountId;
            this.account = account;
            this.invoice_owner_account_id = invoiceOwnerAccountId;
            this.invoice_owner_account = invoiceOwnerAccount;
            this.auto_renew = autoRenew;
            this.latest_version = latestVersion;
            this.initial_term = initialTerm;
            this.current_term = currentTerm;
            this.renewal_term = renewalTerm;
            this.start_date = startDate;
            this.end_date = endDate;
            this.description = description;
            this.contract_effective = contractEffective;
            this.service_activation = serviceActivation;
            this.customer_acceptance = customerAcceptance;
            this.invoice_separately = invoiceSeparately;
            this.order_number = orderNumber;
            this.contracted_mrr = contractedMrr;
            this.bill_to_id = billToId;
            this.payment_terms = paymentTerms;
            this.billing_document_settings = billingDocumentSettings;
            this.sold_to_id = soldToId;
            this.actions = actions;
        }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>
        [DataMember(Name="updated_by_id", EmitDefaultValue=false)]
        public string updated_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public DateTime updated_time { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>
        [DataMember(Name="created_by_id", EmitDefaultValue=false)]
        public string created_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public DateTime created_time { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).
        /// </summary>
        /// <value>The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).</value>
        [DataMember(Name="custom_objects", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_objects { get; private set; }

        /// <summary>
        /// Human-readable identifier of the subscription. It can be user-supplied.
        /// </summary>
        /// <value>Human-readable identifier of the subscription. It can be user-supplied.</value>
        [DataMember(Name="subscription_number", EmitDefaultValue=false)]
        public string subscription_number { get; set; }


        /// <summary>
        /// The version of the subscription. This version can be used in the &#x60;filter[]&#x60; query parameter to filter subscriptions.
        /// </summary>
        /// <value>The version of the subscription. This version can be used in the &#x60;filter[]&#x60; query parameter to filter subscriptions.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int version { get; set; }

        /// <summary>
        /// Identifier of the account associated with this subscription.
        /// </summary>
        /// <value>Identifier of the account associated with this subscription.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string account_id { get; set; }

        /// <summary>
        /// Information of the new account associated with the subscription.
        /// </summary>
        /// <value>Information of the new account associated with the subscription.</value>
        [DataMember(Name="account", EmitDefaultValue=true)]
        public Account account { get; set; }

        /// <summary>
        /// Identifier of the account that owns the invoice associated with this subscription.
        /// </summary>
        /// <value>Identifier of the account that owns the invoice associated with this subscription.</value>
        [DataMember(Name="invoice_owner_account_id", EmitDefaultValue=false)]
        public string invoice_owner_account_id { get; set; }

        /// <summary>
        /// Identifier of the account that owns the subscription.
        /// </summary>
        /// <value>Identifier of the account that owns the subscription.</value>
        [DataMember(Name="invoice_owner_account", EmitDefaultValue=true)]
        public Account invoice_owner_account { get; set; }

        /// <summary>
        /// If this field is set to &#x60;true&#x60;, the subscription automatically renews at the end of the current term.
        /// </summary>
        /// <value>If this field is set to &#x60;true&#x60;, the subscription automatically renews at the end of the current term.</value>
        [DataMember(Name="auto_renew", EmitDefaultValue=false)]
        public bool auto_renew { get; set; }

        /// <summary>
        /// If true, this is the latest version of the subscription
        /// </summary>
        /// <value>If true, this is the latest version of the subscription</value>
        [DataMember(Name="latest_version", EmitDefaultValue=false)]
        public bool latest_version { get; set; }

        /// <summary>
        /// Initial term information for the subscription.
        /// </summary>
        /// <value>Initial term information for the subscription.</value>
        [DataMember(Name="initial_term", EmitDefaultValue=true)]
        public Term initial_term { get; set; }

        /// <summary>
        /// Current term information for the subscription
        /// </summary>
        /// <value>Current term information for the subscription</value>
        [DataMember(Name="current_term", EmitDefaultValue=true)]
        public Term current_term { get; set; }

        /// <summary>
        /// Renewal term information for the subscription.
        /// </summary>
        /// <value>Renewal term information for the subscription.</value>
        [DataMember(Name="renewal_term", EmitDefaultValue=true)]
        public Term renewal_term { get; set; }

        /// <summary>
        /// Date when the subscription starts.
        /// </summary>
        /// <value>Date when the subscription starts.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime start_date { get; set; }

        /// <summary>
        /// Date when the subscription ends.
        /// </summary>
        /// <value>Date when the subscription ends.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime end_date { get; set; }

        /// <summary>
        /// Description of the subscription. Often useful for displaying to users.
        /// </summary>
        /// <value>Description of the subscription. Often useful for displaying to users.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Date when the subscriber contract is effective.
        /// </summary>
        /// <value>Date when the subscriber contract is effective.</value>
        [DataMember(Name="contract_effective", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime contract_effective { get; set; }

        /// <summary>
        /// Date when the subscribed-to service is activated.
        /// </summary>
        /// <value>Date when the subscribed-to service is activated.</value>
        [DataMember(Name="service_activation", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime service_activation { get; set; }

        /// <summary>
        /// Date when all the services or products in the subscription are accepted by the subscriber.
        /// </summary>
        /// <value>Date when all the services or products in the subscription are accepted by the subscriber.</value>
        [DataMember(Name="customer_acceptance", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime customer_acceptance { get; set; }

        /// <summary>
        /// If true, the subscription is billed separately from other subscriptions. If false, the subscription is included with other subscriptions in the account invoice. The default is false.
        /// </summary>
        /// <value>If true, the subscription is billed separately from other subscriptions. If false, the subscription is included with other subscriptions in the account invoice. The default is false.</value>
        [DataMember(Name="invoice_separately", EmitDefaultValue=false)]
        public bool invoice_separately { get; set; }

        /// <summary>
        /// The order number of the order created by Zuora.
        /// </summary>
        /// <value>The order number of the order created by Zuora.</value>
        [DataMember(Name="order_number", EmitDefaultValue=false)]
        public string order_number { get; set; }

        /// <summary>
        /// List of subscription plans.
        /// </summary>
        /// <value>List of subscription plans.</value>
        [DataMember(Name="subscription_plans", EmitDefaultValue=true)]
        public SubscriptionPlanListResponse subscription_plans { get; private set; }

        /// <summary>
        /// List of invoice items.
        /// </summary>
        /// <value>List of invoice items.</value>
        [DataMember(Name="invoice_items", EmitDefaultValue=true)]
        public InvoiceItemListResponse invoice_items { get; private set; }

        /// <summary>
        /// Total prepaid units available during a subscription. It is an aggregate of all funds under a subscription.
        /// </summary>
        /// <value>Total prepaid units available during a subscription. It is an aggregate of all funds under a subscription.</value>
        [DataMember(Name="prepaid_balance", EmitDefaultValue=false)]
        public List<PrepaidBalance> prepaid_balance { get; private set; }

        /// <summary>
        /// Monthly recurring revenue of the subscription.
        /// </summary>
        /// <value>Monthly recurring revenue of the subscription.</value>
        [DataMember(Name="contracted_mrr", EmitDefaultValue=false)]
        public string contracted_mrr { get; set; }

        /// <summary>
        /// ID of the bill-to contact.
        /// </summary>
        /// <value>ID of the bill-to contact.</value>
        [DataMember(Name="bill_to_id", EmitDefaultValue=true)]
        public string bill_to_id { get; set; }

        /// <summary>
        /// The name of payment term associated with the invoice.
        /// </summary>
        /// <value>The name of payment term associated with the invoice.</value>
        [DataMember(Name="payment_terms", EmitDefaultValue=true)]
        public string payment_terms { get; set; }

        /// <summary>
        /// The billing address for the customer.
        /// </summary>
        /// <value>The billing address for the customer.</value>
        [DataMember(Name="bill_to", EmitDefaultValue=true)]
        public Contact bill_to { get; private set; }

        /// <summary>
        /// The billing document settings for the customer.
        /// </summary>
        /// <value>The billing document settings for the customer.</value>
        [DataMember(Name="billing_document_settings", EmitDefaultValue=true)]
        public FlexibleBillingDocumentSettings billing_document_settings { get; set; }

        /// <summary>
        /// ID of the sold-to contact.
        /// </summary>
        /// <value>ID of the sold-to contact.</value>
        [DataMember(Name="sold_to_id", EmitDefaultValue=true)]
        public string sold_to_id { get; set; }

        /// <summary>
        /// The selling address for the customer.
        /// </summary>
        /// <value>The selling address for the customer.</value>
        [DataMember(Name="sold_to", EmitDefaultValue=true)]
        public Contact sold_to { get; private set; }

        /// <summary>
        /// Gets or Sets actions
        /// </summary>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<OrderAction> actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostSubscriptionOrderResponse {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  updated_by_id: ").Append(updated_by_id).Append("\n");
            sb.Append("  updated_time: ").Append(updated_time).Append("\n");
            sb.Append("  created_by_id: ").Append(created_by_id).Append("\n");
            sb.Append("  created_time: ").Append(created_time).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  custom_objects: ").Append(custom_objects).Append("\n");
            sb.Append("  subscription_number: ").Append(subscription_number).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  version: ").Append(version).Append("\n");
            sb.Append("  account_id: ").Append(account_id).Append("\n");
            sb.Append("  account: ").Append(account).Append("\n");
            sb.Append("  invoice_owner_account_id: ").Append(invoice_owner_account_id).Append("\n");
            sb.Append("  invoice_owner_account: ").Append(invoice_owner_account).Append("\n");
            sb.Append("  auto_renew: ").Append(auto_renew).Append("\n");
            sb.Append("  latest_version: ").Append(latest_version).Append("\n");
            sb.Append("  initial_term: ").Append(initial_term).Append("\n");
            sb.Append("  current_term: ").Append(current_term).Append("\n");
            sb.Append("  renewal_term: ").Append(renewal_term).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  contract_effective: ").Append(contract_effective).Append("\n");
            sb.Append("  service_activation: ").Append(service_activation).Append("\n");
            sb.Append("  customer_acceptance: ").Append(customer_acceptance).Append("\n");
            sb.Append("  invoice_separately: ").Append(invoice_separately).Append("\n");
            sb.Append("  order_number: ").Append(order_number).Append("\n");
            sb.Append("  subscription_plans: ").Append(subscription_plans).Append("\n");
            sb.Append("  invoice_items: ").Append(invoice_items).Append("\n");
            sb.Append("  prepaid_balance: ").Append(prepaid_balance).Append("\n");
            sb.Append("  contracted_mrr: ").Append(contracted_mrr).Append("\n");
            sb.Append("  bill_to_id: ").Append(bill_to_id).Append("\n");
            sb.Append("  payment_terms: ").Append(payment_terms).Append("\n");
            sb.Append("  bill_to: ").Append(bill_to).Append("\n");
            sb.Append("  billing_document_settings: ").Append(billing_document_settings).Append("\n");
            sb.Append("  sold_to_id: ").Append(sold_to_id).Append("\n");
            sb.Append("  sold_to: ").Append(sold_to).Append("\n");
            sb.Append("  actions: ").Append(actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostSubscriptionOrderResponse);
        }

        /// <summary>
        /// Returns true if PostSubscriptionOrderResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PostSubscriptionOrderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostSubscriptionOrderResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.updated_by_id == input.updated_by_id ||
                    (this.updated_by_id != null &&
                    this.updated_by_id.Equals(input.updated_by_id))
                ) && 
                (
                    this.updated_time == input.updated_time ||
                    (this.updated_time != null &&
                    this.updated_time.Equals(input.updated_time))
                ) && 
                (
                    this.created_by_id == input.created_by_id ||
                    (this.created_by_id != null &&
                    this.created_by_id.Equals(input.created_by_id))
                ) && 
                (
                    this.created_time == input.created_time ||
                    (this.created_time != null &&
                    this.created_time.Equals(input.created_time))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.custom_objects == input.custom_objects ||
                    this.custom_objects != null &&
                    input.custom_objects != null &&
                    this.custom_objects.SequenceEqual(input.custom_objects)
                ) && 
                (
                    this.subscription_number == input.subscription_number ||
                    (this.subscription_number != null &&
                    this.subscription_number.Equals(input.subscription_number))
                ) && 
                (
                    this.state == input.state ||
                    (this.state != null &&
                    this.state.Equals(input.state))
                ) && 
                (
                    this.version == input.version ||
                    (this.version != null &&
                    this.version.Equals(input.version))
                ) && 
                (
                    this.account_id == input.account_id ||
                    (this.account_id != null &&
                    this.account_id.Equals(input.account_id))
                ) && 
                (
                    this.account == input.account ||
                    (this.account != null &&
                    this.account.Equals(input.account))
                ) && 
                (
                    this.invoice_owner_account_id == input.invoice_owner_account_id ||
                    (this.invoice_owner_account_id != null &&
                    this.invoice_owner_account_id.Equals(input.invoice_owner_account_id))
                ) && 
                (
                    this.invoice_owner_account == input.invoice_owner_account ||
                    (this.invoice_owner_account != null &&
                    this.invoice_owner_account.Equals(input.invoice_owner_account))
                ) && 
                (
                    this.auto_renew == input.auto_renew ||
                    (this.auto_renew != null &&
                    this.auto_renew.Equals(input.auto_renew))
                ) && 
                (
                    this.latest_version == input.latest_version ||
                    (this.latest_version != null &&
                    this.latest_version.Equals(input.latest_version))
                ) && 
                (
                    this.initial_term == input.initial_term ||
                    (this.initial_term != null &&
                    this.initial_term.Equals(input.initial_term))
                ) && 
                (
                    this.current_term == input.current_term ||
                    (this.current_term != null &&
                    this.current_term.Equals(input.current_term))
                ) && 
                (
                    this.renewal_term == input.renewal_term ||
                    (this.renewal_term != null &&
                    this.renewal_term.Equals(input.renewal_term))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.contract_effective == input.contract_effective ||
                    (this.contract_effective != null &&
                    this.contract_effective.Equals(input.contract_effective))
                ) && 
                (
                    this.service_activation == input.service_activation ||
                    (this.service_activation != null &&
                    this.service_activation.Equals(input.service_activation))
                ) && 
                (
                    this.customer_acceptance == input.customer_acceptance ||
                    (this.customer_acceptance != null &&
                    this.customer_acceptance.Equals(input.customer_acceptance))
                ) && 
                (
                    this.invoice_separately == input.invoice_separately ||
                    (this.invoice_separately != null &&
                    this.invoice_separately.Equals(input.invoice_separately))
                ) && 
                (
                    this.order_number == input.order_number ||
                    (this.order_number != null &&
                    this.order_number.Equals(input.order_number))
                ) && 
                (
                    this.subscription_plans == input.subscription_plans ||
                    (this.subscription_plans != null &&
                    this.subscription_plans.Equals(input.subscription_plans))
                ) && 
                (
                    this.invoice_items == input.invoice_items ||
                    (this.invoice_items != null &&
                    this.invoice_items.Equals(input.invoice_items))
                ) && 
                (
                    this.prepaid_balance == input.prepaid_balance ||
                    this.prepaid_balance != null &&
                    input.prepaid_balance != null &&
                    this.prepaid_balance.SequenceEqual(input.prepaid_balance)
                ) && 
                (
                    this.contracted_mrr == input.contracted_mrr ||
                    (this.contracted_mrr != null &&
                    this.contracted_mrr.Equals(input.contracted_mrr))
                ) && 
                (
                    this.bill_to_id == input.bill_to_id ||
                    (this.bill_to_id != null &&
                    this.bill_to_id.Equals(input.bill_to_id))
                ) && 
                (
                    this.payment_terms == input.payment_terms ||
                    (this.payment_terms != null &&
                    this.payment_terms.Equals(input.payment_terms))
                ) && 
                (
                    this.bill_to == input.bill_to ||
                    (this.bill_to != null &&
                    this.bill_to.Equals(input.bill_to))
                ) && 
                (
                    this.billing_document_settings == input.billing_document_settings ||
                    (this.billing_document_settings != null &&
                    this.billing_document_settings.Equals(input.billing_document_settings))
                ) && 
                (
                    this.sold_to_id == input.sold_to_id ||
                    (this.sold_to_id != null &&
                    this.sold_to_id.Equals(input.sold_to_id))
                ) && 
                (
                    this.sold_to == input.sold_to ||
                    (this.sold_to != null &&
                    this.sold_to.Equals(input.sold_to))
                ) && 
                (
                    this.actions == input.actions ||
                    this.actions != null &&
                    input.actions != null &&
                    this.actions.SequenceEqual(input.actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.updated_by_id != null)
                    hashCode = hashCode * 59 + this.updated_by_id.GetHashCode();
                if (this.updated_time != null)
                    hashCode = hashCode * 59 + this.updated_time.GetHashCode();
                if (this.created_by_id != null)
                    hashCode = hashCode * 59 + this.created_by_id.GetHashCode();
                if (this.created_time != null)
                    hashCode = hashCode * 59 + this.created_time.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.custom_objects != null)
                    hashCode = hashCode * 59 + this.custom_objects.GetHashCode();
                if (this.subscription_number != null)
                    hashCode = hashCode * 59 + this.subscription_number.GetHashCode();
                if (this.state != null)
                    hashCode = hashCode * 59 + this.state.GetHashCode();
                if (this.version != null)
                    hashCode = hashCode * 59 + this.version.GetHashCode();
                if (this.account_id != null)
                    hashCode = hashCode * 59 + this.account_id.GetHashCode();
                if (this.account != null)
                    hashCode = hashCode * 59 + this.account.GetHashCode();
                if (this.invoice_owner_account_id != null)
                    hashCode = hashCode * 59 + this.invoice_owner_account_id.GetHashCode();
                if (this.invoice_owner_account != null)
                    hashCode = hashCode * 59 + this.invoice_owner_account.GetHashCode();
                if (this.auto_renew != null)
                    hashCode = hashCode * 59 + this.auto_renew.GetHashCode();
                if (this.latest_version != null)
                    hashCode = hashCode * 59 + this.latest_version.GetHashCode();
                if (this.initial_term != null)
                    hashCode = hashCode * 59 + this.initial_term.GetHashCode();
                if (this.current_term != null)
                    hashCode = hashCode * 59 + this.current_term.GetHashCode();
                if (this.renewal_term != null)
                    hashCode = hashCode * 59 + this.renewal_term.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.contract_effective != null)
                    hashCode = hashCode * 59 + this.contract_effective.GetHashCode();
                if (this.service_activation != null)
                    hashCode = hashCode * 59 + this.service_activation.GetHashCode();
                if (this.customer_acceptance != null)
                    hashCode = hashCode * 59 + this.customer_acceptance.GetHashCode();
                if (this.invoice_separately != null)
                    hashCode = hashCode * 59 + this.invoice_separately.GetHashCode();
                if (this.order_number != null)
                    hashCode = hashCode * 59 + this.order_number.GetHashCode();
                if (this.subscription_plans != null)
                    hashCode = hashCode * 59 + this.subscription_plans.GetHashCode();
                if (this.invoice_items != null)
                    hashCode = hashCode * 59 + this.invoice_items.GetHashCode();
                if (this.prepaid_balance != null)
                    hashCode = hashCode * 59 + this.prepaid_balance.GetHashCode();
                if (this.contracted_mrr != null)
                    hashCode = hashCode * 59 + this.contracted_mrr.GetHashCode();
                if (this.bill_to_id != null)
                    hashCode = hashCode * 59 + this.bill_to_id.GetHashCode();
                if (this.payment_terms != null)
                    hashCode = hashCode * 59 + this.payment_terms.GetHashCode();
                if (this.bill_to != null)
                    hashCode = hashCode * 59 + this.bill_to.GetHashCode();
                if (this.billing_document_settings != null)
                    hashCode = hashCode * 59 + this.billing_document_settings.GetHashCode();
                if (this.sold_to_id != null)
                    hashCode = hashCode * 59 + this.sold_to_id.GetHashCode();
                if (this.sold_to != null)
                    hashCode = hashCode * 59 + this.sold_to.GetHashCode();
                if (this.actions != null)
                    hashCode = hashCode * 59 + this.actions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
