/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Zuora.Client;
using Zuora.Api;
using Zuora.Model;

namespace Zuora.Test
{
    /// <summary>
    ///  Class for testing CustomObjectsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CustomObjectsApiTests
    {
        private CustomObjectsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CustomObjectsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CustomObjectsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' CustomObjectsApi
            //Assert.IsInstanceOf(typeof(CustomObjectsApi), instance);
        }

        
        /// <summary>
        /// Test CreateCustomObject
        /// </summary>
        [Test]
        public void CreateCustomObjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customObjectType = null;
            //Dictionary<string, Object> requestBody = null;
            //List<string> fields = null;
            //List<string> customObjectCustomObjectTypeFields = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //List<string> expand = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.CreateCustomObject(customObjectType, requestBody, fields, customObjectCustomObjectTypeFields, filter, pageSize, expand, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(CustomObject), response, "response is CustomObject");
        }
        
        /// <summary>
        /// Test DeleteCustomObject
        /// </summary>
        [Test]
        public void DeleteCustomObjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customObjectType = null;
            //string customObjectId = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //instance.DeleteCustomObject(customObjectType, customObjectId, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            
        }
        
        /// <summary>
        /// Test GetCustomObject
        /// </summary>
        [Test]
        public void GetCustomObjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customObjectType = null;
            //string customObjectId = null;
            //List<string> fields = null;
            //List<string> customObjectCustomObjectTypeFields = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //List<string> expand = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetCustomObject(customObjectType, customObjectId, fields, customObjectCustomObjectTypeFields, filter, pageSize, expand, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(CustomObject), response, "response is CustomObject");
        }
        
        /// <summary>
        /// Test GetCustomObjects
        /// </summary>
        [Test]
        public void GetCustomObjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customObjectType = null;
            //int? pageSize = null;
            //List<string> expand = null;
            //string cursor = null;
            //List<string> filter = null;
            //List<string> sort = null;
            //List<string> fields = null;
            //List<string> customObjectCustomObjectTypeFields = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetCustomObjects(customObjectType, pageSize, expand, cursor, filter, sort, fields, customObjectCustomObjectTypeFields, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(ListCustomObjectResponse), response, "response is ListCustomObjectResponse");
        }
        
        /// <summary>
        /// Test UpdateCustomObject
        /// </summary>
        [Test]
        public void UpdateCustomObjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customObjectType = null;
            //string customObjectId = null;
            //Dictionary<string, Object> requestBody = null;
            //List<string> fields = null;
            //List<string> customObjectCustomObjectTypeFields = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //List<string> expand = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.UpdateCustomObject(customObjectType, customObjectId, requestBody, fields, customObjectCustomObjectTypeFields, filter, pageSize, expand, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(CustomObject), response, "response is CustomObject");
        }
        
    }

}
