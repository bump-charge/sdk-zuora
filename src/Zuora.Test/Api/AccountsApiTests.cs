/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Zuora.Client;
using Zuora.Api;
using Zuora.Model;

namespace Zuora.Test
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountsApiTests
    {
        private AccountsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' AccountsApi
            //Assert.IsInstanceOf(typeof(AccountsApi), instance);
        }

        
        /// <summary>
        /// Test CreateAccount
        /// </summary>
        [Test]
        public void CreateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccountCreateRequest accountCreateRequest = null;
            //List<string> fields = null;
            //List<string> subscriptionsFields = null;
            //List<string> subscriptionPlansFields = null;
            //List<string> subscriptionItemsFields = null;
            //List<string> invoiceOwnerAccountFields = null;
            //List<string> planFields = null;
            //List<string> paymentMethodsFields = null;
            //List<string> paymentsFields = null;
            //List<string> billingDocumentsFields = null;
            //List<string> billingDocumentItemsFields = null;
            //List<string> billToFields = null;
            //List<string> soldToFields = null;
            //List<string> defaultPaymentMethodFields = null;
            //List<string> usageRecordsFields = null;
            //List<string> invoicesFields = null;
            //List<string> creditMemosFields = null;
            //List<string> debitMemosFields = null;
            //List<string> prepaidBalanceFields = null;
            //List<string> transactionsFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.CreateAccount(accountCreateRequest, fields, subscriptionsFields, subscriptionPlansFields, subscriptionItemsFields, invoiceOwnerAccountFields, planFields, paymentMethodsFields, paymentsFields, billingDocumentsFields, billingDocumentItemsFields, billToFields, soldToFields, defaultPaymentMethodFields, usageRecordsFields, invoicesFields, creditMemosFields, debitMemosFields, prepaidBalanceFields, transactionsFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(Account), response, "response is Account");
        }
        
        /// <summary>
        /// Test DeleteAccount
        /// </summary>
        [Test]
        public void DeleteAccountTest()
        {
            Console.WriteLine("Why does nothing work?");
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //instance.DeleteAccount(accountId, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            
        }
        
        /// <summary>
        /// Test GenerateBillingDocuments
        /// </summary>
        [Test]
        public void GenerateBillingDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //GenerateBillingDocumentsAccountRequest generateBillingDocumentsAccountRequest = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GenerateBillingDocuments(accountId, generateBillingDocumentsAccountRequest, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(GenerateBillingDocumentsAccountResponse), response, "response is GenerateBillingDocumentsAccountResponse");
        }
        
        /// <summary>
        /// Test GetAccount
        /// </summary>
        [Test]
        public void GetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //List<string> fields = null;
            //List<string> subscriptionsFields = null;
            //List<string> subscriptionPlansFields = null;
            //List<string> subscriptionItemsFields = null;
            //List<string> invoiceOwnerAccountFields = null;
            //List<string> planFields = null;
            //List<string> paymentMethodsFields = null;
            //List<string> paymentsFields = null;
            //List<string> billingDocumentsFields = null;
            //List<string> billingDocumentItemsFields = null;
            //List<string> billToFields = null;
            //List<string> soldToFields = null;
            //List<string> defaultPaymentMethodFields = null;
            //List<string> usageRecordsFields = null;
            //List<string> invoicesFields = null;
            //List<string> creditMemosFields = null;
            //List<string> debitMemosFields = null;
            //List<string> prepaidBalanceFields = null;
            //List<string> transactionsFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetAccount(accountId, fields, subscriptionsFields, subscriptionPlansFields, subscriptionItemsFields, invoiceOwnerAccountFields, planFields, paymentMethodsFields, paymentsFields, billingDocumentsFields, billingDocumentItemsFields, billToFields, soldToFields, defaultPaymentMethodFields, usageRecordsFields, invoicesFields, creditMemosFields, debitMemosFields, prepaidBalanceFields, transactionsFields, expand, filter, pageSize, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(Account), response, "response is Account");
        }
        
        /// <summary>
        /// Test GetAccounts
        /// </summary>
        [Test]
        public void GetAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cursor = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //List<string> sort = null;
            //int? pageSize = null;
            //List<string> fields = null;
            //List<string> subscriptionsFields = null;
            //List<string> subscriptionPlansFields = null;
            //List<string> subscriptionItemsFields = null;
            //List<string> invoiceOwnerAccountFields = null;
            //List<string> planFields = null;
            //List<string> paymentMethodsFields = null;
            //List<string> paymentsFields = null;
            //List<string> billingDocumentsFields = null;
            //List<string> billingDocumentItemsFields = null;
            //List<string> billToFields = null;
            //List<string> soldToFields = null;
            //List<string> defaultPaymentMethodFields = null;
            //List<string> usageRecordsFields = null;
            //List<string> invoicesFields = null;
            //List<string> creditMemosFields = null;
            //List<string> debitMemosFields = null;
            //List<string> prepaidBalanceFields = null;
            //List<string> transactionsFields = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetAccounts(cursor, expand, filter, sort, pageSize, fields, subscriptionsFields, subscriptionPlansFields, subscriptionItemsFields, invoiceOwnerAccountFields, planFields, paymentMethodsFields, paymentsFields, billingDocumentsFields, billingDocumentItemsFields, billToFields, soldToFields, defaultPaymentMethodFields, usageRecordsFields, invoicesFields, creditMemosFields, debitMemosFields, prepaidBalanceFields, transactionsFields, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(ListAccountResponse), response, "response is ListAccountResponse");
        }
        
        /// <summary>
        /// Test PreviewAccount
        /// </summary>
        [Test]
        public void PreviewAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //AccountPreviewRequest accountPreviewRequest = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.PreviewAccount(accountId, accountPreviewRequest, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(AccountPreviewResponse), response, "response is AccountPreviewResponse");
        }
        
        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Test]
        public void UpdateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //AccountPatchRequest accountPatchRequest = null;
            //List<string> fields = null;
            //List<string> subscriptionsFields = null;
            //List<string> subscriptionPlansFields = null;
            //List<string> subscriptionItemsFields = null;
            //List<string> invoiceOwnerAccountFields = null;
            //List<string> planFields = null;
            //List<string> paymentMethodsFields = null;
            //List<string> paymentsFields = null;
            //List<string> billingDocumentsFields = null;
            //List<string> billingDocumentItemsFields = null;
            //List<string> billToFields = null;
            //List<string> soldToFields = null;
            //List<string> defaultPaymentMethodFields = null;
            //List<string> usageRecordsFields = null;
            //List<string> invoicesFields = null;
            //List<string> creditMemosFields = null;
            //List<string> debitMemosFields = null;
            //List<string> prepaidBalanceFields = null;
            //List<string> transactionsFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.UpdateAccount(accountId, accountPatchRequest, fields, subscriptionsFields, subscriptionPlansFields, subscriptionItemsFields, invoiceOwnerAccountFields, planFields, paymentMethodsFields, paymentsFields, billingDocumentsFields, billingDocumentItemsFields, billToFields, soldToFields, defaultPaymentMethodFields, usageRecordsFields, invoicesFields, creditMemosFields, debitMemosFields, prepaidBalanceFields, transactionsFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(Account), response, "response is Account");
        }
        
    }

}
