/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Zuora.Client;
using Zuora.Api;
using Zuora.Model;

namespace Zuora.Test
{
    /// <summary>
    ///  Class for testing DebitMemosApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DebitMemosApiTests
    {
        private DebitMemosApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DebitMemosApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DebitMemosApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DebitMemosApi
            //Assert.IsInstanceOf(typeof(DebitMemosApi), instance);
        }

        
        /// <summary>
        /// Test CancelDebitMemo
        /// </summary>
        [Test]
        public void CancelDebitMemoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string debitMemoId = null;
            //List<string> fields = null;
            //List<string> debitMemoItemsFields = null;
            //List<string> taxationItemsFields = null;
            //List<string> accountFields = null;
            //List<string> billToFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityId = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.CancelDebitMemo(debitMemoId, fields, debitMemoItemsFields, taxationItemsFields, accountFields, billToFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityId, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(DebitMemo), response, "response is DebitMemo");
        }
        
        /// <summary>
        /// Test CreateDebitMemo
        /// </summary>
        [Test]
        public void CreateDebitMemoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DebitMemoCreateRequest debitMemoCreateRequest = null;
            //List<string> fields = null;
            //List<string> debitMemoItemsFields = null;
            //List<string> taxationItemsFields = null;
            //List<string> accountFields = null;
            //List<string> billToFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.CreateDebitMemo(debitMemoCreateRequest, fields, debitMemoItemsFields, taxationItemsFields, accountFields, billToFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(DebitMemo), response, "response is DebitMemo");
        }
        
        /// <summary>
        /// Test DeleteDebitMemo
        /// </summary>
        [Test]
        public void DeleteDebitMemoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string debitMemoId = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //instance.DeleteDebitMemo(debitMemoId, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            
        }
        
        /// <summary>
        /// Test GetDebitMemo
        /// </summary>
        [Test]
        public void GetDebitMemoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string debitMemoId = null;
            //List<string> fields = null;
            //List<string> debitMemoItemsFields = null;
            //List<string> taxationItemsFields = null;
            //List<string> accountFields = null;
            //List<string> billToFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetDebitMemo(debitMemoId, fields, debitMemoItemsFields, taxationItemsFields, accountFields, billToFields, expand, filter, pageSize, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(DebitMemo), response, "response is DebitMemo");
        }
        
        /// <summary>
        /// Test GetDebitMemoItems
        /// </summary>
        [Test]
        public void GetDebitMemoItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cursor = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //List<string> sort = null;
            //int? pageSize = null;
            //List<string> fields = null;
            //List<string> taxationItemsFields = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetDebitMemoItems(cursor, expand, filter, sort, pageSize, fields, taxationItemsFields, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(DebitMemoItemListResponse), response, "response is DebitMemoItemListResponse");
        }
        
        /// <summary>
        /// Test GetDebitMemoes
        /// </summary>
        [Test]
        public void GetDebitMemoesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cursor = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //List<string> sort = null;
            //int? pageSize = null;
            //List<string> fields = null;
            //List<string> debitMemoItemsFields = null;
            //List<string> taxationItemsFields = null;
            //List<string> accountFields = null;
            //List<string> billToFields = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetDebitMemoes(cursor, expand, filter, sort, pageSize, fields, debitMemoItemsFields, taxationItemsFields, accountFields, billToFields, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(DebitMemoListResponse), response, "response is DebitMemoListResponse");
        }
        
        /// <summary>
        /// Test PatchDebitMemo
        /// </summary>
        [Test]
        public void PatchDebitMemoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string debitMemoId = null;
            //DebitMemoPatchRequest debitMemoPatchRequest = null;
            //List<string> fields = null;
            //List<string> debitMemoItemsFields = null;
            //List<string> taxationItemsFields = null;
            //List<string> accountFields = null;
            //List<string> billToFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.PatchDebitMemo(debitMemoId, debitMemoPatchRequest, fields, debitMemoItemsFields, taxationItemsFields, accountFields, billToFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(DebitMemo), response, "response is DebitMemo");
        }
        
        /// <summary>
        /// Test PayDebitMemo
        /// </summary>
        [Test]
        public void PayDebitMemoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string debitMemoId = null;
            //PayDebitMemoRequest payDebitMemoRequest = null;
            //List<string> fields = null;
            //List<string> debitMemoItemsFields = null;
            //List<string> taxationItemsFields = null;
            //List<string> accountFields = null;
            //List<string> billToFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.PayDebitMemo(debitMemoId, payDebitMemoRequest, fields, debitMemoItemsFields, taxationItemsFields, accountFields, billToFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(DebitMemo), response, "response is DebitMemo");
        }
        
        /// <summary>
        /// Test PostsDebitMemo
        /// </summary>
        [Test]
        public void PostsDebitMemoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string debitMemoId = null;
            //List<string> fields = null;
            //List<string> debitMemoItemsFields = null;
            //List<string> taxationItemsFields = null;
            //List<string> accountFields = null;
            //List<string> billToFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityId = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.PostsDebitMemo(debitMemoId, fields, debitMemoItemsFields, taxationItemsFields, accountFields, billToFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityId, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(DebitMemo), response, "response is DebitMemo");
        }
        
        /// <summary>
        /// Test UnpostsDebitMemo
        /// </summary>
        [Test]
        public void UnpostsDebitMemoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string debitMemoId = null;
            //List<string> fields = null;
            //List<string> debitMemoItemsFields = null;
            //List<string> taxationItemsFields = null;
            //List<string> accountFields = null;
            //List<string> billToFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityId = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.UnpostsDebitMemo(debitMemoId, fields, debitMemoItemsFields, taxationItemsFields, accountFields, billToFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityId, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(DebitMemo), response, "response is DebitMemo");
        }
        
    }

}
