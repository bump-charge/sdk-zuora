/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Zuora.Client;
using Zuora.Api;
using Zuora.Model;

namespace Zuora.Test
{
    /// <summary>
    ///  Class for testing PaymentMethodsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PaymentMethodsApiTests
    {
        private PaymentMethodsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PaymentMethodsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PaymentMethodsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PaymentMethodsApi
            //Assert.IsInstanceOf(typeof(PaymentMethodsApi), instance);
        }

        
        /// <summary>
        /// Test AuthorizePaymentMethod
        /// </summary>
        [Test]
        public void AuthorizePaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentMethodId = null;
            //PaymentMethodAuthorizationRequest paymentMethodAuthorizationRequest = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.AuthorizePaymentMethod(paymentMethodId, paymentMethodAuthorizationRequest, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(PaymentMethodAuthorizationResponse), response, "response is PaymentMethodAuthorizationResponse");
        }
        
        /// <summary>
        /// Test CreatePaymentMethod
        /// </summary>
        [Test]
        public void CreatePaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentMethodCreateRequest paymentMethodCreateRequest = null;
            //List<string> fields = null;
            //List<string> accountFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.CreatePaymentMethod(paymentMethodCreateRequest, fields, accountFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(PaymentMethod), response, "response is PaymentMethod");
        }
        
        /// <summary>
        /// Test DeletePaymentMethod
        /// </summary>
        [Test]
        public void DeletePaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentMethodId = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //instance.DeletePaymentMethod(paymentMethodId, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            
        }
        
        /// <summary>
        /// Test GetPaymentMethodById
        /// </summary>
        [Test]
        public void GetPaymentMethodByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentMethodId = null;
            //List<string> fields = null;
            //List<string> accountFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetPaymentMethodById(paymentMethodId, fields, accountFields, expand, filter, pageSize, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(PaymentMethod), response, "response is PaymentMethod");
        }
        
        /// <summary>
        /// Test GetPaymentMethods
        /// </summary>
        [Test]
        public void GetPaymentMethodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cursor = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //List<string> sort = null;
            //int? pageSize = null;
            //List<string> fields = null;
            //List<string> accountFields = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetPaymentMethods(cursor, expand, filter, sort, pageSize, fields, accountFields, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(PaymentMethodListResponse), response, "response is PaymentMethodListResponse");
        }
        
        /// <summary>
        /// Test ScrubPaymentMethod
        /// </summary>
        [Test]
        public void ScrubPaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentMethodId = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityId = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //instance.ScrubPaymentMethod(paymentMethodId, zuoraTrackId, async, zuoraEntityId, idempotencyKey, acceptEncoding, contentEncoding);
            
        }
        
        /// <summary>
        /// Test UpdatePaymentMethod
        /// </summary>
        [Test]
        public void UpdatePaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentMethodId = null;
            //PaymentMethodPatchRequest paymentMethodPatchRequest = null;
            //List<string> fields = null;
            //List<string> accountFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.UpdatePaymentMethod(paymentMethodId, paymentMethodPatchRequest, fields, accountFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(PaymentMethod), response, "response is PaymentMethod");
        }
        
        /// <summary>
        /// Test VerifyPaymentMethod
        /// </summary>
        [Test]
        public void VerifyPaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentMethodId = null;
            //PaymentMethodVerificationRequest paymentMethodVerificationRequest = null;
            //List<string> fields = null;
            //List<string> accountFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.VerifyPaymentMethod(paymentMethodId, paymentMethodVerificationRequest, fields, accountFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(PaymentMethod), response, "response is PaymentMethod");
        }
        
        /// <summary>
        /// Test VoidAuthorizationPaymentMethod
        /// </summary>
        [Test]
        public void VoidAuthorizationPaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentMethodId = null;
            //PaymentMethodVoidAuthorizationRequest paymentMethodVoidAuthorizationRequest = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.VoidAuthorizationPaymentMethod(paymentMethodId, paymentMethodVoidAuthorizationRequest, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(PaymentMethodAuthorizationResponse), response, "response is PaymentMethodAuthorizationResponse");
        }
        
    }

}
