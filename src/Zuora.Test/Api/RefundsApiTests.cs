/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Zuora.Client;
using Zuora.Api;
using Zuora.Model;

namespace Zuora.Test
{
    /// <summary>
    ///  Class for testing RefundsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RefundsApiTests
    {
        private RefundsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RefundsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RefundsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' RefundsApi
            //Assert.IsInstanceOf(typeof(RefundsApi), instance);
        }

        
        /// <summary>
        /// Test CancelRefund
        /// </summary>
        [Test]
        public void CancelRefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string refundId = null;
            //List<string> fields = null;
            //List<string> accountFields = null;
            //List<string> paymentMethodFields = null;
            //List<string> appliedToFields = null;
            //List<string> refundAppliedToItemFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityId = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.CancelRefund(refundId, fields, accountFields, paymentMethodFields, appliedToFields, refundAppliedToItemFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityId, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(Refund), response, "response is Refund");
        }
        
        /// <summary>
        /// Test CreateRefund
        /// </summary>
        [Test]
        public void CreateRefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RefundCreateRequest refundCreateRequest = null;
            //List<string> fields = null;
            //List<string> accountFields = null;
            //List<string> paymentMethodFields = null;
            //List<string> appliedToFields = null;
            //List<string> refundAppliedToItemFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.CreateRefund(refundCreateRequest, fields, accountFields, paymentMethodFields, appliedToFields, refundAppliedToItemFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(Refund), response, "response is Refund");
        }
        
        /// <summary>
        /// Test DeleteRefund
        /// </summary>
        [Test]
        public void DeleteRefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string refundId = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //instance.DeleteRefund(refundId, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            
        }
        
        /// <summary>
        /// Test GetRefund
        /// </summary>
        [Test]
        public void GetRefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string refundId = null;
            //List<string> fields = null;
            //List<string> accountFields = null;
            //List<string> paymentMethodFields = null;
            //List<string> appliedToFields = null;
            //List<string> refundAppliedToItemFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetRefund(refundId, fields, accountFields, paymentMethodFields, appliedToFields, refundAppliedToItemFields, expand, filter, pageSize, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(Refund), response, "response is Refund");
        }
        
        /// <summary>
        /// Test GetRefunds
        /// </summary>
        [Test]
        public void GetRefundsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cursor = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //List<string> sort = null;
            //int? pageSize = null;
            //List<string> fields = null;
            //List<string> accountFields = null;
            //List<string> paymentMethodFields = null;
            //List<string> appliedToFields = null;
            //List<string> refundAppliedToItemFields = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetRefunds(cursor, expand, filter, sort, pageSize, fields, accountFields, paymentMethodFields, appliedToFields, refundAppliedToItemFields, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(RefundListResponse), response, "response is RefundListResponse");
        }
        
        /// <summary>
        /// Test UpdateRefund
        /// </summary>
        [Test]
        public void UpdateRefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string refundId = null;
            //RefundPatchRequest refundPatchRequest = null;
            //List<string> fields = null;
            //List<string> accountFields = null;
            //List<string> paymentMethodFields = null;
            //List<string> appliedToFields = null;
            //List<string> refundAppliedToItemFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.UpdateRefund(refundId, refundPatchRequest, fields, accountFields, paymentMethodFields, appliedToFields, refundAppliedToItemFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(Refund), response, "response is Refund");
        }
        
    }

}
