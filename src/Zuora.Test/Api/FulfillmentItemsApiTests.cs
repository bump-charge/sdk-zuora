/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Zuora.Client;
using Zuora.Api;
using Zuora.Model;

namespace Zuora.Test
{
    /// <summary>
    ///  Class for testing FulfillmentItemsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FulfillmentItemsApiTests
    {
        private FulfillmentItemsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FulfillmentItemsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FulfillmentItemsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' FulfillmentItemsApi
            //Assert.IsInstanceOf(typeof(FulfillmentItemsApi), instance);
        }

        
        /// <summary>
        /// Test CreateFulfillmentItem
        /// </summary>
        [Test]
        public void CreateFulfillmentItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FulfillmentItemCreateRequest fulfillmentItemCreateRequest = null;
            //List<string> fields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.CreateFulfillmentItem(fulfillmentItemCreateRequest, fields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(FulfillmentItem), response, "response is FulfillmentItem");
        }
        
        /// <summary>
        /// Test CreateFulfillmentItems
        /// </summary>
        [Test]
        public void CreateFulfillmentItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FulfillmentItemCreateBulkRequest fulfillmentItemCreateBulkRequest = null;
            //List<string> fields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.CreateFulfillmentItems(fulfillmentItemCreateBulkRequest, fields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(FulfillmentItemCreateBulkResponse), response, "response is FulfillmentItemCreateBulkResponse");
        }
        
        /// <summary>
        /// Test DeleteFulfillmentItem
        /// </summary>
        [Test]
        public void DeleteFulfillmentItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fulfillmentItemId = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //instance.DeleteFulfillmentItem(fulfillmentItemId, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            
        }
        
        /// <summary>
        /// Test GetFulfillmentItem
        /// </summary>
        [Test]
        public void GetFulfillmentItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fulfillmentItemId = null;
            //List<string> fields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetFulfillmentItem(fulfillmentItemId, fields, expand, filter, pageSize, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(FulfillmentItem), response, "response is FulfillmentItem");
        }
        
        /// <summary>
        /// Test GetFulfillmentItems
        /// </summary>
        [Test]
        public void GetFulfillmentItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cursor = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //List<string> sort = null;
            //int? pageSize = null;
            //List<string> fields = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetFulfillmentItems(cursor, expand, filter, sort, pageSize, fields, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(FilfillmentItemListResponse), response, "response is FilfillmentItemListResponse");
        }
        
        /// <summary>
        /// Test UpdateFulfillmentItem
        /// </summary>
        [Test]
        public void UpdateFulfillmentItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fulfillmentItemId = null;
            //FulfillmentItemPatchRequest fulfillmentItemPatchRequest = null;
            //List<string> fields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.UpdateFulfillmentItem(fulfillmentItemId, fulfillmentItemPatchRequest, fields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(FulfillmentItem), response, "response is FulfillmentItem");
        }
        
    }

}
