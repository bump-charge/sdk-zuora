/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Zuora.Client;
using Zuora.Api;
using Zuora.Model;

namespace Zuora.Test
{
    /// <summary>
    ///  Class for testing OrdersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OrdersApiTests
    {
        private OrdersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new OrdersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of OrdersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' OrdersApi
            //Assert.IsInstanceOf(typeof(OrdersApi), instance);
        }

        
        /// <summary>
        /// Test ActivateOrder
        /// </summary>
        [Test]
        public void ActivateOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orderId = null;
            //List<string> fields = null;
            //List<string> orderActionsFields = null;
            //List<string> subscriptionsFields = null;
            //List<string> lineItemsFields = null;
            //List<string> subscriptionPlansFields = null;
            //List<string> subscriptionItemsFields = null;
            //List<string> invoiceItemsFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityId = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.ActivateOrder(orderId, fields, orderActionsFields, subscriptionsFields, lineItemsFields, subscriptionPlansFields, subscriptionItemsFields, invoiceItemsFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityId, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(Order), response, "response is Order");
        }
        
        /// <summary>
        /// Test CancelOrder
        /// </summary>
        [Test]
        public void CancelOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orderId = null;
            //OrderCancellationRequest orderCancellationRequest = null;
            //List<string> fields = null;
            //List<string> orderActionsFields = null;
            //List<string> subscriptionsFields = null;
            //List<string> lineItemsFields = null;
            //List<string> subscriptionPlansFields = null;
            //List<string> subscriptionItemsFields = null;
            //List<string> invoiceItemsFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.CancelOrder(orderId, orderCancellationRequest, fields, orderActionsFields, subscriptionsFields, lineItemsFields, subscriptionPlansFields, subscriptionItemsFields, invoiceItemsFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(Order), response, "response is Order");
        }
        
        /// <summary>
        /// Test CreateOrder
        /// </summary>
        [Test]
        public void CreateOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrderCreateRequest orderCreateRequest = null;
            //List<string> fields = null;
            //List<string> orderActionsFields = null;
            //List<string> subscriptionsFields = null;
            //List<string> lineItemsFields = null;
            //List<string> subscriptionPlansFields = null;
            //List<string> subscriptionItemsFields = null;
            //List<string> invoiceItemsFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.CreateOrder(orderCreateRequest, fields, orderActionsFields, subscriptionsFields, lineItemsFields, subscriptionPlansFields, subscriptionItemsFields, invoiceItemsFields, expand, filter, pageSize, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(Order), response, "response is Order");
        }
        
        /// <summary>
        /// Test CreateOrderPreview
        /// </summary>
        [Test]
        public void CreateOrderPreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrderPreviewCreateRequest orderPreviewCreateRequest = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.CreateOrderPreview(orderPreviewCreateRequest, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(OrderPreviewResponse), response, "response is OrderPreviewResponse");
        }
        
        /// <summary>
        /// Test DeleteOrder
        /// </summary>
        [Test]
        public void DeleteOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orderId = null;
            //string zuoraTrackId = null;
            //bool? async = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //instance.DeleteOrder(orderId, zuoraTrackId, async, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            
        }
        
        /// <summary>
        /// Test GetOrder
        /// </summary>
        [Test]
        public void GetOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orderId = null;
            //List<string> fields = null;
            //List<string> orderActionsFields = null;
            //List<string> subscriptionsFields = null;
            //List<string> lineItemsFields = null;
            //List<string> subscriptionPlansFields = null;
            //List<string> subscriptionItemsFields = null;
            //List<string> invoiceItemsFields = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //int? pageSize = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetOrder(orderId, fields, orderActionsFields, subscriptionsFields, lineItemsFields, subscriptionPlansFields, subscriptionItemsFields, invoiceItemsFields, expand, filter, pageSize, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(Order), response, "response is Order");
        }
        
        /// <summary>
        /// Test GetOrders
        /// </summary>
        [Test]
        public void GetOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cursor = null;
            //List<string> expand = null;
            //List<string> filter = null;
            //List<string> sort = null;
            //int? pageSize = null;
            //List<string> fields = null;
            //List<string> orderActionsFields = null;
            //List<string> subscriptionsFields = null;
            //List<string> lineItemsFields = null;
            //List<string> subscriptionPlansFields = null;
            //List<string> subscriptionItemsFields = null;
            //List<string> invoiceItemsFields = null;
            //string zuoraTrackId = null;
            //string zuoraEntityIds = null;
            //string idempotencyKey = null;
            //string acceptEncoding = null;
            //string contentEncoding = null;
            //var response = instance.GetOrders(cursor, expand, filter, sort, pageSize, fields, orderActionsFields, subscriptionsFields, lineItemsFields, subscriptionPlansFields, subscriptionItemsFields, invoiceItemsFields, zuoraTrackId, zuoraEntityIds, idempotencyKey, acceptEncoding, contentEncoding);
            //Assert.IsInstanceOf(typeof(OrderListResponse), response, "response is OrderListResponse");
        }
        
    }

}
